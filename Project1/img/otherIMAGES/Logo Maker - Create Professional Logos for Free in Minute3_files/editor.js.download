function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
};
var version = getUrlParameter('version');
var editorClickObject;
var prevPage = sessionStorage.getItem("prevPage");
var editor_exceptions = new Array();
$(function () {
	
	// code for checking session storage working or not
	try {
		sessionStorage.setItem('sessionStorage', 1);
		sessionStorage.removeItem('sessionStorage');
	} catch (e) {
		alert('Your web browser does not support storing settings locally. The most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
		window.location.href = DH.baseURL + '/tools/logo-maker';
		return;
	}
	
	// add utm url with editor 
	var qrStr = "&";
	var url = window.location.href;
	url = url.split("?")[1];
	var params = url.split('&');
	var editorTimer;
	
	//Array for defining gradient colors and stops
	var gradientsArray = {
		gold: { name: 'Gold', stops: [{ offset: 0.05, color: '#B68648' }, { offset: 0.95, color: '#FBF3A3' }] },
		silver: { name: 'Silver', stops: [{ offset: 0.05, color: '#6E6F71' }, { offset: 0.95, color: '#ECECEC' }] },
		bronze: { name: 'Bronze', stops: [{ offset: 0.05, color: '#d64000' }, { offset: 0.95, color: '#edc5be' }] },
		blue: { name: 'Blue', stops: [{ offset: 0.05, color: '#2d388a' }, { offset: 0.95, color: '#00aeef' }] },
		bubblegum: { name: 'Bubblegum', stops: [{ offset: 0.05, color: '#fe8dc6' }, { offset: 0.95, color: '#fed1c7' }] },
		graphite: { name: 'Graphite', stops: [{ offset: 0, color: '#51504f' }, { offset: 0.1, color: '#939598' }, { offset: 0.3, color: '#414042' }, { offset: 0.5, color: '#939598' }, { offset: 0.7, color: '#494c50' }, { offset: 0.9, color: '#6d6e71' }, { offset: 1, color: '#414042' }] },
		green: { name: 'Green', stops: [{ offset: 0, color: '#006838' }, { offset: 1, color: '#96cf24' }] },
		platinum: { name: 'Platinum', stops: [{ offset: 0, color: '#786756' }, { offset: 0.33, color: '#847361' }, { offset: 0.67, color: '#a8a49b' }, { offset: 1, color: '#d6d6d6' }] },
		purple: { name: 'Purple', stops: [{ offset: 0, color: '#25235e' }, { offset: 1, color: '#ae4792' }] },
		purpleblue: { name: 'Purple Blue', stops: [{ offset: 0, color: '#6d7cff' }, { offset: 1, color: '#ff51ff' }] },
		rose: { name: 'Rose', stops: [{ offset: 0, color: '#914d3c' }, { offset: 0.1, color: '#b37362' }, { offset: 0.3, color: '#fcc5b3' }, { offset: 0.5, color: '#f7b7a6' }, { offset: 1, color: '#945f50' }] },
		sand: { name: 'Sand', stops: [{ offset: 0, color: '#ffb295' }, { offset: 1, color: '#fedac6' }] },
		yellow: { name: 'Yellow', stops: [{ offset: 0, color: '#e93e3a' }, { offset: 0.1, color: '#ed683c' }, { offset: 0.3, color: '#f3903f' }, { offset: 0.7, color: '#fdc70c' }, { offset: 1, color: '#fff33b' }] },
	}
	
	var recentColors = [];
	
	$.each(params, function (index, value) {
		var v = value.split('=');
		if (v[0] != 'logoid' && v[0] != 'editor') qrStr += value + '&';
	});
	
	qrStr = qrStr.replace(/&$/, '');
	qrStr = qrStr.replace(/\?$/, '');
	
	if (qrStr == "&") {
		qrStr = "";
	}
	//
	
	// some defaults variable used in whole JS 
	
	var showWarning = true;
	var currCompFontObject;      // current font object
	var currSloganFontObject     // current slogan object
	var currMonogramFontObject     // current monogram object
	var loadMoreStart = 0;
	var jqXHR, jqXHR1;
	var randomPagination = 0;
	var savedPagination = 0;
	var favoritePagination = 0;
	var frameSliderFlag = false;
	var rangeSliderFlag = false;
	var editorParameters = {};
	var svgWidth = 640;
	var svgHeight = 480;
	var templatesData = [];
	var templatesDataJson;
	var favoriteJSON = { companyFont: [], sloganFont: [], colorPallete: { 0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [] }, colorVariation: [], symbolVariation: [], containerVariation: [], layoutVariation: [], logoVariation: [] };
	
	
	// fetch all templates initally 
	$.ajax({
		url: DH.baseURL + '/logoMakerAjax.php',
		type: 'POST',
		data: { action: 'templates', type_id: 0 },
		async: false,
		success: function (json) {
			var json = JSON.parse(json);
			var i = 0;
			templatesDataJson = json.data.templates;
			$.each(json.data.templates, function (k, v) {
				if (v.is_show == 1) {
					templatesData[i++] = (v.template_code);
				}
			});
			
		}
	});
	
	
	// constants for the defualt templates	 
	var constantVars = {
		targets: { 2: 'logo', 7: 'logo', 8: 'logo', 9: 'slogan', 10: 'slogan', 3: 'background', 12: 'background', 13: 'logoColor', 14: 'sloganColor', 15: 'symbolColor', 16: 'containerColor' },
		colors: { 'bgColor': '#000000', 'bgColorFamily': '', 'mainTextColor': '#ffffff', 'mainTextFamily': '', 'sloganTextColor': '#ffffff', 'sloganTextFamily': '', 'iconColor': '#ffffff', 'iconFamily': '', 'frameColor': '#ffffff', 'frameFamily': '', 'iconFrameColor': '#ffffff', 'iconFrameFamily': '' },
		SVGWIDTH: svgWidth,
		SVGHEIGHT: svgHeight,
		VIEWBOXWIDTH: 640,
		VIEWBOXHEIGHT: 480,
		CONTAINERWIDTH: parseInt(this.SVGWIDTH / 0.7),
		CONTAINERHEIGHT: parseInt(this.SVGHEIGHT / 0.7),
		MINX: (this.SVGWIDTH - this.CONTAINERWIDTH) / 2,
		MINY: (this.SVGHEIGHT - this.CONTAINERHEIGHT) / 2,
		MAXX: ((this.SVGWIDTH - this.CONTAINERWIDTH) / 2) + this.CONTAINERWIDTH,
		MAXY: ((this.SVGHEIGHT - this.CONTAINERHEIGHT) / 2) + this.CONTAINERHEIGHT,
		FRAMERATIO: 210,
		SPACING: { 'logoLetterSpacing': 1, 'sloganLetterSpacing': 0, 'logoSizeSlider': 100, 'iconVsTextSlider': 0, 'iconDistanceSlider': 50, 'frameSizeSlider': 50, 'sloganTextSize': 24, 'logoTextSlider': 72, 'textSloganDistSlider': 40, 'iconFrameSizeSlider': 50 }
	}
	// 
	
	// start common logo make function 
	var logoMakerFunction = {
		objSet: [],
		
		/* Favorite listing record */
		// code by Tushar	
		resetFavoriteJson: function () {
			favoriteJSON.companyFont = [];
			favoriteJSON.sloganFont = [];
			favoriteJSON.colorPallete = [];
			favoriteJSON.colorVariation = [];
			favoriteJSON.symbolVariation = [];
			favoriteJSON.containerVariation = [];
			favoriteJSON.layoutVariation = [];
			favoriteJSON.logoVariation = [];
			lEditor.setSession('favoriteJSON', JSON.stringify(favoriteJSON));
		},
		
		addToFavoriteJson: function (type, subtype, val, lid) {
			var isExist = 0;
			if (typeof favoriteJSON[type][subtype] !== 'undefined') {
				for (var i = 0; i < favoriteJSON[type][subtype].length; i++) {
					if (favoriteJSON[type][subtype][i].val == val) {
						isExist = 1;
					}
				}
			}
			if (isExist == 0) {
				favoriteJSON[type][subtype].push({ lid: lid, val: val });
			}
			lEditor.setSession('favoriteJSON', JSON.stringify(favoriteJSON));
		},
		
		removeToFavoriteJson: function (type, subtype, val) {
			for (var i = 0; i < favoriteJSON[type][subtype].length; i++) {
				if (favoriteJSON[type][subtype][i].val === val) {
					favoriteJSON[type][subtype].splice(i, 1);
				}
			}
			lEditor.setSession('favoriteJSON', JSON.stringify(favoriteJSON));
		},
		
		isExistInFavoriteJson: function (type, subtype, val) {
			if (typeof favoriteJSON[type][subtype] !== 'undefined') {
				for (var i = 0; i < favoriteJSON[type][subtype].length; i++) {
					if (favoriteJSON[type][subtype][i].val === val) {
						return favoriteJSON[type][subtype][i].lid;
					}
				}
			}
			return false;
		},
		
		updateLogoIdJson: function (type, subtype, val, logoId) {
			if (logoId > 0) {
				for (var i = 0; i < favoriteJSON[type][subtype].length; i++) {
					if (favoriteJSON[type][subtype][i].val === val) {
						favoriteJSON[type][subtype][i].lid = logoId;
						lEditor.setSession('favoriteJSON', JSON.stringify(favoriteJSON));
					}
				}
			}
		},
		
		removeLogoIdJson: function (logoId) {
			var type = '';
			var subtype = '';
			for (var i = 0; i < Object.keys(favoriteJSON).length; i++) {
				type = Object.keys(favoriteJSON)[i];
				for (var j = 0; j < Object.keys(favoriteJSON[Object.keys(favoriteJSON)[i]]).length; j++) {
					subtype = Object.keys(favoriteJSON[Object.keys(favoriteJSON)[i]])[j];
					for (var k = 0; k < favoriteJSON[type][subtype].length; k++) {
						if (favoriteJSON[type][subtype][k].lid == logoId) {
							favoriteJSON[type][subtype].splice(k, 1);
							lEditor.setSession('favoriteJSON', JSON.stringify(favoriteJSON));
							$("[data-logo-id=" + logoId + "]").removeClass('active');
						}
					}
				}
			}
		},
		/* Favorite listing record End */
		
		// for getting Ranodm number (any) 
		genRandomId: function getRandomNumbers() {
			var array = new Uint32Array(1);
			var cryptoObj = window.crypto || window.msCrypto;
			cryptoObj.getRandomValues(array);
			return array[0];
		},
		
		
		// getting initial character of  logoname
		genMonoGramText: function (logoName) {
			var monogram = "";
			var res = logoName.split(" ");
			var i = 0;
			$.each(res, function (k, v) {
				if (v != "") {
					if (i < 4) {
						monogram += v.charAt(0).toUpperCase();
					}
					i++;
				}
			});
			return monogram;
		},
		
		
		// reset all sliders or by thpe
		resetSlider: function (type) {
			if (type == "logoLetterSpacing" || type == "all") {
				//	constantVars.SPACING.logoLetterSpacing = 1;
				constantVars.SPACING.logoLetterSpacing = lEditor.currentLogo.generate.logoLetterSpacing;
				//	lEditor.setSession('logoLetterSpacing',1);
				$(".logoLetterSpacing").slider("option", "value", constantVars.SPACING.logoLetterSpacing);
				$(".logoLetterSpacing").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.logoLetterSpacing);
			}
			if (type == "sloganLetterSpacing" || type == "all") {
				constantVars.SPACING.sloganLetterSpacing = lEditor.currentLogo.generate.sloganLetterSpacing;
				//	lEditor.setSession('sloganLetterSpacing',0);
				$(".sloganLetterSpacing").slider("option", "value", constantVars.SPACING.sloganLetterSpacing);
				$(".sloganLetterSpacing").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.sloganLetterSpacing);
			}
			if (type == "logoSizeSlider" || type == "all") {
				//	constantVars.SPACING.logoSizeSlider = 100;
				constantVars.SPACING.logoSizeSlider = lEditor.currentLogo.generate.logoSizeSlider;
				lEditor.setSession('logoSizeSlider', constantVars.SPACING.logoSizeSlider);
				$(".logoSizeSlider").slider("option", "value", constantVars.SPACING.logoSizeSlider);
				$(".logoSizeSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.logoSizeSlider);
			}
			if (type == "iconVsTextSlider" || type == "all") {
				constantVars.SPACING.iconVsTextSlider = 0;
				lEditor.setSession('iconVsTextSlider', 0);
				$(".iconVsTextSlider").slider("option", "value", constantVars.SPACING.iconVsTextSlider);
				$(".iconVsTextSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.iconVsTextSlider);
			}
			if (type == "iconDistanceSlider" || type == "all") {
				constantVars.SPACING.iconDistanceSlider = 50;
				lEditor.setSession('iconDistanceSlider', 50);
				$(".iconDistanceSlider").slider("option", "value", constantVars.SPACING.iconDistanceSlider);
				$(".iconDistanceSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.iconDistanceSlider);
			}
			if (type == "frameSizeSlider" || type == "all") {
				constantVars.SPACING.frameSizeSlider = 50;
				lEditor.setSession('frameSizeSlider', 50);
				$(".frameSizeSlider").slider("option", "value", constantVars.SPACING.frameSizeSlider);
				$(".frameSizeSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.frameSizeSlider);
			}
			if (type == "iconFrameSizeSlider" || type == "all") {
				constantVars.SPACING.iconFrameSizeSlider = 50;
				lEditor.setSession('iconFrameSizeSlider', 50);
				$(".iconFrameSizeSlider").slider("option", "value", constantVars.SPACING.iconFrameSizeSlider);
				$(".iconFrameSizeSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.iconFrameSizeSlider);
			}
			if (type == "sloganTextSize" || type == "all") {
				constantVars.SPACING.sloganTextSize = lEditor.currentLogo.generate.sloganTextSize;
				lEditor.setSession('sloganTextSize', lEditor.currentLogo.generate.sloganTextSize);
				$(".sloganTextSize").slider("option", "value", constantVars.SPACING.sloganTextSize);
				$(".sloganTextSize").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.sloganTextSize);
			}
			if (type == "logoTextSlider" || type == "all") {
				//	constantVars.SPACING.logoTextSlider = 72;
				constantVars.SPACING.sloganLetterSpacing = lEditor.currentLogo.generate.logoTextSlider;
				lEditor.setSession('logoTextSlider', lEditor.currentLogo.generate.logoTextSlider);
				$(".logoTextSlider").slider("option", "value", constantVars.SPACING.logoTextSlider);
				$(".logoTextSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.logoTextSlider);
			}
			if (type == "textSloganDistSlider" || type == "all") {
				constantVars.SPACING.textSloganDistSlider = 40;
				lEditor.setSession('textSloganDistSlider', 40);
				$(".textSloganDistSlider").slider("option", "value", constantVars.SPACING.textSloganDistSlider);
				$(".textSloganDistSlider").parents('.rangeSlider').find('.rangeSliderValue').val(constantVars.SPACING.textSloganDistSlider);
			}
		},
		
		
		// check combination is avail or not in array  ( for step - 6 )
		isUniqueComination: function (obj, combination) {
			var isUnique = true;
			if (obj.length < 1) {
				return true;
			}
			$.each(obj, function (k, v) {
				if (logoMakerFunction.isEqualArray(v, combination)) {
					isUnique = false;
				}
			});
			return isUnique;
		},
		
		// for getting random value  from intervals  
		randomIntFromInterval: function (min, max) {
			max = max - 1;
			return Math.floor(Math.random() * (max - min + 1) + min);
		},
		
		// getting random array for step-6
		getRandomCombination: function (arr) {
			var random = [];
			$.each(arr, function (k, v) {
				random.push(logoMakerFunction.randomIntFromInterval(0, v));
			});
			return random;
		},
		
		// used chroma js for getting shades of any color
		getShadesOfColor: function (colorCode) {
			var colorList = [];
			var steps = 10;
			var dimColor = [];
			var darkColor = [];
			var chromaColor = chroma(colorCode);
			var i = 0;
			
			var j = 0;
			dimColor[i++] = chromaColor.brighten(j);
			for (; i < steps;) {
				j = j + 0.5;
				dimColor[i++] = chromaColor.brighten(j);
				if (i == 10) continue;
				dimColor[i++] = chromaColor.darken(j);
				
			}
			colorList = darkColor.concat(dimColor);
			return colorList;
		},
		
		
		// getting final logo Template which one save
		getFinalLogoTemplate: function (logoObj) {
			/*	if(typeof logoObj.idKey === "undefined"){
				logoObj.idKey = "";
			} 
			idKey = logoObj.idKey; */
			if (typeof logoObj.templatePath.iconFrameBox === 'undefined') {
				logoObj.templatePath.iconFrameBox = {};
				logoObj.templatePath.iconFrameBox.x = 0;
				logoObj.templatePath.iconFrameBox.y = 0;
				logoObj.templatePath.iconFrameBoxScale = 1;
				
				logoObj.templatePath.updates.iconFrameBox = {};
				logoObj.templatePath.updates.iconFrameBox.x = 0;
				logoObj.templatePath.updates.iconFrameBox.y = 0;
				logoObj.templatePath.updates.iconFrameBox.scale = 1;
			}
			var idKey = logoMakerFunction.genRandomId();
			var template = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:i="http://ns.adobe.com/AdobeIllustrator/10.0/" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" height="100%" width="100%" x="0px" y="0px" viewBox="0 0 ' + constantVars.VIEWBOXWIDTH + ' ' + constantVars.VIEWBOXHEIGHT + '" xml:space="preserve" preserveAspectRatio="xMidYMid meet" class="">{{textGradient}}{{sloganGradient}}{{iconGradient}}{{frameGradient}}{{iconFrameGradient}}';
			template += '<rect x="0px" y="0px" width="100%" height="100%" fill="{{svgColor}}"/>';
			template += '<g class="logo-container-box logoContainerBox" transform="scale({{logoContainerScale}}) translate({{logoContainerX}},{{logoContainerY}})">';
			
			if (logoObj.templatePath.isFrame == 1) {
				template += '<g class="container_1" transform="scale({{frameScale}}) translate({{frameX}},{{frameY}})"  fill="{{frameFill}}">{{frameHtml}}</g>';
			}
			template += '<g class="containerBody" transform="scale({{containerBodyScale}}) translate({{containerBodyX}},{{containerBodyY}})" >';
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				template += '<g class="sampleIconBox" transform="scale({{iconFrameBoxScale}}) translate({{iconFrameBoxX}},{{iconFrameBoxY}})">';
				if (logoObj.templatePath.isIconFrame == 1) {
					template += '<g class="iconFrame" transform="scale({{iconFrameScale}}) translate({{iconFrameX}},{{iconFrameY}})"  fill="{{iconFrameFill}}">{{iconFrameHtml}}</g>';
				}
				template += '<g class="sampleIcons_1" transform="scale({{iconScale}}) translate({{iconX}},{{iconY}})" fill="{{iconFill}}">{{iconHtml}}</g>';
				template += '</g>';
			}
			template += '<g class="sampleTexts_1" transform="scale({{textAndSloganScale}}) translate({{textAndSloganX}},{{textAndSloganY}})">';
			template += '<g class="logo--name svgLogoName_1 logoNameBox" transform="scale({{textScale}}) translate({{textX}},{{textY}})" fill="{{textFill}}">{{textHtml}}</g>';
			template += '<g id="" class="logo--name svgSloganText_1 sloganBox" transform="scale({{sloganScale}}) translate({{sloganX}},{{sloganY}})" fill="{{sloganFill}}">{{sloganHtml}}</g>';
			template += '</g>';
			template += '</g>';
			template += '</g>';
			template += '</svg>';
			
			if (logoObj.textGradient != "") {
				logoObj.mainTextColor = 'url(#textGradient' + idKey + ')';
			}
			if (logoObj.sloganGradient != "") {
				logoObj.sloganTextColor = 'url(#sloganGradient' + idKey + ')';
			}
			if (logoObj.frameGradient != "") {
				logoObj.frameColor = 'url(#frameGradient' + idKey + ')';
			}
			if (logoObj.iconFrameGradient != "") {
				logoObj.iconFrameColor = 'url(#iconFrameGradient' + idKey + ')';
			}
			if (logoObj.iconGradient != "") {
				logoObj.iconColor = 'url(#iconGradient' + idKey + ')';
			}
			if (logoObj.frameFilledGradient != "" && logoObj.templatePath.frameType == "filled") {
				logoObj.frameFilledColor = 'url(#frameGradient' + idKey + ')';
			}
			
			//apply gradients to the template
			
			template = this.applyGradientToTemplate(template, logoObj, idKey);
			
			
			template = template.replace("{{svgColor}}", logoObj.bgColor);
			template = template.replace("{{textHtml}}", logoObj.logoPath);
			template = template.replace("{{textFill}}", logoObj.mainTextColor);
			
			template = template.replace("{{sloganHtml}}", logoObj.sloganPath);
			template = template.replace("{{sloganFill}}", logoObj.sloganTextColor);
			
			template = template.replace("{{frameHtml}}", logoObj.framePath);
			
			if (logoObj.templatePath.frameType == "filled") {
				//	alert(logoObj.frameFilledColor);
				template = template.replace("{{frameFill}}", logoObj.frameFilledColor);
			} else {
				template = template.replace("{{frameFill}}", logoObj.frameColor);
			}
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				template = template.replace("{{iconHtml}}", logoObj.iconPath);
				template = template.replace("{{iconFill}}", logoObj.iconColor);
				template = template.replace("{{iconX}}", logoObj.templatePath.icon.x);
				template = template.replace("{{iconY}}", logoObj.templatePath.icon.y);
				template = template.replace("{{iconScale}}", logoObj.templatePath.icon.scale);
				
				template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				template = template.replace("{{iconFrameBoxX}}", logoObj.templatePath.iconFrameBox.x);
				template = template.replace("{{iconFrameBoxY}}", logoObj.templatePath.iconFrameBox.y);
				template = template.replace("{{iconFrameBoxScale}}", logoObj.templatePath.iconFrameBoxScale);
			}
			if (logoObj.templatePath.isIconFrame == 1) {
				template = template.replace("{{iconFrameHtml}}", logoObj.iconFramePath);
				template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				template = template.replace("{{iconFrameX}}", logoObj.templatePath.iconFrame.x);
				template = template.replace("{{iconFrameY}}", logoObj.templatePath.iconFrame.y);
				template = template.replace("{{iconFrameScale}}", logoObj.templatePath.iconFrame.scale);
			}
			
			template = template.replace("{{textX}}", logoObj.templatePath.text.x);
			template = template.replace("{{textY}}", logoObj.templatePath.text.y);
			template = template.replace("{{textScale}}", logoObj.templatePath.text.scale);
			
			template = template.replace("{{sloganX}}", logoObj.templatePath.slogan.x);
			template = template.replace("{{sloganY}}", logoObj.templatePath.slogan.y);
			template = template.replace("{{sloganScale}}", logoObj.templatePath.slogan.scale);
			
			template = template.replace("{{textAndSloganX}}", logoObj.templatePath.textAndSlogan.x);
			template = template.replace("{{textAndSloganY}}", logoObj.templatePath.textAndSlogan.y);
			template = template.replace("{{textAndSloganScale}}", logoObj.templatePath.textAndSlogan.scale);
			
			template = template.replace("{{containerBodyX}}", logoObj.templatePath.containerBody.x);
			template = template.replace("{{containerBodyY}}", logoObj.templatePath.containerBody.y);
			template = template.replace("{{containerBodyScale}}", logoObj.templatePath.containerBody.scale);
			
			template = template.replace("{{logoContainerX}}", logoObj.templatePath.logoContainer.x);
			template = template.replace("{{logoContainerY}}", logoObj.templatePath.logoContainer.y);
			template = template.replace("{{logoContainerScale}}", logoObj.templatePath.logoContainer.scale);
			
			template = template.replace("{{frameX}}", logoObj.templatePath.frame.x);
			template = template.replace("{{frameY}}", logoObj.templatePath.frame.y);
			template = template.replace("{{frameScale}}", logoObj.templatePath.frame.scale);
			return template;
			
		},
		
		getGradientStops: function (type) {
			var stops = '';
			var gradientStops = gradientsArray[type] ? gradientsArray[type].stops : [];
			
			stops = gradientStops.reduce((accm, item) => {
				return accm + '<stop offset="' + item.offset + '" stop-color="' + item.color + '" />';
			}, '');
			
			return stops;
		},
		
		applyGradientToTemplate: function (template, logoObj, idKey) {
			// Company text gradient section
			if (!logoObj.textGradient || logoObj.textGradient == '') {
				template = template.replace("{{textGradient}}", '');
			}
			else {
				var stops = this.getGradientStops(logoObj.textGradient);
				
				template = template.replace("{{textGradient}}", '<defs><linearGradient id="textGradient' + idKey + '">' + stops + '</linearGradient></defs>');
			}
			//Slogan text gradient section
			if (!logoObj.sloganGradient || logoObj.sloganGradient == '') {
				template = template.replace("{{sloganGradient}}", '');
			}
			else {
				var stops = this.getGradientStops(logoObj.sloganGradient);
				
				template = template.replace("{{sloganGradient}}", '<defs><linearGradient id="sloganGradient' + idKey + '">' + stops + '</linearGradient></defs>');
			}
			// Frame gradient section
			if (logoObj.templatePath.frameType == "filled") {
				if (!logoObj.frameFilledGradient || logoObj.frameFilledGradient == '') {
					template = template.replace("{{frameGradient}}", '');
				}
				else {
					var stops = this.getGradientStops(logoObj.frameFilledGradient);
					
					template = template.replace("{{frameGradient}}", '<defs><linearGradient id="frameGradient' + idKey + '">' + stops + '</linearGradient></defs>');
				}
			}
			else {
				if (!logoObj.frameGradient || logoObj.frameGradient == '') {
					template = template.replace("{{frameGradient}}", '');
				}
				else {
					var stops = this.getGradientStops(logoObj.frameGradient);
					
					template = template.replace("{{frameGradient}}", '<defs><linearGradient id="frameGradient' + idKey + '">' + stops + '</linearGradient></defs>');
				}
			}
			
			if (!logoObj.iconFrameGradient || logoObj.iconFrameGradient == '') {
				template = template.replace("{{iconFrameGradient}}", '');
			}
			else {
				var stops = this.getGradientStops(logoObj.iconFrameGradient);
				
				template = template.replace("{{iconFrameGradient}}", '<defs><linearGradient id="iconFrameGradient' + idKey + '">' + stops + '</linearGradient></defs>');
			}
			
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				if (!logoObj.iconGradient || logoObj.iconGradient == '') {
					template = template.replace("{{iconGradient}}", '');
				}
				else {
					var stops = this.getGradientStops(logoObj.iconGradient);
					
					template = template.replace("{{iconGradient}}", '<defs><linearGradient id="iconGradient' + idKey + '">' + stops + '</linearGradient></defs>');
				}
			}
			
			return template;
		},
		
		// updated svg by single type as frame, company name, iconframe , slogan name 
		generateLogoTemplateByOption: function (currLogo, $for, idKey) {
			
			if ($for != 'frame') {
				currLogo = updateCurrLogoObject(currLogo);
			} else {
				if (typeof currLogo.generate.templatePath.updates.frame === "undefined") {
					currLogo.generate.templatePath.updates.frame = {};
				}
			}
			logoObj = currLogo.generate;
			if (typeof logoObj.templatePath.iconFrameBox === 'undefined') {
				logoObj.templatePath.iconFrameBox = {};
				logoObj.templatePath.iconFrameBox.x = 0;
				logoObj.templatePath.iconFrameBox.y = 0;
				logoObj.templatePath.iconFrameBoxScale = 1;
				
				logoObj.templatePath.updates.iconFrameBox = {};
				logoObj.templatePath.updates.iconFrameBox.x = 0;
				logoObj.templatePath.updates.iconFrameBox.y = 0;
				logoObj.templatePath.updates.iconFrameBox.scale = 1;
			}
			var obj = {};
			var template = '<svg version="1.1" xmlns:i="http://ns.adobe.com/AdobeIllustrator/10.0/" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" height="100%" width="100%" x="0px" y="0px" viewBox="0 0 ' + constantVars.VIEWBOXWIDTH + ' ' + constantVars.VIEWBOXHEIGHT + '" xml:space="preserve" preserveAspectRatio="xMidYMid meet" class="">{{textGradient}}{{sloganGradient}}{{iconGradient}}{{frameGradient}}{{iconFrameGradient}}';
			template += '<rect x="0px" y="0px" width="100%" height="100%" fill="{{svgColor}}"/>';
			template += '<g class="logo-container-box logoContainerBox" transform="scale({{logoContainerScale}}) translate({{logoContainerX}},{{logoContainerY}})">';
			if (logoObj.templatePath.isFrame == 1) {
				template += '<g class="container_1" transform="scale({{frameScale}}) translate({{frameX}},{{frameY}})"  fill="{{frameFill}}">{{frameHtml}}</g>';
			}
			template += '<g class="containerBody" transform="scale({{containerBodyScale}}) translate({{containerBodyX}},{{containerBodyY}})" >';
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				template += '<g class="sampleIconBox" transform="scale({{iconFrameBoxScale}}) translate({{iconFrameBoxX}},{{iconFrameBoxY}})">';
				if (logoObj.templatePath.isIconFrame == 1) {
					template += '<g class="iconFrame" transform="scale({{iconFrameScale}}) translate({{iconFrameX}},{{iconFrameY}})"  fill="{{iconFrameFill}}">{{iconFrameHtml}}</g>';
				}
				template += '<g class="sampleIcons_1" transform="scale({{iconScale}}) translate({{iconX}},{{iconY}})" fill="{{iconFill}}">{{iconHtml}}</g>';
				template += '</g>';
			}
			template += '<g class="sampleTexts_1" transform="scale({{textAndSloganScale}}) translate({{textAndSloganX}},{{textAndSloganY}})">';
			template += '<g class="logo--name svgLogoName_1 logoNameBox" transform="scale({{textScale}}) translate({{textX}},{{textY}})" fill="{{textFill}}">{{textHtml}}</g>';
			template += '<g id="" class="logo--name svgSloganText_1 sloganBox" transform="scale({{sloganScale}}) translate({{sloganX}},{{sloganY}})" fill="{{sloganFill}}">{{sloganHtml}}</g>';
			template += '</g>';
			template += '</g>';
			template += '</g>';
			template += '</svg>';
			
			if (logoObj.textGradient != "") {
				logoObj.mainTextColor = 'url(#textGradient' + idKey + ')';
			}
			if (logoObj.sloganGradient != "") {
				logoObj.sloganTextColor = 'url(#sloganGradient' + idKey + ')';
			}
			if (logoObj.frameGradient != "") {
				logoObj.frameColor = 'url(#frameGradient' + idKey + ')';
			}
			if (logoObj.iconGradient != "") {
				logoObj.iconColor = 'url(#iconGradient' + idKey + ')';
			}
			if (logoObj.iconFrameGradient != "") {
				logoObj.iconFrameColor = 'url(#iconFrameGradient' + idKey + ')';
			}
			if (logoObj.frameFilledGradient != "" && logoObj.templatePath.frameType == "filled") {
				logoObj.frameFilledColor = 'url(#frameGradient' + idKey + ')';
			}
			
			//apply gradient to template
			template = this.applyGradientToTemplate(template, logoObj, idKey);
			
			template = template.replace("{{svgColor}}", logoObj.bgColor);
			template = template.replace("{{textHtml}}", logoObj.logoPath);
			template = template.replace("{{textFill}}", logoObj.mainTextColor);
			
			template = template.replace("{{sloganHtml}}", logoObj.sloganPath);
			template = template.replace("{{sloganFill}}", logoObj.sloganTextColor);
			
			template = template.replace("{{frameHtml}}", logoObj.framePath);
			if (logoObj.templatePath.frameType == "filled") {
				//	alert(logoObj.frameFilledColor);
				template = template.replace("{{frameFill}}", logoObj.frameFilledColor);
			} else {
				template = template.replace("{{frameFill}}", logoObj.frameColor);
			}
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				template = template.replace("{{iconHtml}}", logoObj.iconPath);
				template = template.replace("{{iconFill}}", logoObj.iconColor);
				template = template.replace("{{iconX}}", logoObj.templatePath.icon.x);
				template = template.replace("{{iconY}}", logoObj.templatePath.icon.y);
				template = template.replace("{{iconScale}}", logoObj.templatePath.icon.scale);
				template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				template = template.replace("{{iconFrameBoxX}}", logoObj.templatePath.iconFrameBox.x);
				template = template.replace("{{iconFrameBoxY}}", logoObj.templatePath.iconFrameBox.y);
				template = template.replace("{{iconFrameBoxScale}}", logoObj.templatePath.iconFrameBoxScale);
			}
			if (logoObj.templatePath.isIconFrame == 1) {
				template = template.replace("{{iconFrameHtml}}", logoObj.iconFramePath);
				template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				template = template.replace("{{iconFrameX}}", logoObj.templatePath.iconFrame.x);
				template = template.replace("{{iconFrameY}}", logoObj.templatePath.iconFrame.y);
				template = template.replace("{{iconFrameScale}}", logoObj.templatePath.iconFrame.scale);
			}
			template = template.replace("{{textX}}", logoObj.templatePath.text.x);
			template = template.replace("{{textY}}", logoObj.templatePath.text.y);
			template = template.replace("{{textScale}}", logoObj.templatePath.text.scale);
			
			template = template.replace("{{sloganX}}", logoObj.templatePath.slogan.x);
			template = template.replace("{{sloganY}}", logoObj.templatePath.slogan.y);
			template = template.replace("{{sloganScale}}", logoObj.templatePath.slogan.scale);
			
			template = template.replace("{{textAndSloganX}}", logoObj.templatePath.textAndSlogan.x);
			template = template.replace("{{textAndSloganY}}", logoObj.templatePath.textAndSlogan.y);
			template = template.replace("{{textAndSloganScale}}", logoObj.templatePath.textAndSlogan.scale);
			
			template = template.replace("{{containerBodyX}}", logoObj.templatePath.containerBody.x);
			template = template.replace("{{containerBodyY}}", logoObj.templatePath.containerBody.y);
			template = template.replace("{{containerBodyScale}}", logoObj.templatePath.containerBody.scale);
			
			template = template.replace("{{logoContainerX}}", logoObj.templatePath.logoContainer.x);
			template = template.replace("{{logoContainerY}}", logoObj.templatePath.logoContainer.y);
			template = template.replace("{{logoContainerScale}}", logoObj.templatePath.logoContainer.scale);
			
			template = template.replace("{{frameX}}", logoObj.templatePath.frame.x);
			template = template.replace("{{frameY}}", logoObj.templatePath.frame.y);
			template = template.replace("{{frameScale}}", logoObj.templatePath.frame.scale);
			
			//   alert($for +"----"+ logoObj.templatePath.slogan.y);
			
			$("#templateGenerator").html(template);
			
			if ($for == 'frame') {
				if (logoObj.templatePath.isFrame == 1) {
					obj = updateGroupSize($('#templateGenerator  .container_1'), logoObj.templatePath, 'frame', 0);
					logoObj.templatePath.updates.frame.x = obj.x;
					logoObj.templatePath.updates.frame.y = obj.y;
					logoObj.templatePath.updates.frame.scale = obj.scale;
					
					obj = updateGroupSize($('#templateGenerator  .containerBody'), logoObj.templatePath, 'containerBody', 0);
					logoObj.templatePath.updates.containerBody.x = obj.x;
					logoObj.templatePath.updates.containerBody.y = obj.y;
					logoObj.templatePath.updates.containerBody.scale = obj.scale;
					
					obj = updateGroupSize($('#templateGenerator  .logoContainerBox'), logoObj.templatePath, 'logoContainer', 0);
					logoObj.templatePath.updates.logoContainer.x = obj.x;
					logoObj.templatePath.updates.logoContainer.y = obj.y;
					logoObj.templatePath.updates.logoContainer.scale = obj.scale;
				}
			}
			
			if ($for == 'logoName') {
				obj = updateGroupSize($('#templateGenerator  .svgLogoName_1'), logoObj.templatePath, 'text', 0);
				logoObj.templatePath.updates.text.x = obj.x;
				logoObj.templatePath.updates.text.y = obj.y;
				logoObj.templatePath.updates.text.scale = obj.scale;
				
			}
			
			if ($for == 'sloganName') {
				obj = updateGroupSize($('#templateGenerator  .svgSloganText_1'), logoObj.templatePath, 'slogan', 0);
				//	alert();
				logoObj.templatePath.updates.slogan.x = obj.x;
				logoObj.templatePath.updates.slogan.y = obj.y;
				logoObj.templatePath.updates.slogan.scale = obj.scale;
				
			}
			
			if ((logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) && $for == "icon") {
				obj = updateGroupSize($('#templateGenerator  .sampleIcons_1'), logoObj.templatePath, 'icon', 0);
				logoObj.templatePath.updates.icon.x = obj.x;
				logoObj.templatePath.updates.icon.y = obj.y;
				logoObj.templatePath.updates.icon.scale = obj.scale;
				obj = updateGroupSize($('#templateGenerator  .sampleIconBox'), logoObj.templatePath, 'iconFrameBox', 0);
				logoObj.templatePath.updates.iconFrameBox.x = obj.x;
				logoObj.templatePath.updates.iconFrameBox.y = obj.y;
				logoObj.templatePath.updates.iconFrameBox.scale = obj.scale;
				obj = updateGroupSize($('#templateGenerator  .containerBody'), logoObj.templatePath, 'containerBody', 0);
				logoObj.templatePath.updates.containerBody.x = obj.x;
				logoObj.templatePath.updates.containerBody.y = obj.y;
				logoObj.templatePath.updates.containerBody.scale = obj.scale;
			}
			
			if ($for == "containerBody") {
				obj = updateGroupSize($('#templateGenerator  .containerBody'), logoObj.templatePath, 'containerBody', 0);
				logoObj.templatePath.updates.containerBody.x = obj.x;
				logoObj.templatePath.updates.containerBody.y = obj.y;
				logoObj.templatePath.updates.containerBody.scale = obj.scale;
				
			}
			
			
			if (logoObj.templatePath.tempType == 'left' || logoObj.templatePath.tempType == 'right' || $.trim(logoObj.iconPath) == "") {
				if (logoObj.templatePath.isFrame == 1 && $for == "frame") {
					obj = updateGroupSize($('#templateGenerator  .container_1'), logoObj.templatePath, 'frame', 0);
					logoObj.templatePath.updates.frame.x = obj.x;
					logoObj.templatePath.updates.frame.y = obj.y;
					logoObj.templatePath.updates.frame.scale = obj.scale;
					
					obj = updateGroupSize($('#templateGenerator  .logoContainerBox'), logoObj.templatePath, 'logoContainer', 0);
					logoObj.templatePath.updates.logoContainer.x = obj.x;
					logoObj.templatePath.updates.logoContainer.y = obj.y;
					logoObj.templatePath.updates.logoContainer.scale = obj.scale;
				}
				if ($for == 'logoName' || $for == 'sloganName') {
					
					obj = updateGroupSize($('#templateGenerator  .sampleTexts_1'), logoObj.templatePath, 'textAndSlogan', 0);
					logoObj.templatePath.updates.textAndSlogan.x = obj.x;
					logoObj.templatePath.updates.textAndSlogan.y = obj.y;
					logoObj.templatePath.updates.textAndSlogan.scale = obj.scale;
					
				}
				
			}
			template = $("#templateGenerator").html();
			$("#templateGenerator").html('');
			return { 'logoObj': logoObj, 'html': template };
		},
		
		
		// generate new logo templage in single manner ... 	
		generateLogoTemplate: function (logoObj, idKey) {
			if (typeof idKey === "undefined") {
				idKey = "";
			}
			
			if (typeof logoObj.templatePath.iconFrameBox === 'undefined') {
				logoObj.templatePath.iconFrameBox = {};
				logoObj.templatePath.iconFrameBox.x = 0;
				logoObj.templatePath.iconFrameBox.y = 0;
				logoObj.templatePath.iconFrameBoxScale = 1;
				/*	template = template.replace("{{iconFrameFill}}",logoObj.iconFrameColor); 
				template = template.replace("{{iconFrameBoxX}}",logoObj.templatePath.iconFrameBox.x);
				template = template.replace("{{iconFrameBoxY}}",logoObj.templatePath.iconFrameBox.y);
				template = template.replace("{{iconFrameBoxScale}}",logoObj.templatePath.iconFrameBoxScale); */
				logoObj.templatePath.updates.iconFrameBox = {};
				logoObj.templatePath.updates.iconFrameBox.x = 0;
				logoObj.templatePath.updates.iconFrameBox.y = 0;
				logoObj.templatePath.updates.iconFrameBox.scale = 1;
			}
			var result = {};
			var obj = {};
			var template = '<svg version="1.1" xmlns:i="http://ns.adobe.com/AdobeIllustrator/10.0/" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" height="100%" width="100%" x="0px" y="0px" viewBox="0 0 ' + constantVars.VIEWBOXWIDTH + ' ' + constantVars.VIEWBOXHEIGHT + '" xml:space="preserve" preserveAspectRatio="xMidYMid meet" class="">{{textGradient}}{{sloganGradient}}{{iconGradient}}{{frameGradient}}{{iconFrameGradient}}';
			template += '<rect x="0px" y="0px" width="100%" height="100%" fill="{{svgColor}}"/>';
			template += '<g class="logo-container-box logoContainerBox" height="300" width="300">';
			if (logoObj.templatePath.isFrame == 1) {
				template += '<g class="container_1" transform="scale(1)" fill="{{frameFill}}">{{frameHtml}}</g>';
			}
			template += '<g class="containerBody">';
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				template += '<g class="sampleIconBox" transform="scale({{iconFrameBoxScale}}) translate({{iconFrameBoxX}},{{iconFrameBoxY}})">';
				if (logoObj.templatePath.isIconFrame == 1) {
					template += '<g class="iconFrame" transform="scale({{iconFrameScale}}) translate({{iconFrameX}},{{iconFrameY}})"  fill="{{iconFrameFill}}">{{iconFrameHtml}}</g>';
				}
				template += '<g class="sampleIcons_1" transform="scale({{iconScale}}) translate({{iconX}},{{iconY}})" fill="{{iconFill}}">{{iconHtml}}</g>';
				template += '</g>';
			}
			template += '<g class="sampleTexts_1">';
			template += '<g class="logo--name svgLogoName_1 logoNameBox" transform="scale(1)" fill="{{textFill}}">{{textHtml}}</g>';
			template += '<g id="" class="logo--name svgSloganText_1 sloganBox" transform="scale(1)" fill="{{sloganFill}}">{{sloganHtml}}</g>';
			template += '</g>';
			template += '</g>';
			template += '</g>';
			template += '</svg>';
			//	alert(logoObj.iconColor);
			
			if (logoObj.textGradient != "") {
				logoObj.mainTextColor = 'url(#textGradient' + idKey + ')';
			}
			if (logoObj.sloganGradient != "") {
				logoObj.sloganTextColor = 'url(#sloganGradient' + idKey + ')';
			}
			if (logoObj.frameGradient != "" && logoObj.templatePath.frameType == "outline") {
				logoObj.frameColor = 'url(#frameGradient' + idKey + ')';
			}
			if (logoObj.frameFilledGradient != "" && logoObj.templatePath.frameType == "filled") {
				logoObj.frameFilledColor = 'url(#frameGradient' + idKey + ')';
			}
			if (logoObj.iconFrameGradient != "") {
				logoObj.iconFrameColor = 'url(#iconFrameGradient' + idKey + ')';
			}
			if (logoObj.iconGradient != "") {
				logoObj.iconColor = 'url(#iconGradient' + idKey + ')';
			}
			
			template = this.applyGradientToTemplate(template, logoObj, idKey);
			
			template = template.replace("{{svgColor}}", logoObj.bgColor);
			template = template.replace("{{textHtml}}", logoObj.logoPath);
			// template = template.replace("{{textScale}}", logoObj.templatePath.textScale);
			// template = template.replace("{{textX}}", logoObj.templatePath.textX);
			// template = template.replace("{{textY}}", logoObj.templatePath.textY);
			template = template.replace("{{textScale}}", logoObj.templatePath.textScale);
			template = template.replace("{{textX}}", logoObj.templatePath.textX);
			template = template.replace("{{textY}}", logoObj.templatePath.textY);
			template = template.replace("{{textFill}}", logoObj.mainTextColor);
			
			template = template.replace("{{sloganHtml}}", logoObj.sloganPath);
			template = template.replace("{{sloganScale}}", logoObj.templatePath.sloganScale);
			template = template.replace("{{sloganX}}", logoObj.templatePath.sloganX);
			template = template.replace("{{sloganY}}", logoObj.templatePath.sloganY);
			// template = template.replace("{{sloganScale}}", logoObj.templatePath.sloganScale);
			// template = template.replace("{{sloganX}}", logoObj.templatePath.sloganX);
			// template = template.replace("{{sloganY}}", logoObj.templatePath.sloganY);
			template = template.replace("{{sloganFill}}", logoObj.sloganTextColor);
			
			template = template.replace("{{frameHtml}}", logoObj.framePath);
			template = template.replace("{{frameScale}}", logoObj.templatePath.frameScale);
			template = template.replace("{{frameX}}", logoObj.templatePath.frameX);
			template = template.replace("{{frameY}}", logoObj.templatePath.frameY);
			// template = template.replace("{{frameScale}}", logoObj.templatePath.frameScale);
			// template = template.replace("{{frameX}}", logoObj.templatePath.frameX);
			// template = template.replace("{{frameY}}", logoObj.templatePath.frameY);
			if (logoObj.templatePath.frameType == "filled") {
				//	alert(logoObj.frameFilledColor);
				template = template.replace("{{frameFill}}", logoObj.frameFilledColor);
			} else {
				template = template.replace("{{frameFill}}", logoObj.frameColor);
			}
			
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				template = template.replace("{{iconHtml}}", logoObj.iconPath);
				template = template.replace("{{iconScale}}", logoObj.templatePath.iconScale ? logoObj.templatePath.iconScale : 1);
				// template = template.replace("{{iconX}}", logoObj.templatePath.iconX);
				// template = template.replace("{{iconY}}", logoObj.templatePath.iconY);
				// template = template.replace("{{iconScale}}", logoObj.templatePath.iconScale);
				template = template.replace("{{iconX}}", logoObj.templatePath.iconX ? logoObj.templatePath.iconX : 0);
				template = template.replace("{{iconY}}", logoObj.templatePath.iconY ? logoObj.templatePath.iconY : 0);
				template = template.replace("{{iconFill}}", logoObj.iconColor);
				
				template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				template = template.replace("{{iconFrameBoxX}}", logoObj.templatePath.iconFrameBox.x);
				template = template.replace("{{iconFrameBoxY}}", logoObj.templatePath.iconFrameBox.y);
				template = template.replace("{{iconFrameBoxScale}}", logoObj.templatePath.iconFrameBoxScale);
			}
			if (logoObj.templatePath.isIconFrame == 1) {
				template = template.replace("{{iconFrameHtml}}", logoObj.iconFramePath);
				template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				template = template.replace("{{iconFrameY}}", logoObj.templatePath.iconFrame.x);
				template = template.replace("{{iconFrameX}}", logoObj.templatePath.iconFrame.y);
				template = template.replace("{{iconFrameScale}}", logoObj.templatePath.iconFrame.scale ? logoObj.templatePath.iconFrame.scale : 1);
				// template = template.replace("{{iconFrameFill}}", logoObj.iconFrameColor);
				// template = template.replace("{{iconFrameX}}", logoObj.templatePath.iconFrame.x);
				// template = template.replace("{{iconFrameY}}", logoObj.templatePath.iconFrame.y);
				// template = template.replace("{{iconFrameScale}}", logoObj.templatePath.iconFrame.scale);
			}
			
			$("#templateGenerator").html(template);
			
			
			if (logoObj.templatePath.isIconFrame == 1) {
				obj = updateGroupSize($('#templateGenerator  .iconFrame'), logoObj.templatePath, 'iconFrame', 0);
				logoObj.templatePath.updates.iconFrame.x = obj.x;
				logoObj.templatePath.updates.iconFrame.y = obj.y;
				logoObj.templatePath.updates.iconFrame.scale = obj.scale;
				
			}
			
			
			if (logoObj.templatePath.isIcon == 1 || logoObj.templatePath.isMono == 1) {
				obj = updateGroupSize($('#templateGenerator  .sampleIcons_1'), logoObj.templatePath, 'icon', 0);
				logoObj.templatePath.updates.icon.x = obj.x;
				logoObj.templatePath.updates.icon.y = obj.y;
				logoObj.templatePath.updates.icon.scale = obj.scale;
				
				obj = updateGroupSize($('#templateGenerator  .sampleIconBox'), logoObj.templatePath, 'iconFrameBox', 0);
				logoObj.templatePath.updates.iconFrameBox.x = obj.x;
				logoObj.templatePath.updates.iconFrameBox.y = obj.y;
				logoObj.templatePath.updates.iconFrameBox.scale = obj.scale;
				
			}
			
			
			
			
			
			obj = updateGroupSize($('#templateGenerator  .svgLogoName_1'), logoObj.templatePath, 'text', 0);
			logoObj.templatePath.updates.text.x = obj.x;
			logoObj.templatePath.updates.text.y = obj.y;
			logoObj.templatePath.updates.text.scale = obj.scale;
			
			
			
			obj = updateGroupSize($('#templateGenerator  .svgSloganText_1'), logoObj.templatePath, 'slogan', 0);
			logoObj.templatePath.updates.slogan.x = obj.x;
			logoObj.templatePath.updates.slogan.y = obj.y;
			logoObj.templatePath.updates.slogan.scale = obj.scale;
			var sloganPath = logoObj.sloganPath;
			
			var sloganObj;
			if (typeof logoObj.sloganFontObject !== 'undefined' && typeof logoObj.sloganFontObject !== 'string') {
				sloganObj = logoObj.sloganFontObject;
			} else {
				sloganObj = currSloganFontObject;
			}
			var slogan = sloganObj.getPath(lEditor.getSession('sloganText'), 0, 0, 24);
			logoObj.sloganLetterSpacing = 0;
			logoObj.logoLetterSpacing = 1;
			logoObj.logoTextSlider = 72;
			logoObj.sloganTextSize = 24;
			logoObj.logoSizeSlider = 100;
			logoObj.sloganPath = slogan.toSVG();
			$('#templateGenerator  .svgSloganText_1').html(logoObj.sloganPath);
			// manage spacing
			if (logoObj.templatePath.isEqual == 1 && lEditor.getSession('sloganText') != "" && lEditor.getSession('sloganText').length > 5) {
				var textWidth = parseInt($('#templateGenerator  .svgLogoName_1').get(0).getBBox().width / logoObj.templatePath.updates.text.scale);
				var sloganWidth = parseInt($('#templateGenerator  .svgSloganText_1').get(0).getBBox().width / logoObj.templatePath.updates.slogan.scale);
				
				if (textWidth > sloganWidth) {
					var i = 0.1;
					var iteration = 0;
					while (textWidth > sloganWidth) {
						iteration++;
						slogan = sloganObj.getPath(lEditor.getSession('sloganText'), 0, 0, 24, { 'letterSpacing': i });
						logoObj.sloganPath = slogan.toSVG();
						$('#templateGenerator  .svgSloganText_1').html(logoObj.sloganPath);
						sloganWidth = parseInt($('#templateGenerator  .svgSloganText_1').get(0).getBBox().width / logoObj.templatePath.updates.slogan.scale);
						logoObj.sloganLetterSpacing = Math.round(i);
						i = i + 0.1;
					}
				} else if (textWidth < sloganWidth) {
					var i = -0.1;
					var iteration = 0;
					while (textWidth < sloganWidth && iteration < 25) {
						iteration++;
						slogan = sloganObj.getPath(lEditor.getSession('sloganText'), 0, 0, 24, { 'letterSpacing': i });
						logoObj.sloganPath = slogan.toSVG();
						$('#templateGenerator  .svgSloganText_1').html(logoObj.sloganPath);
						sloganWidth = parseInt($('#templateGenerator  .svgSloganText_1').get(0).getBBox().width / logoObj.templatePath.updates.slogan.scale);
						i = i - (0.1);
					}
				}
				if (iteration >= 25 && i < 0) {
					logoObj.sloganPath = sloganPath;
					logoObj.sloganLetterSpacing = 0;
					$('#templateGenerator  .svgSloganText_1').html(logoObj.sloganPath);
				}
			}
			
			
			obj = updateGroupSize($('#templateGenerator  .svgLogoName_1'), logoObj.templatePath, 'text', 0);
			logoObj.templatePath.updates.text.x = obj.x;
			logoObj.templatePath.updates.text.y = obj.y;
			logoObj.templatePath.updates.text.scale = obj.scale;
			
			obj = updateGroupSize($('#templateGenerator  .svgSloganText_1'), logoObj.templatePath, 'slogan', 0);
			logoObj.templatePath.updates.slogan.x = obj.x;
			logoObj.templatePath.updates.slogan.y = obj.y;
			logoObj.templatePath.updates.slogan.scale = obj.scale;
			
			
			obj = updateGroupSize($('#templateGenerator  .sampleTexts_1'), logoObj.templatePath, 'textAndSlogan', 0);
			logoObj.templatePath.updates.textAndSlogan.x = obj.x;
			logoObj.templatePath.updates.textAndSlogan.y = obj.y;
			logoObj.templatePath.updates.textAndSlogan.scale = obj.scale;
			
			if (logoObj.templatePath.isFrame == 1) {
				obj = updateGroupSize($('#templateGenerator  .container_1'), logoObj.templatePath, 'frame', 0);
				logoObj.templatePath.updates.frame.x = obj.x;
				logoObj.templatePath.updates.frame.y = obj.y;
				logoObj.templatePath.updates.frame.scale = obj.scale;
				
			}
			
			obj = updateGroupSize($('#templateGenerator  .containerBody'), logoObj.templatePath, 'containerBody', 0);
			logoObj.templatePath.updates.containerBody.x = obj.x;
			logoObj.templatePath.updates.containerBody.y = obj.y;
			logoObj.templatePath.updates.containerBody.scale = obj.scale;
			
			obj = updateGroupSize($('#templateGenerator  .logoContainerBox'), logoObj.templatePath, 'logoContainer', 0);
			logoObj.templatePath.updates.logoContainer.x = obj.x;
			logoObj.templatePath.updates.logoContainer.y = obj.y;
			logoObj.templatePath.updates.logoContainer.scale = obj.scale;
			
			
			template = $("#templateGenerator").html();
			$("#templateGenerator").html('');
			return { 'logoObj': logoObj, 'html': template };
			
		},
		
		
		// compare two array 
		isEqualArray: function (fst, scnd) {
			var equal = true;
			$.each(fst, function (k, v) {
				if (v != scnd[k]) {
					equal = false;
				}
			});
			return equal;
		}
	}
	
	//New code ends here
	$('[data-toggle="tooltip"]').tooltip();
	// editors related functios
	var lEditor = (function () {
		var obj = {};
		
		currentStep = 1;
		obj.objIconSearch = 0;
		obj.owl = {};
		obj.objIconPage = 1;
		obj.nextIconSearch = true;
		obj.sampleIconArr = [];
		obj.currentLogo = {};
		obj.logoTempArr = [];
		obj.sampleIconArr = [];
		obj.randomSliderSet = [];
		obj.fontsArray = [];
		obj.sliderData = {
			frames: [],
			icons: [],
			textWithFonts: [],
			sloganWithFonts: [],
			templates: templatesData,
			
			
		};
		obj.setSession = function (key, value) {
                    try{
                        sessionStorage.setItem(key, value);
                    }
                    catch(e){
                      editor_exceptions.push(e);  
                    }
			
		}
		
		obj.getSession = function (key) {
			return sessionStorage.getItem(key);
		}
		obj.indusType = obj.getSession('industryType');
		obj.budgetShowType = obj.getSession('budgetShowType');
		
		obj.cleanSession = function (key) {
			sessionStorage.removeItem(key);
		}
		
		
		
		obj.currentFontFamily = function () {
			
		}
		
		
		/* Top header Menus of editors */
		
		obj.showNav = function (targetNav) {
			var menuStep = $(targetNav).parents('.menuSteps').data('menuid');
			var targetAttr = $(targetNav).data('option');
			switch (menuStep) {
				
				case 1: {
					$('.menu_' + menuStep + ' li').removeClass('active');
					$(targetNav).parent('li').addClass('active');
					$('.commonEditSection').addClass('hidden');
					$(targetAttr).removeClass('hidden');
					$('.previewSection').removeClass('hidden');
					if (targetAttr != '') {
						$('.menu_2').removeClass('hidden');
					} else {
						$('.menu_2').addClass('hidden');
					}
					break;
				}
				case 2: {
					var subMenuStep = $(targetNav).parents('.commonEditSection').data('submenuid');
					var parentLink = obj.getSession('parentlink');
					if (parentLink != 3) {
						$('.submenu_' + subMenuStep + ' li').removeClass('active');
						$(targetNav).parent('li').addClass('active');
					}
					
					$('.submenu_' + subMenuStep + ' .logoSettings').addClass('hidden');
					$(targetAttr).removeClass('hidden');
					break;
				}
				
			}
		}
		
		
		
		obj.editLogoSteps = function () {
			
			var isColorPalette = false;
			var getLink, parentLink, colorDataType;
			getLink = obj.getSession('targetlink');
			parentLink = obj.getSession('parentlink');
			defaultLink = obj.getSession('defaultlink');
			colorDataType = obj.getSession('colorDataType');
			obj.currentLogo = JSON.parse(obj.getSession('currentLogo'));
			obj.currentFontFamily();
			$('.textFontFamily a, .sloganFontFamily a').removeClass('active');
			
			lEditor.getSession('iconValue') == "undefined" ? '' : lEditor.setSession('iconValue', obj.currentLogo.iconValue);
			
			$('.editTags').val('');
			
			if (typeof jqXHR !== 'undefined') {
				jqXHR.abort();
				
			}
			if (typeof jqXHR1 !== 'undefined') {
				jqXHR1.abort();
			}
			
			if (getLink == 'undefined' || getLink == null) {
				getLink = 1;
			}

			if (getLink == 2 && defaultLink == null && parentLink == null) {
				$('.subMenu-7').trigger('click');
			}

			if (parentLink == 'undefined' || parentLink == null) {
				parentLink = getLink;
			}
			if (getLink == 12) {
				$('.mobileColorpicker').addClass('bgcolor');
			}
			else {
				$('.mobileColorpicker').removeClass('bgcolor');
			}
			getLink = parseInt(getLink);
			switch (getLink) {
				
				case 1: {
					$('.topParent-2').trigger('click');
					$('.previewSection').removeClass('hidden');
					$('.editFinalLogo, .editLogoSlider').addClass('hidden');
					$('.menu_2').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					$('[data-toggle="tooltip"]').tooltip();
					$('.finaLogoInner').html('');
					break;
				}
				case 2: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.getCurrentLogo();
					obj.previewColors();
					obj.previewLogo();
					disableOption();
					if (rangeSliderFlag) {
						var frameSlider = obj.getSession('frameSizeSlider');
						$(".frameSizeSlider").slider("option", "value", frameSlider);
					}
					// $('.subMenu-7').trigger('click');
					break;
				}
				
				case 3: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.getCurrentLogo();
					obj.previewColors();
					obj.previewLogo();
					disableOption();
					break;
				}
				
				case 4: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.getCurrentLogo();
					break;
				}
				case 5: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					if (parseInt(obj.currentLogo.generate.templatePath.isIcon) == 1) {
						isIconAvail();
					} else {
						obj.getCurrentLogo();
					}
					
					if (parseInt(obj.currentLogo.generate.templatePath.isMono) == 1) {
						isMonoAvail();
					} else {
						obj.getCurrentLogo();
					}
					
					break;
				}
				
				case 6: {
					$('.editFinalLogo, .currentLogoBox, .previewSection').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.getCurrentLogo();
					obj.previewColors();
					obj.previewLogo();
					if (rangeSliderFlag) {
						var frameSlider = obj.getSession('frameSizeSlider');
						$(".frameSizeSlider").slider("option", "value", frameSlider);
					}
					break;
				}
				
				case 7: {
					
					$('.editFinalLogo, .currentLogoBox, .previewSection').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					disableOption();
					break;
				}
				
				case 8: {
					$('.editFinalLogo, .previewSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
					var objs = $('.textFontFamily a:first-child');
					$('.textFontFamily').removeClass('active');
					$(objs).addClass('active');
					editorParameters = {};
					editorParameters.obj = objs;
					editorParameters.fors = 'logo';
					loadMoreStart = 0;
					logoByfontFamily(editorParameters);
					break;
				}
				
				case 9: {
					$('.editFinalLogo, .currentLogoBox, .previewSection').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					if (rangeSliderFlag) {
						var frameSlider = obj.getSession('textSloganDistSlider');
						$(".textSloganDistSlider").slider("option", "value", frameSlider);
					}
					var sloganText = lEditor.getSession('sloganText');
					if (sloganText == '') {
						// $('.editSloganName').val('Slogan');
						// lEditor.setSession('sloganText', 'Slogan');
						updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], '', getSliderValue('sloganTextSize'), getSliderValue('sloganLetterSpacing'), '');
					}
					disableOption();
					break;
				}
				case 10: {
					$('.editFinalLogo, .previewSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
					var objs = $('.sloganFontFamily a:first-child');
					$('.sloganFontFamily').removeClass('active');
					$(objs).addClass('active');
					editorParameters = {};
					editorParameters.obj = objs;
					editorParameters.fors = 'slogan';
					loadMoreStart = 0;
					logoByfontFamily(editorParameters);
					
					break;
				}
				case 11: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					obj.getCurrentLogo();
					if (rangeSliderFlag) {
						var frameSlider = obj.getSession('textSloganDistSlider');
						$(".textSloganDistSlider").slider("option", "value", frameSlider);
					}
					disableOption();
					break;
				}
				case 12: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.getCurrentLogo();
					break;
				}
				case 13: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					break;
				}
				case 14: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					break;
				}
				case 15: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					break;
				}
				case 16: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					break;
				}
				case 17: {
					
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					obj.getCurrentLogo();
					break;
				}
				
				case 18: {
					
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					obj.getCurrentLogo();
					break;
				}
				
				case 19: {
					
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					obj.getCurrentLogo();
					break;
				}
				case 20: {
					$('.editFinalLogo, .previewSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
					break;
				}
				case 21: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					break;
				}
				case 22: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					break;
				}
				case 23: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					logoByContainer();
					obj.getCurrentLogo();
					obj.previewColors();
					obj.previewLogo();
					break;
				}
				case 24: {
					$('.previewSection').addClass('hidden');
					if (obj.currentLogo.generate.templatePath.isFrame == 0 || $(".containerOptions").hasClass('active')) {
						$('.editFinalLogo').addClass('hidden');
						$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
						loadMoreStart = 0;
						logoByContainer();
					} else {
						$('.editFinalLogo').removeClass('hidden');
						$('.editLogoSlider, .currentLogoBox').addClass('hidden');
						obj.getCurrentLogo();
					}
					break;
				}
				
				case 25: {
					obj.setSession('targetlink', 2);
					obj.setSession('parentlink', 2);
					break;
				}
				
				case 26: {
					$('.colorPaletteButton').addClass('active');
					$('.editFinalLogo, .previewSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
					editorParameters = {};
					editorParameters.id = 0;
					loadMoreStart = 0;
					palettsColorVariation(editorParameters);
					break;
				}
				case 27: {
					
					$('.editFinalLogo, .previewSection, editSymbolsSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox, .symbolVariations').removeClass('hidden');
					lEditor.editIconsData();
					
					break;
				}
				case 28: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider, .previewSection').addClass('hidden');
					obj.getCurrentLogo();
					break;
				}
				case 29: {
					$('.editFinalLogo, .previewSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
					loadMoreStart = 0;
					getLayoutVariations();
					
					break;
				}
				case 30: {
					$('.editFinalLogo, .previewSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
					loadMoreStart = 0;
					obj.generateDynamicLogoVariations();
					break;
				}
				case 31: {
					
					$('.editFinalLogo, .currentLogoBox, .previewSection').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					isIconAvail();
					break;
				}
				case 32: {
					
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					loadMoreStart = 0;
					isMonoAvail();
					
					break;
				}
				
				case 34: {
					obj.setSession('targetlink', 2);
					obj.setSession('parentlink', 2);
					break;
				}
				
				case 39: {
					
					$('.editFinalLogo, .previewSection, editMonoSection').addClass('hidden');
					$('.editLogoSlider, .currentLogoBox, .monoVariations').removeClass('hidden');
					lEditor.getMonogramVariations();
					break;
				}
				case 40: {
					if (obj.currentLogo.generate.templatePath.isIconFrame == 0 || $(".innerContainerOptions").hasClass('active')) {
						$('.editFinalLogo, .previewSection').addClass('hidden');
						$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
						loadMoreStart = 0;
						logoByIconContainer();
					} else {
						$('.editFinalLogo').removeClass('hidden');
						$('.editLogoSlider, .currentLogoBox').addClass('hidden');
						obj.getCurrentLogo();
					}
					break;
				}
				case 41: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					logoByIconContainer();
					obj.getCurrentLogo();
					break;
				}
				case 42: {
					$('.editLogoSlider').removeClass('hidden');
					$('.editFinalLogo, .currentLogoBox, .previewSection').addClass('hidden');
					loadMoreStart = 0;
					logoByContainer();
					break;
				}
				case 43: {
					$('.editFinalLogo, .currentLogoBox').removeClass('hidden');
					$('.editLogoSlider').addClass('hidden');
					obj.previewColors();
					obj.previewLogo();
					obj.getCurrentLogo();
					break;
				}
				case 44: {
					$('.editLogoSlider').removeClass('hidden');
					$('.editFinalLogo, .currentLogoBox, .previewSection').addClass('hidden');
					loadMoreStart = 0;
					logoByIconContainer();
					break;
				}
				
			}
			
			$('.topParent-' + parentLink).parent('li').addClass('active');
			$('.topParent-' + getLink).parent('li').addClass('active');
			if (parentLink != 3) {
				$('[class^="subMenu"]').parent('li').removeClass('active');
				$('.subMenu-' + getLink).parent('li').addClass('active');
			}
			
			$('.subMenu-' + defaultLink).parent('li').addClass('active');
			$('[class^="subChild"]').addClass('hidden');
			$('.menu_2, .submenu_' + parentLink + ', .subChild-' + getLink + ', .subChild-' + defaultLink).removeClass('hidden');
			if (parentLink == 3) {
				
				if (colorDataType === 'undefined') {
					obj.setSession('colorDataType', 'background');
				}
				
				if (colorDataType == 'background' || colorDataType == 'colorVar') {
					$('[class^="subMenu"]').parent('li').removeClass('active');
					$('.subMenu-' + getLink).parent('li').addClass('active');
					$('.subMenu-' + defaultLink).parent('li').addClass('active');
				}
				
				if (colorDataType == 'foreground') {
					$('[class^="subMenu"]').parent('li').removeClass('active');
					$('.subMenu-' + getLink).parent('li').addClass('active');
				}
			}
			checkFrame();
			checkIconFrame();
			
			if (getLink == 42) {
				$('.subMenu-24').parent('li').addClass('active');
				$(getLink).parent('li').removeClass('active');
			}
			
			if (getLink == 44) {
				$('.subMenu-40').parent('li').addClass('active');
				$(getLink).parent('li').removeClass('active');
			}
			
			if (defaultLink == 1 && getLink == 1) {
				$('body').addClass('preview-header');
				$('.menu_2').addClass('hidden')
			} else {
				$('body').removeClass('preview-header');
				$('html, body').animate({ scrollTop: 0 });
				
			}
			
			$('.commonClrDiv a').removeClass('active');
			if (getLink != 27) {
				addEditOptions();
			}
			if (getLink == 27) {
				$('.editSymbolsSection').addClass('hidden');
				$('.symbolVariations, .subChild-31').removeClass('hidden');
				$('.subMenu-31').parent('li').addClass('active');
			}
			if (getLink == 39) {
				$('.editMonoSection').addClass('hidden');
				$('.monoVariations, .subChild-32').removeClass('hidden');
				$('.subMenu-32').parent('li').addClass('active');
			}
			clearOutlineBox();
			
		}
		/* Top header Menus of editors */
		
		obj.modifyLogoProperties = function (propName) {
			var tempLogoArray = obj.logoTempArr;
			var promiseArray = [];
			
			$('.sliderContainer').html('');
			for (let index = 0; index < tempLogoArray.length; index++) {
				var item = tempLogoArray[index];
				
				promiseArray.push(
					(function (index, item) {
						return new Promise((resolve, reject) => {
							opentype.load(item.generate.textFontType, function (err, font) {
								var logo;
								var logoHtml;
								if (propName == "logoname") {
									var companyName = lEditor.getSession('logoname');
									item.logoName = companyName;
									if (companyName && companyName != '') {
										var logo = font.getPath(lEditor.getSession('logoname'), 0, 0, 72, { 'letterSpacing': item.generate.logoLetterSpacing });
										item.logoName = lEditor.getSession('logoname');
										item.generate.logoPath = logo.toSVG();
									}
									else {
										item.generate.logoPath = '<path d="M 0 0 l 1 0" stroke="white" stroke-width="0" fill ="none" />';
									}
								}
								else {
									var logo = font.getPath(lEditor.getSession('sloganText'), 0, 0, item.generate.sloganTextSize, { 'letterSpacing': item.generate.sloganLetterSpacing });
									item.sloganText = lEditor.getSession('sloganText');
									item.generate.sloganPath = logo.toSVG();
								}
								
								opentype.load(item.generate.sloganFontType, function (err, fnt) {
									if (!err) {
										item.generate.sloganFontObject = fnt;
										var returnObj = logoMakerFunction.generateLogoTemplate(item.generate, item.idKey);
										var logoHtml = '<div class="logos--boxes" data-sfId ="' + item.sfId + '" data-fId ="' + item.fId + '" data-frmId ="' + item.frmId + '" data-cpId ="' + item.cpId + '" ><div class="logo--slides"><div class="logo-favourite iconFav" data-toggle="tooltip" title="Add to favorites" data-type="favorite" data-id="' + index + '" data-logo-id="0"><i class="icon icon-heart"></i></div><div class="logoSlide-overlay gradient-div"><div class="icons-edit icons-preview iconEdit edit--btn" data-id="' + index + '" data-type="edit" data-logo-id="0"><span class="edit--btn">Edit logo<span class="edit--btn"></span></span></div></div><div class="svg--slide" style="background-color:' + item.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
										item = updateCurrLogoObject(item);
										
										resolve({
											item: item
											, logoHtml: logoHtml
										});
									}
								});
							});
						})
					}(index, item))
					);
				}
				Promise.all(promiseArray).then(results => {
					var tempArray = [];
					for (let index = 0; index < results.length; index++) {
						$(".sliderContainer").append(results[index].logoHtml);
						tempArray.push(results[index].item);
					}
					obj.logoTempArr = tempArray;
				})
			}
			
			obj.activateSelectedColors = function () {
				var colorBoxes = $('.color-selection.colorContainer .color');
				
				colorBoxes.removeClass('active');
				obj.refreshSelectedColorBox();
			}
			
			obj.refreshSelectedColorBox = function () {
				var selectedColors = JSON.parse(lEditor.getSession('sampleColor'));
				var selectedColorBox = $('.color-container .icons-container .colorContainerBoxes');
				
				selectedColorBox.removeClass('multi-gradient');
				$('.color-section .color-text')[selectedColors.length > 0 ? 'hide' : 'show']();
				selectedColorBox[selectedColors.length > 0 ? 'show' : 'hide']();
				
				for (let index = 0; index < selectedColors.length; index++) {
					$('.color-selection.colorContainer .color[data-sampleColorId="' + selectedColors[index].samplecolorid + '"]').addClass('active');
				}
				for (let index = 0; index < selectedColorBox.length; index++) {
					if (selectedColors[selectedColors.length - 1 - index]) {
						var item = $('.color-selection.colorContainer .color[data-sampleColorId="' + selectedColors[index].samplecolorid + '"]');
						$(selectedColorBox[index]).addClass('active');
						$(selectedColorBox[index]).attr('data-sampleColorId', selectedColors[index].samplecolorid);
						if (selectedColors[index].samplecolorid == -1) {
							selectedColorBox[index].style.background = 'transparent';
							$(selectedColorBox[index]).addClass('multi-gradient');
						}
						else {
							selectedColorBox[index].style.background = item.attr('data-sampleColor');
							$(selectedColorBox[index]).removeClass('multi-gradient');
						}
					}
					else if (selectedColorBox[index]) {
						$(selectedColorBox[index]).removeClass('active');
						selectedColorBox[index].style.background = '#ffffff';
						$(selectedColorBox[index]).removeAttr('data-sampleColorId');
					}
				}
				if (selectedColors.length > 3) {
					$('.color-selection-info').show();
					$('.color-selection-info').html('+ ' + (selectedColors.length - 3) + ' more');
				}
				else {
					$('.color-selection-info').hide();
					$('.color-selection-info').html('');
				}
			}
			
			// for generating dynamic logos for step - 6   	
			obj.generateDynamicLogos = function () {
				var sloganFont;
				var monoFont;
				loadMoreStart++;
				randomPagination++;
				
				var limit = 10;
				
				if (loadMoreStart == 1) {
					randomPagination = loadMoreStart;
					lEditor.logoTempArr = [];
					lEditor.logoSlider('final', 1);
				}
				$('.step_6 .load-more-anim').addClass('loading');
				obj.getSliderDataIcons(function () {
					var savedColors = JSON.parse(obj.getSession('sampleColor'));
					var sessionColors = [];
					$.each(savedColors, function (k, v) {
						if (v.sasamplecolorid > -1) {
							sessionColors.push(v.samplecolorid);
						}
					});
					var fonts = [];
					var sloganFonts = [];
					var monoFonts = [];
					var iconFrames = [];
					var iconFrames = [];
					var frames = [];
					var pellets;
					
					jqXHR = $.ajax({
						url: DH.baseURL + '/logoMakerAjax.php',
						type: 'POST',
						data: { action: 'randomData', colors: sessionColors, start: randomPagination },
						//async: false,
						// beforeSend: function(){
						// 	$('.step_6 .load--more--class').addClass('loading');
						// },
						success: function (json) {
							var json = JSON.parse(json);
							
							$.each(json.data.logoFonts, function (k, v) {
								fonts.push(v);
							});
							$.each(json.data.monoFonts, function (k, v) {
								monoFonts.push(v);
							});
							$.each(json.data.sloganFonts, function (k, v) {
								sloganFonts.push(v);
							});
							$.each(json.data.iconFrames, function (k, v) {
								iconFrames.push(v);
							});
							$.each(json.data.frames, function (k, v) {
								frames.push(v);
							});
							
							pellets = json.data.pellets;
							if (pellets.length < 10) {
								randomPagination = 0;
								if (pellets.length == 0) {
									obj.generateDynamicLogos();
								}
							}
							
							var generationLength = fonts.length;
							//$('.load--more--class').remove();
							
							var templates = [];
							var icons = obj.sliderData.icons;
							var isIconTemplate = 0;
							$.each(icons, function (keee, veee) {
								if (veee != "") {
									isIconTemplate = 1;
								}
							});
							if (icons.length == 0 || isIconTemplate == 0) {
								$.each(obj.sliderData.templates, function (k, v) {
									if (v.isIcon == 0) {
										templates.push(v);
									}
								});
							} else {
								templates = obj.sliderData.templates;
							}
							
							var logoText = obj.getSession('logoname');
							let currentMonogram = JSON.parse(obj.getSession('currentLogo')) ? JSON.parse(obj.getSession('currentLogo')).generate.monogram : undefined;
							var monoText = currentMonogram ?currentMonogram:logoMakerFunction.genMonoGramText(logoText);
							obj.setMonogramText(monoText);
							var wordArray = logoText.split(' ');
							if (wordArray.length == 2) {
								logoText1 = wordArray[0];
								logoText2 = wordArray[1];
							}
							var sloganText = obj.getSession('sloganText');
							var slides = [];
							var arr = [];
							arr[0] = fonts.length; // text
							arr[1] = frames.length;
							arr[2] = icons.length;
							arr[3] = templates.length;
							arr[4] = pellets.length;
							arr[5] = sloganFonts.length;
							arr[6] = iconFrames.length;
							arr[7] = monoFonts.length;
							
							
							obj.randomSliderSet = [];
							var monoTemplate = 0;
							for (i = 0; i < pellets.length; i++) {
								isCond = true;
								while (isCond) {
									var comb = logoMakerFunction.getRandomCombination(arr);
									if (logoMakerFunction.isUniqueComination(obj.randomSliderSet, comb)) {
										if (monoTemplate < 2) {
											if (templates[comb[3]].isMono == 1) {
												obj.randomSliderSet.push(comb);
												isCond = false;
												monoTemplate++;
											} else {
												continue;
											}
										} else {
											if (templates[comb[3]].isMono == 0) {
												obj.randomSliderSet.push(comb);
												isCond = false;
											}
										}
										
									}
								}
							}
							
							var i = 0;
							obj.randomSliderSet = obj.randomSliderSet.map((a) => ({ sort: Math.random(), value: a })).sort((a, b) => a.sort - b.sort).map((a) => a.value);
							var randomObjLength = obj.randomSliderSet.length;
							var fontLoader = 0;
							
							loaderShow();
							var j = (loadMoreStart - 1) * limit;
							var randomSlideArray = [];
							
							
							$.each(obj.randomSliderSet, function (k, v) {
								randomSlideArray.push(new Promise((success, failure) => {
									var monoPath = "";
									v[0] = fontLoader++;
									var logoTemp = {
										logoPath: "",
										logoPath1: "",
										logoPath2: "",
										sloganPath: "",
										framePath: "",
										iconFramePath: "",
										iconPath: "",
										templatePath: "",
										bgColor: ""
									};
									
									var promiseArr = [];
									
									promiseArr.push(new Promise((resolve, reject) => {
										opentype.load(fonts[v[0]].link, function (err, font) {
											resolve({ font: font, type: 'company_name' });
										});
									}));
									promiseArr.push(new Promise((resolve, reject) => {
										opentype.load(sloganFonts[v[5]].link, function (err, font) {
											resolve({ font: font, type: 'slogan' });
										});
									}));
									promiseArr.push(new Promise((resolve, reject) => {
										opentype.load(monoFonts[v[7]].link, function (err, font) {
											resolve({ font: font, type: 'monofont' });
										});
									}));
									
									Promise.all(promiseArr).then(newFonts => {
										if (logoText != '') {
											var logo = newFonts[0].font.getPath(logoText, 0, 0, 72);
											logoTemp.logoPath = logo.toSVG();
										}
										else {
											logoTemp.logoPath = '<path d="M 0 0 l 1 0" stroke="white" stroke-width="0" fill ="none" />';
										}
										var slogan = newFonts[1].font.getPath(sloganText, 0, 0, 24);
										var monoPath = newFonts[2].font.getPath(monoText, 0, 0, 72);
										
										sloganFont = newFonts[1].font;
										
										logoTemp.sloganPath = slogan.toSVG()
										monoFont = newFonts[2].font;
										
										
										logoTemp.templatePath = templates[v[3]];
										if (logoTemp.templatePath.isFrame == 1) {
											logoTemp.framePath = frames[v[1]].svg;
											logoTemp.templatePath.frameType = frames[v[1]].type;
											logoTemp.templatePath.frameOverlap = frames[v[1]].isOverlap;
										} else {
											logoTemp.framePath = "";
											logoTemp.templatePath.frameType = "";
											logoTemp.templatePath.frameOverlap = "";
										}
										if (logoTemp.templatePath.isIconFrame == 1) {
											logoTemp.iconFramePath = iconFrames[v[6]].svg;
										} else {
											logoTemp.iconFramePath = "";
										}
										if (typeof logoTemp.templatePath.isMono != "undefined" && logoTemp.templatePath.isMono == 1) {
											
											logoTemp.iconPath = monoPath.toSVG();
											
										} else if (logoTemp.templatePath.isIcon == 1) {
											logoTemp.iconPath = icons[v[2]];
										} else {
											logoTemp.iconPath = "";
										}
										logoTemp.templateType = v[3];
										logoTemp.bgColor = pellets[v[4]].bg_color;
										logoTemp.mainTextColor = "";
										logoTemp.sloganTextColor = "";
										logoTemp.iconColor = "";
										logoTemp.frameColor = "";
										logoTemp.frameFilledColor = "";
										logoTemp.textGradient = "";
										logoTemp.sloganGradient = "";
										logoTemp.iconGradient = "";
										logoTemp.frameGradient = "";
										logoTemp.frameFilledGradient = "";
										logoTemp.iconFrameColor = "";
										logoTemp.iconFrameGradient = "";
										var idKey = logoMakerFunction.genRandomId();
										
										if (gradientsArray[pellets[v[4]].text_color]) {
											logoTemp.textGradient = pellets[v[4]].text_color;
										}
										else {
											logoTemp.mainTextColor = pellets[v[4]].text_color;
										}
										
										if (gradientsArray[pellets[v[4]].slogan_color]) {
											logoTemp.sloganGradient = pellets[v[4]].slogan_color;
										}
										else {
											logoTemp.sloganTextColor = pellets[v[4]].slogan_color;
										}
										
										if (gradientsArray[pellets[v[4]].icon_color]) {
											logoTemp.iconGradient = pellets[v[4]].icon_color;
										}
										else {
											logoTemp.iconColor = pellets[v[4]].icon_color;
										}
										
										if (gradientsArray[pellets[v[4]].frame_color]) {
											logoTemp.frameGradient = pellets[v[4]].frame_color;
											logoTemp.iconFrameGradient = pellets[v[4]].frame_color;
										}
										else {
											logoTemp.frameColor = pellets[v[4]].frame_color;
											logoTemp.iconFrameColor = pellets[v[4]].frame_color;
										}
										
										if (gradientsArray[pellets[v[4]].filled_frame_color]) {
											logoTemp.frameFilledGradient = pellets[v[4]].filled_frame_color;
										}
										else {
											logoTemp.frameFilledColor = pellets[v[4]].filled_frame_color;
										}
										
										logoTemp.idKey = idKey;
										
										logoTemp.fontName = monoFonts[v[7]].link;
										logoTemp.sloganFontType = sloganFonts[v[5]].link;
										logoTemp.textFontType = fonts[v[0]].link;
										logoTemp.sloganFontObject = sloganFont;
										returnObj = logoMakerFunction.generateLogoTemplate(logoTemp, idKey);
										logoTemp = returnObj.logoObj;
										logoTemp.sloganFontObject = "";
										var dObj = {};
										logoTemp.monogram = obj.getSession('monogram');
										logoTemp.iconValue = obj.getSession('iconValue');
										dObj.generate = logoTemp;
										dObj.logoName = obj.getSession('logoname');
										dObj.budgetType = obj.getSession('budgetType');
										dObj.budgetId = obj.getSession('budgetId');
										dObj.budgetVal = obj.getSession('budgetVal');
										dObj.sloganName = obj.getSession('sloganText');
										dObj.industryId = obj.getSession('industryId');
										dObj.industryName = obj.getSession('extraIndustry');
										dObj.currencyId = obj.getSession('currencyId');
										dObj.idKey = idKey;
										dObj.sfId = sloganFonts[v[5]].id;
										dObj.fId = fonts[v[0]].id;
										dObj.frmId = frames[v[1]].id;
										dObj.cpId = pellets[v[4]].color_id;
										
										
										dObj = updateCurrLogoObject(dObj);
										if ((i + 1) == pellets.length && pellets.length % 2 == 1) {
										} else {
											
											slickElement = '<div class="logos--boxes" data-sfId ="' + sloganFonts[v[5]].id + '" data-fId ="' + fonts[v[0]].id + '" data-frmId ="' + frames[v[1]].id + '" data-cpId ="' + pellets[v[4]].color_id + '" data-cpId ="' + pellets[v[4]].color_id + '"><div class="logo--slides"><div class="logo-favourite iconFav" data-toggle="tooltip" title="Add to favorites" data-type="favorite" data-id="' + j + '" data-logo-id="0"><i class="icon icon-heart"></i></div><div class="logoSlide-overlay gradient-div"><div class="icons-edit icons-preview iconEdit edit--btn" data-id="' + j + '" data-type="edit" data-logo-id="0"><span class="edit--btn">Edit logo<span class="edit--btn"></span></span></div></div><div class="svg--slide" style="background-color:' + logoTemp.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + logoMakerFunction.getFinalLogoTemplate(dObj.generate) + '</div></div></div></div>';
											
											
											$(".sliderContainer").append(slickElement);
										}
										obj.logoTempArr[j++] = dObj;
										i++;
										if (i == pellets.length) {
											
											//$(".sliderContainer").append('<div class="load--more--class loadMoreFixed"><div class="load--more--button"><a class="loadMoreGenerate generate-button changes-button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.gif') + '" /></span><span class="loader-content">Load More Logos</span></span></a></div></div> ');
										}
										loaderHide();
										dh_utility_common.changeBg();
										success();
									});
								}));
							});
							
							Promise.all(randomSlideArray).then(() => {
								$('.step_6 .load-more-anim').removeClass('hidden');
								$('.step_6 .load-more-anim').removeClass('fixed');
								$('.step_6 .load-more-anim .loadMoreGenerate').removeClass('animate');
								$('.step_6 .load-more-anim').removeClass('loading');
								
							})
						}
					});
				});
			},
			/* -------------------------------------------------------------------------------------------- */
			// for update monogram text
			obj.setMonogramText = function (monogram) {
				obj.setSession('monogram', monogram);
			}
			
			// for getting monogram text
			obj.getMonogramText = function () {
				
				
				let currentMonogram = JSON.parse(obj.getSession('currentLogo')) && JSON.parse(obj.getSession('currentLogo')).generate && JSON.parse(obj.getSession('currentLogo')).generate.monogram ? JSON.parse(obj.getSession('currentLogo')).generate.monogram : undefined;
				var monogram = currentMonogram ? currentMonogram:'';// = obj.getSession('monogram');
				
				if (monogram == null || monogram == "") {
					var logoText = obj.getSession('logoname');
					monogram = logoMakerFunction.genMonoGramText(logoText);
					obj.setMonogramText('monogram', monogram);
				}
				return monogram;
			}
			/* -------------------------------------------------------------------------------------------- */
			
			// for getting dynamic logo variation in Editor section 
			obj.generateDynamicLogoVariations = function () {
				var sloganFont;
				var monoFont;
				loadMoreStart++;
				randomPagination++;
				var dObj = JSON.parse(lEditor.getSession('currentLogo'));
				var limit = 10;
				var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
				//alert(loadMoreStart);
				if (loadMoreStart == 1) {
					randomPagination = loadMoreStart;
					lEditor.logoTempArr = [];
					lEditor.logoSlider('final', 1);
				}
				obj.getSliderDataIcons(function () {
					if (obj.sliderData.icons.length == 0 && dObj.generate.iconPath != "") {
						obj.sliderData.icons.push(dObj.generate.iconPath);
					}
					var sessionColors = [];
					var fonts = [];
					var monoFonts = [];
					var sloganFonts = [];
					var frames = [];
					var iconFrames = [];
					var pellets;
					jqXHR = $.ajax({
						url: DH.baseURL + '/logoMakerAjax.php',
						type: 'POST',
						data: { action: 'randomData', colors: sessionColors, start: randomPagination },
						//async: false,
						success: function (json) {
							var json = JSON.parse(json);
							$.each(json.data.logoFonts, function (k, v) {
								fonts.push(v);
							});
							$.each(json.data.sloganFonts, function (k, v) {
								sloganFonts.push(v);
							});
							$.each(json.data.monoFonts, function (k, v) {
								monoFonts.push(v);
							});
							$.each(json.data.frames, function (k, v) {
								frames.push(v);
							});
							$.each(json.data.iconFrames, function (k, v) {
								iconFrames.push(v);
							});
							pellets = json.data.pellets;
							
							if (pellets.length < 10) {
								randomPagination = 0;
								if (pellets.length == 0) {
									obj.generateDynamicLogoVariations();
								}
							}
							
							var generationLength = fonts.length;
							$('.load--more--class').remove();
							
							var templates = [];
							var icons = obj.sliderData.icons;
							var isIconTemplate = 0;
							$.each(icons, function (keee, veee) {
								if (veee != "") {
									isIconTemplate = 1;
								}
							});
							if (icons.length == 0 || isIconTemplate == 0) {
								
								$.each(obj.sliderData.templates, function (k, v) {
									if (v.isIcon == 0) {
										templates.push(v);
									}
								});
								
							} else {
								
								templates = obj.sliderData.templates;
							}
							
							var logoText = obj.getSession('logoname');
							var monoText = lEditor.getMonogramText();
							var wordArray = logoText.split(' ');
							if (wordArray.length == 2) {
								logoText1 = wordArray[0];
								logoText2 = wordArray[1];
							}
							var sloganText = obj.getSession('sloganText');
							var slides = [];
							var arr = [];
							arr[0] = fonts.length; // text
							arr[1] = frames.length;
							arr[2] = icons.length;
							arr[3] = templates.length;
							arr[4] = pellets.length;
							arr[5] = sloganFonts.length;
							arr[6] = iconFrames.length;
							arr[7] = monoFonts.length;
							
							
							obj.randomSliderSet = [];
							var monoTemplate = 0;
							for (i = 0; i < pellets.length; i++) {
								isCond = true;
								while (isCond) {
									var comb = logoMakerFunction.getRandomCombination(arr);
									if (logoMakerFunction.isUniqueComination(obj.randomSliderSet, comb)) {
										if (monoTemplate < 2) {
											if (templates[comb[3]].isMono == 1) {
												obj.randomSliderSet.push(comb);
												isCond = false;
												monoTemplate++;
											} else {
												continue;
											}
										} else {
											if (templates[comb[3]].isMono == 0) {
												obj.randomSliderSet.push(comb);
												isCond = false;
											}
										}
										
									}
								}
							}
							
							var i = 0;
							obj.randomSliderSet = obj.randomSliderSet.map((a) => ({ sort: Math.random(), value: a })).sort((a, b) => a.sort - b.sort).map((a) => a.value);
							var randomObjLength = obj.randomSliderSet.length;
							var fontLoader = 0;
							
							var j = parseInt((loadMoreStart - 1) * limit);
							var randomSlideArray = [];
							
							$.each(obj.randomSliderSet, function (k, v) {
								randomSlideArray.push(new Promise((success, failure) => {
									var monoPath = "";
									v[0] = fontLoader++;
									var logoTemp = {
										logoPath: "",
										logoPath1: "",
										logoPath2: "",
										sloganPath: "",
										framePath: "",
										iconFramePath: "",
										iconPath: "",
										templatePath: "",
										bgColor: "",
									};
									
									var promiseArr = [];
									
									promiseArr.push(new Promise((resolve, reject) => {
										opentype.load(fonts[v[0]].link, function (err, font) {
											resolve(font);
										});
									}));
									promiseArr.push(new Promise((resolve, reject) => {
										opentype.load(sloganFonts[v[5]].link, function (err, font) {
											resolve(font);
										});
									}));
									promiseArr.push(new Promise((resolve, reject) => {
										opentype.load(monoFonts[v[7]].link, function (err, font) {
											resolve(font);
										});
									}));
									
									Promise.all(promiseArr).then(newFonts => {
										if (logoText != '') {
											var logo = newFonts[0].getPath(logoText, 0, 0, 72);
											logoTemp.logoPath = logo.toSVG();
										}
										else {
											logoTemp.logoPath = '<path d="M 0 0 l 1 0" stroke="white" stroke-width="0" fill ="none" />';
										}
										//var logo = newFonts[0].getPath(logoText, 0, 0, 72);
										var slogan = newFonts[1].getPath(sloganText, 0, 0, 24);
										var monoPath = newFonts[2].getPath(monoText, 0, 0, 72);
										
										//logoTemp.logoPath = logo.toSVG();
										sloganFont = newFonts[1];
										
										logoTemp.sloganPath = slogan.toSVG()
										monoFont = newFonts[2];
										
										logoTemp.templatePath = templates[v[3]];
										if (logoTemp.templatePath.isFrame == 1) {
											logoTemp.framePath = frames[v[1]].svg;
											logoTemp.templatePath.frameType = frames[v[1]].type;
											logoTemp.templatePath.frameOverlap = frames[v[1]].isOverlap;
										} else {
											logoTemp.framePath = "";
											logoTemp.templatePath.frameType = "";
											logoTemp.templatePath.frameOverlap = "";
										}
										if (logoTemp.templatePath.isIconFrame == 1) {
											logoTemp.iconFramePath = iconFrames[v[6]].svg;
										} else {
											logoTemp.iconFramePath = "";
										}
										if (typeof logoTemp.templatePath.isMono != "undefined" && logoTemp.templatePath.isMono == 1) {
											
											logoTemp.iconPath = monoPath.toSVG();
											
										} else if (logoTemp.templatePath.isIcon == 1) {
											logoTemp.iconPath = icons[v[2]];
										} else {
											logoTemp.iconPath = "";
										}
										logoTemp.templateType = v[3];
										logoTemp.bgColor = pellets[v[4]].bg_color;
										logoTemp.mainTextColor = "";
										logoTemp.sloganTextColor = "";
										logoTemp.iconColor = "";
										logoTemp.frameColor = "";
										logoTemp.frameFilledColor = "";
										logoTemp.textGradient = "";
										logoTemp.sloganGradient = "";
										logoTemp.iconGradient = "";
										logoTemp.frameGradient = "";
										logoTemp.frameFilledGradient = "";
										logoTemp.iconFrameColor = "";
										logoTemp.iconFrameGradient = "";
										var idKey = logoMakerFunction.genRandomId();
										
										if (gradientsArray[pellets[v[4]].text_color]) {
											logoTemp.textGradient = pellets[v[4]].text_color;
										}
										else {
											logoTemp.mainTextColor = pellets[v[4]].text_color;
										}
										
										if (gradientsArray[pellets[v[4]].slogan_color]) {
											logoTemp.sloganGradient = pellets[v[4]].slogan_color;
										}
										else {
											logoTemp.sloganTextColor = pellets[v[4]].slogan_color;
										}
										
										if (gradientsArray[pellets[v[4]].icon_color]) {
											logoTemp.iconGradient = pellets[v[4]].icon_color;
										}
										else {
											logoTemp.iconColor = pellets[v[4]].icon_color;
										}
										
										if (gradientsArray[pellets[v[4]].frame_color]) {
											logoTemp.frameGradient = pellets[v[4]].frame_color;
											logoTemp.iconFrameGradient = pellets[v[4]].frame_color;
										}
										else {
											logoTemp.frameColor = pellets[v[4]].frame_color;
											logoTemp.iconFrameColor = pellets[v[4]].frame_color;
										}
										
										if (gradientsArray[pellets[v[4]].filled_frame_color]) {
											logoTemp.frameFilledGradient = pellets[v[4]].filled_frame_color;
										}
										else {
											logoTemp.frameFilledColor = pellets[v[4]].filled_frame_color;
										}
										
										logoTemp.idKey = idKey;
										
										logoTemp.fontName = monoFonts[v[7]].link;
										logoTemp.sloganFontType = sloganFonts[v[5]].link;
										logoTemp.textFontType = fonts[v[0]].link;
										logoTemp.sloganFontObject = sloganFont;
										returnObj = logoMakerFunction.generateLogoTemplate(logoTemp, idKey);
										logoTemp = returnObj.logoObj;
										logoTemp.sloganFontObject = "";
										
										dObj.generate = logoTemp;
										dObj.logoName = obj.getSession('logoname');
										dObj.budgetType = obj.getSession('budgetType');
										dObj.budgetId = obj.getSession('budgetId');
										dObj.budgetVal = obj.getSession('budgetVal');
										dObj.sloganName = obj.getSession('sloganText');
										dObj.industryId = obj.getSession('industryId');
										dObj.industryName = obj.getSession('extraIndustry');
										dObj.currencyId = obj.getSession('currencyId');
										dObj = updateCurrLogoObject(dObj);
										if ((i + 1) == pellets.length && pellets.length % 2 == 1) {
										} else {
											
											slickElement = '<div class="logos--boxes" data-sfId ="' + sloganFonts[v[5]].id + '" data-fId ="' + fonts[v[0]].id + '" data-frmId ="' + frames[v[1]].id + '" data-cpId ="' + pellets[v[4]].color_id + '" data-cpId ="' + pellets[v[4]].color_id + '"><div class="logo--slides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo"  data-id="' + (j) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + logoTemp.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + logoMakerFunction.getFinalLogoTemplate(dObj.generate) + '</div></div></div></div>';
											
											
											$(".finalogoSlider").append(slickElement);
										}
										obj.logoTempArr[j++] = JSON.parse(JSON.stringify(dObj));
										
										i++;
										if (i == pellets.length) {
											
											$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreDynamicGenerate load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More Logos</span></a></div> ');
										}
										loaderHide();
										dh_utility_common.changeBg();
									});
								}));
							});
						}
					});
				});
			},
			/* --------------------------------------------------------------------------------------------------- */
			
			// for updating font object for company name and slogan name 
			obj.updateFontsObject = function (type) {
				
				return new Promise((resolve, reject) => {
					if (type == 'logo') {
						
						opentype.load(obj.currentLogo.generate.textFontType, function (err, font) {
							currCompFontObject = font;
							resolve();
						});
					}
					if (type == 'slogan') {
						opentype.load(obj.currentLogo.generate.sloganFontType, function (err, fnt) {
							currSloganFontObject = fnt;
							resolve();
						});
					}
					if(type =='mono'){
						
						opentype.load(JSON.parse(sessionStorage.getItem('currentLogo')).generate.fontName, function (err, monofont) {
							currMonogramFontObject = monofont;
							resolve();
						});
					}
				});
			}
			
			/* Current Steps Cases */
			
			obj.showStep = function () {
                            //console.log('---Fn showStep called ---');
                                if(typeof DH != 'undefined' && typeof DH.isLogged != 'undefined' && parseInt(DH.isLogged) > 0){
                                    $('.step-holder').addClass('loggedin');
                                }
				var anim;
				if (obj.getSession('currPage') === null || obj.getSession('currPage') === "null" || obj.getSession('currPage') === "" || obj.getSession('currPage') === "undefined") {
					this.currentStep = 2;
				} else {
					this.currentStep = obj.getSession('currPage');
				}
				this.currentStep = parseInt(this.currentStep);
				currPage = parseInt(this.currentStep);
				
				$('.getStarted').removeClass('c-1 c-2 c-3 c-4');
				$('.btnSkip').removeClass('skip-synmbols skip-visulcolor');
				$(".step-holder").addClass('hidden');
				$(".step_" + currPage).removeClass('hidden');
				$(".backButton").attr("data-link", "");
				switch (currPage) {
					case 1: {
					}
					case 2: {
						$('.init-focus').focus();
						$('.footer-strip, .top--buttons, .startButton,  .topRightButtons, .lEditorHeader,.loginOption').removeClass('hidden');
						$('.footer-strip-content .btn-white, .topLeftButtons, .topActionBtn, .buyNowBtn, .downloadFilesBtn').addClass('hidden');
						var getSampleImage = $.parseJSON(obj.getSession('sampleImage'));
						var boxLength = 0;
						if (getSampleImage !== null) {
							$.each(getSampleImage, function (k, v) {
								$("[data-sampleid='" + v.sampleid + "']").addClass('active');
								boxLength++;
							});
						}
						obj.progressBar(boxLength);
						$('.getStarted').addClass('c-1');
						break;
					}
					case 3: {
						var boxLength = 0;
						$('.init-focus').focus();
						$('.footer-strip, .backButton, .startButton, .topLeftButtons, .topRightButtons, .lEditorHeader,.loginOption').removeClass('hidden');
						$('.footer-strip-content .progress, .footer-strip-content .btn-green, .topActionBtn, .buyNowBtn, .downloadFilesBtn').addClass('hidden');
						$('.footer-strip-content .btn-white').removeClass('hidden');
						
						var sampleClr = JSON.parse(lEditor.getSession('sampleColor'));
						$('.sampleColor_1').removeClass('active');
						if (sampleClr == '' || sampleClr == 'undefined' || sampleClr == null || jQuery.isEmptyObject(sampleClr)) {
							boxLength = 0;
						} else {
							$.each(sampleClr, function (k, v) {
								$("[data-samplecolorid='" + v.samplecolorid + "']").addClass('active');
							});
							boxLength = 1;
						}
						obj.skipBtn(boxLength);
						$('.getStarted').addClass('c-2');
						$('.btnSkip').addClass('skip-visulcolor');
						break;
					}
					
					case 4: {
						$('.step_4  input:first').focus();
						$('.footer-strip, .backButton, .startButton, .topLeftButtons, .topRightButtons, .lEditorHeader,.loginOption').removeClass('hidden');
						$('.footer-strip-content .progress, .footer-strip-content .btn-white, .topActionBtn, .buyNowBtn, .downloadFilesBtn').addClass('hidden');
						$('.footer-strip-content .btn-green').removeClass('hidden');
						var logoText = obj.getSession('logoname');
						var sloganText = obj.getSession('sloganText');
						var industryName = obj.getSession('industryId');
						var extraIndustry = obj.getSession('extraIndustry');
						var budgetType = obj.getSession('budgetType');
						var budgetId = obj.getSession('budgetId');
						var extraBudget = obj.getSession('budgetVal');
						if (industryName == 2010) {
							$('.extra--industry').show();
							$('.extraIndustry').val(extraIndustry);
						}
						if (obj.budgetShowType == 1) {
							
							if (budgetType == 2) {
								$('#budgetType').val('custom');
								$('.extra--budget').show();
								$('#extraBudget').val(extraBudget);
							} else {
								$('#budgetType').val(budgetId);
							}
						}
						
						if (sloganText != null || logoText != null) {
							$('#sloganText').val(sloganText);
							$('#logoname2').val(logoText);
							$('.industryName').val(industryName);
							$('.footer-strip-content .btn-green').removeClass('disable-button');
						}
						$('.getStarted').addClass('c-3');
						break;
					}
					
					case 5: {
                                                //debugger;
						sessionStorage.setItem("prevPage", 5);
						lottie.destroy();
						$('.step_5  input:first').focus();
						if ($('#aniBG').length) {
							$('#aniBG').css('display', 'none')
						}
						if ($('#animation_box').length) {
							$('#animation_box').css('display', 'none')
						}
						$('.footer-strip, .backButton, .startButton, .topLeftButtons, .topRightButtons, .lEditorHeader, .loginOption').removeClass('hidden');
						$('.footer-strip-content .progress, .footer-strip-content .btn-green, .topActionBtn, .buyNowBtn, .downloadFilesBtn').addClass('hidden');
						$('.footer-strip-content .btn-white').removeClass('hidden');
                                                var industryName = obj.getSession('industryId');
                                                if(version == 'v4' && typeof industryName != 'undefined' && industryName != ''){
                                                    //debugger;
                                                    getRecomIconListing();
                                                    break;
                                                }
                                                else{
                                                    //debugger;
                                                    if (obj.indusType == 1) {
							getIconTagListingNew();
							var sampleArr = $.parseJSON(obj.getSession('sampleIcon'));
							var boxLength = 0;
							obj.sampleIconArr = [];
							if (typeof sampleArr != 'undefined' && sampleArr != null) {
								if (sampleArr.si != null && !$.isEmptyObject(sampleArr.si)) {
									obj.sampleIconArr = sampleArr.si;
									boxLength = 1;
								}
							}
                                                    } else {
                                                            //	getIconTagListing();
                                                            getIconTagListingNew();
                                                            var sampleArr = $.parseJSON(obj.getSession('sampleIcon'));
                                                            var boxLength = 0;
                                                            obj.sampleIconArr = [];
                                                            if (typeof sampleArr != 'undefined' && sampleArr != null) {
                                                                    if (sampleArr.si != null && !$.isEmptyObject(sampleArr.si)) {
                                                                            obj.sampleIconArr = sampleArr.si;
                                                                            boxLength = 1;
                                                                    }
                                                            }
                                                    }
                                                    obj.iconsData(1);
                                                    obj.addSelectedIcon();
                                                    $('.getStarted').addClass('c-4');
                                                    $('.btnSkip').addClass('skip-synmbols');
                                                    break;
                                                }
						break;
					}
					
					case 6: {
						if (lottie) {
							lottie.destroy();
						}
						
						$('.step_6').css('display', "none");
						loadMoreStart = 0;
						$('.editCompanyName').val(obj.getSession('logoname'));
						$('.editSloganName').val(obj.getSession('sloganText'));
						
						obj.activateSelectedColors();
						var sampleArr = $.parseJSON(obj.getSession('sampleIcon'));
						var boxLength = 0;
						obj.sampleIconArr = [];
						if (typeof sampleArr != 'undefined' && sampleArr != null) {
							if (sampleArr.si != null && !$.isEmptyObject(sampleArr.si)) {
								obj.sampleIconArr = sampleArr.si;
								boxLength = 1;
							}
						}
						obj.addSelectedIcon();
						if (prevPage != 7) {
							if (!$('#aniBG').length) {
								var aniBG = document.createElement('div');
								aniBG.id = "aniBG";
								aniBG.style.position = "absolute";
								aniBG.style.height = "100%";
								aniBG.style.width = "100%";
								aniBG.style.backgroundColor = "#ffffff";
								$('.main-body').append(aniBG);
							} else {
								$('#aniBG').css('display', 'block');
								var aniBG = $('#aniBG')[0];
							}
							if (!$('#animation_box').length) {
								var aniDiv = document.createElement('div');
								aniDiv.id = "animation_box";
								
								aniDiv.style.width = "100%";
								aniDiv.style.paddingTop = "60px";
								$('.main-body').append(aniDiv);
								
								
							} else {
								$('#animation_box').css('display', 'block')
								var aniDiv = $('#animation_box')[0];
							}
							
							
							var params = {
								container: document.getElementById('animation_box'),
								renderer: 'svg',
								loop: false,
								autoplay: true,
								animationData: animationData,
								rendererSettings: {
									scaleMode: 'noScale'
									
								}
								
							};
							
							anim = lottie.loadAnimation(params);
							
							
							anim.onComplete = () => {
								$('.step_6').css('display', "block");
								aniDiv.style.display = 'none';
								aniBG.style.display = 'none';
								if (DH.isLogged == 0 && DH.userId == 0 && version != "v6") {
									window.setTimeout(userLoginPopup, 2500);
									document.getElementsByClassName("main-body")[0].removeChild(aniBG);
									document.getElementsByClassName("main-body")[0].removeChild(aniDiv);
									$('body').addClass('logo-modal-unset');
									return;
								} else {
									document.getElementsByClassName("main-body")[0].removeChild(aniBG);
									document.getElementsByClassName("main-body")[0].removeChild(aniDiv);
								}
							}
						} else {
							$('.step_6').css('display', "block");
							sessionStorage.setItem("prevPage", 6);
						}
						
						
						obj.generateDynamicLogos();
						
						$('.footer-strip, .topActionBtn, .buyNowBtn, .downloadFilesBtn').addClass('hidden');
						$('.backButton, .startButton, .topLeftButtons, .topRightButtons, .lEditorHeader,.loginOption, .favOption').removeClass('hidden');
						break;
					}
					
					
					case 7: {
						$('.editMonogramText').val(obj.getMonogramText());
						$(".backButton").attr("data-link", sessionStorage.getItem('backLink'));
						
						var currTargetLink = lEditor.getSession('targetlink');
						if (currTargetLink == 29) {
							currTargetLink = lEditor.setSession('targetlink', 2);
						}
						$('.topActionBtn').css('display', 'inline-block');
						$('.startButton, .topLeftButtons, .topRightButtons, .buyNowBtn, .topActionBtn, .lEditorHeader,.loginOption, .tutorialVid, .tutorBtn, .leditorLogo').removeClass('hidden');
						$('.leditorLogo').addClass('mob')
						$('.favOption, .leditorLogo ~ img').addClass('hidden');
						$('.leditorLogo ~ img').addClass('desktop');
						if (currTargetLink == null || currTargetLink == 'undefined') {
							currTargetLink = lEditor.setSession('targetlink', 2);
						}
						
						obj.currentLogo = JSON.parse(obj.getSession('currentLogo'));
						var sessionFav = JSON.parse(obj.getSession('favoriteJSON'));
						
						if (lEditor.getSession('isEditable') == 1) {
							$('.editCompanyName').attr('disabled', true);
							$('.le--buy-now.downloadFilesBtn').removeClass('hidden');
							$('.le--buy-now.buyNowBtn').addClass('hidden');
						}
						else {
							$('.editCompanyName').removeAttr('disabled');
							$('.le--buy-now.buyNowBtn').removeClass('hidden');
							$('.le--buy-now.downloadFilesBtn').addClass('hidden');
						}
						
						if (sessionFav !== null) {
							favoriteJSON = sessionFav;
						}
						obj.updateFontsObject('logo')
						.then(_ => {
							obj.updateFontsObject('slogan').then(_=>{
								return obj.updateFontsObject('mono')
							});
						})
						.then(_ => {
							if (currTargetLink == 29) {
								obj.setSession('targetlink', 2);
								$('.subMenu-29').parent('li').removeClass('active');
							}
							obj.editLogoSteps();
							
							/* Layout Section Start */
							
							$('.layoutSection li').each(function () {
								var layoutOption = $(this).find('a').data('option');
								var tmpType = obj.currentLogo.generate.templateType;
								if (layoutOption == tmpType) {
									$('.layoutSection li').removeClass('active');
									$(this).addClass('active');
								}
							});
							
							/*  Layout Section End */
							
							/*  container Section Start */
							
							
							if (currTargetLink == 24) {
								$('.subMenu-24').trigger('click');
								obj.getCurrentLogo();
							}
							if (currTargetLink == 40) {
								$('.subMenu-40').trigger('click');
								obj.getCurrentLogo();
							}
							if (currTargetLink == 23) {
								$('.containerSection li').removeClass('active');
								$('.editFinalLogo').removeClass('hidden');
								$('.containerOptions').removeClass('active')
								obj.setSession('targetlink', 6);
								obj.getCurrentLogo();
							}
							
							
							if (currTargetLink == 42) {
								$('.subMenu-24').trigger('click');
								obj.setSession('targetlink', 6);
								obj.getCurrentLogo();
							}
							if (currTargetLink == 44) {
								$('.subMenu-40').trigger('click');
								obj.setSession('targetlink', 6);
								obj.getCurrentLogo();
							}
							
							if (currTargetLink == 5) {
								$(".step-holder").addClass('hidden');
								$(".step_" + currPage).removeClass('hidden');
								
							}
							
							if (currTargetLink == null || currTargetLink == 'undefined' || currTargetLink == 1) {
								obj.previewColors();
								obj.previewLogo();
							} else {
								//$('.logoImages').html('');
							}
							
							/* === container Section End ===*/
							
							/* === Logo Section Start ===*/
							$('.editCompanyName').val(obj.getSession('logoname'));
							$('.editSloganName').val(obj.getSession('sloganText'));
							
							/* === Logo Section End ===*/
							
							obj.getCurrentLogo();
							
							
							/****************Update Sliders Value********************/
							$("#templateGenerator").html('');
							var html = logoMakerFunction.getFinalLogoTemplate(obj.currentLogo.generate);
							$("#templateGenerator").html(html);
							/*	if($('#templateGenerator .sampleIcons_1').length > 0){
								constantVars.SPACING.logoSizeSlider = parseInt($('#templateGenerator .sampleIcons_1').get(0).getBBox().width * obj.currentLogo.generate.templatePath.icon.scale * obj.currentLogo.generate.templatePath.containerBody.scale * obj.currentLogo.generate.templatePath.logoContainer.scale);
								lEditor.setSession('logoSizeSlider',constantVars.SPACING.logoSizeSlider);
							}else{
								lEditor.setSession('logoSizeSlider',100);
							}*/
							$("#templateGenerator").html('');
							
							//	alert(obj.currentLogo.generate.sloganLetterSpacing);
							
							
							
							
							if (typeof obj.currentLogo.generate.logoLetterSpacing !== 'undefined') {
								constantVars.SPACING.logoLetterSpacing = obj.currentLogo.generate.logoLetterSpacing;
							}
							if (typeof obj.currentLogo.generate.sloganLetterSpacing !== 'undefined') {
								constantVars.SPACING.sloganLetterSpacing = obj.currentLogo.generate.sloganLetterSpacing;
							}
							if (typeof obj.currentLogo.generate.sloganTextSize !== 'undefined') {
								constantVars.SPACING.sloganTextSize = obj.currentLogo.generate.sloganTextSize;
							}
							if (typeof obj.currentLogo.generate.logoTextSlider !== 'undefined') {
								constantVars.SPACING.logoTextSlider = obj.currentLogo.generate.logoTextSlider;
							}
							if (typeof obj.currentLogo.generate.logoSizeSlider !== 'undefined') {
								constantVars.SPACING.logoSizeSlider = obj.currentLogo.generate.logoSizeSlider;
							}
							
							constantVars.SPACING.textSloganDistSlider = 40;
							constantVars.SPACING.iconVsTextSlider = 0;
							constantVars.SPACING.iconDistanceSlider = 50;
							constantVars.SPACING.frameSizeSlider = 50;
							constantVars.SPACING.iconFrameSizeSlider = 50;
							
							/**************************************************/
							if (!recentColors.length) {
								loadRecentColors();
							}
							
						})
						break;
					}
					
					
				}
				
			}
			
			
			obj.imgLength = function () {
				currPage = parseInt(this.currentStep);
				return boxLength = $(".step_" + currPage + ' .active').length;
			}
			
			/* progress bar */
			// progress bar for step 2 
			obj.progressBar = function (boxLength) {
				if (boxLength <= 4) {
					$('.footer-strip-content .progress-bar').css({ 'width': parseInt(boxLength * 20 > 100 ? 100 : boxLength * 20) + '%' });
					
					$('.footer-strip-content .progress').removeClass('hidden');
					$('.footer-strip-content .btn-green').addClass('hidden').css('float', 'right');
					$('.footer-strip-content .btn-white').addClass('hidden');
					$('.footer-strip-content .progress .progress-style, .footer-strip-content .progress .progress-percentage').removeClass('hidden');
				}
				else {
					$('.footer-strip-content .progress').addClass('hidden');
					$('.footer-strip-content .btn-white').addClass('hidden');
					$('.footer-strip-content .btn-green').removeClass('hidden').css('float', 'none');
				}
				if (boxLength >= 1) {
					$('.progressBarText').text(boxLength + ' of 5').removeClass('hidden');
					$('.footer-strip-content .btn-green').removeClass('hidden');
					$('.footer-strip-content .progress').css('float', 'left');
					$('.footer-strip-content .progress').removeClass('bar-progress');
					$('.footer-strip-content .progress .progress-style, .footer-strip-content .progress .progress-percentage').addClass('hidden');
					$('.footer-strip-content .progress').removeClass('mob-progress');
				} else {
					$('.progressBarText').addClass('hidden').text('');
				}
				
				
			}
			/* skip button */
			
			obj.skipBtn = function (boxLength) {
				//var b = obj.getSession('currPage');
                                //debugger;
				if (boxLength > 0) {
					$('.footer-strip-content .btn-white').addClass('hidden');
					$('.footer-strip-content .btn-green').removeClass('hidden');
                                        if(typeof obj.getSession('currPage') != 'undefined' && obj.getSession('currPage') == '5' && version == 'v4'){
                                            $('.iconContainerDiv .getStarted').removeClass('hidden');
                                            $('.iconContainerDiv .btnSkip').addClass('hidden');
                                            
                                        }
				}
				else {
					$('.footer-strip-content .btn-white').removeClass('hidden');
					$('.footer-strip-content .btn-green').addClass('hidden');
                                        if(typeof obj.getSession('currPage') != 'undefined' && obj.getSession('currPage') == '5' && version == 'v4'){
                                            $('.iconContainerDiv .getStarted').addClass('hidden');
                                            $('.iconContainerDiv .btnSkip').removeClass('hidden');
                                        }
				}
				
			}
			
			/* New button */
			
			obj.startNew = function () {
				
				sessionStorage.clear();
				lEditor.currentStep = 1;
				$('.step-holder, .footer-strip, .topButtons, .lEditorHeader').addClass('hidden');
				$('.step_1, #root_header').removeClass('hidden');
				$('#logoname, #logoname2, #sloganText').val('');
				$('.le-imageLayout, .common-nav li').removeClass('active');
				$('.hide--icons').remove();
				$('.iconContainerBoxes').html('');
				$('.le--close').trigger('click');
				
			}
			
			// using for NOUN API 
			obj.iconsData = function (target) {
                            //console.log('---Fn iconsdata called----');
                            //console.log(arguments);
				if (target && target.closest) {
                                    
					if (target.closest('.step_5').length > 0) {
                                            
						//var input = target.closest('.logo-search-form').find('input.tag_input');
                                                var input = target.closest('.step_5').find('input.tag_input');
                                               //debugger; 
					}
					else {
						if ($(window).width() < 991) {
							var input = target.closest('.mobile-selection').find('.logo-search-form input');
                                                       // var input = target.closest('.step_5').find('input#tags');
						}
						else {
							var input = target.closest('.edit-strip').find('.logo-search-form input');
                                                        //var input = target.closest('.step_5').find('input#tags');
						}
					}
			    	
					var tagValue = $.trim($(input).val());
					// alert(tagValue);
					if (tagValue == "") {
						return false;
					}
                                        
					if (tagValue.toLowerCase() == obj.objIconSearch.toLowerCase()) {
						obj.objIconPage++;
					} else {
						obj.objIconSearch = tagValue;
						obj.objIconPage = 1;
						
					}
                                        //debugger;
					obj.ajaxIconsResponse(tagValue);
				}
			}
			
			// using for NOUN API 
			obj.editIconsData = function () {
				
				var tagValue = $.trim($('.editTags').val());
				if (tagValue == "") {
					return false;
				}
				if (tagValue == obj.objIconSearch) {
					obj.objIconPage++;
				} else {
					obj.objIconSearch = tagValue;
					obj.objIconPage = 1;
					
				}
                                lEditor.setSession('iconValue', tagValue);
				obj.ajaxEditIconsResponse(tagValue);
				
			}
			
			// using for NOUN API 
			obj.ajaxIconsResponse = function (iconSlug) {                            
                                var is_recommended_fetch = false;
                                var iconSlugIndustry = '';
                                if(version == 'v4'){
                                    var industryName = obj.getSession('extraIndustry');
                                    var iconSlugIndustry = getSlugNew(industryName);
                                    if(iconSlugIndustry == iconSlug){
                                        is_recommended_fetch = true;
                                    }
                                    
                                } 
                                obj.nextIconSearch = true;
                                var offset = 0;
                                var limit = 100;
				if (obj.objIconPage == 1) {
					$('.loadMoreIcons').hide();
					$('.searchIcon').html('<img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" />');
				} else {
                                    offset = (obj.objIconPage * limit);
					$('.showIconsDiv .loadMoreIcons').show();
				}
                                
				jqXHR = $.ajax({
					url: DH.baseURL + '/dh_ajax.php',
					type: 'POST',
					data: { action: 'api', type: 'nonEditor', slug: iconSlug, industry_id: lEditor.getSession('industryId'),version : version,offset : offset,limit : limit,action_type : 'icon_tags'  },
					dataType: "json",
					beforeSend: function () {
						
					},
					success: function (res) {
                                            
						if (res.status == 0) {
							$('.searchIcon').html('Search');
							return false;
						}
						
						if (res.nxt_search == 0) { //i.e no data available
							$('.searchIcon').html('Search');
							obj.nextIconSearch = false;
							$('.loadMoreIcons').hide();
							if (obj.objIconPage == 1) {
								$('.iconsImages, .iconsHint').remove();
								$('.loadMoreIcons').hide();
								$('.iconBlank').removeClass('hidden').text('No result found');
								$('.startIcoSection').addClass('hidden');
								$('.iconsContainerBox, .brickImage').removeClass('hidden');
								$('.flipIconTag').addClass('hidden');
								//obj.nextIconSearch = true;                                                               
							}
                                                        if(version == 'v4' && res.nxt_search == 0){
                                                            //$('.iconsContainerBox, .brickImage').addClass('hidden');
                                                            $('.showIconsDiv .loadMoreIconsV2').remove();
                                                           // debugger;
                                                        }                                                        
							return false;
						}
						if (res.nxt_search == 1 && res.more_icons == 0 && version == 'v4') {
                                                    $('.showIconsDiv .loadMoreIconsV2').remove();
                                                }
						if (obj.objIconPage == 1) {
							$('.iconsImages, .iconsHint').remove();
							//obj.nextIconSearch = true;
						}
						if(res.nxt_search == 1 || res.more_icons == 0){
                                                    obj.nextIconSearch = false;
                                                }
						$('.iconBlank, .startIcoSection').addClass('hidden');
						$('.iconsContainerBox, .brickImage').removeClass('hidden');
                                                if(version == 'v4'){
                                                    $('.brickImage').addClass('hidden');
                                                }
						$('.flipIconTag').addClass('hidden');
                                                if(version == 'v4' && obj.objIconPage == 1  && typeof obj.getSession('currPage') != 'undefined' && obj.getSession('currPage') == '5'){
                                                    
                                                    $rec_cls = "";
                                                    if(is_recommended_fetch){
                                                        $rec_cls = "disabled active";
                                                    }

                                                    if(obj.getSession('extraIndustry') != ''){
                                                        $('.icons-hint').append('<a class=" icons-hint-button iconsHint recommend_tag '+$rec_cls+' "  data-recommended = "1" data-slug="'+iconSlugIndustry+'">Recommended</a>');
                                                        if(is_recommended_fetch){
                                                            $('.icons-hint').append('<a class="icons-hint-button iconsHint browse_cat_slug" data-slug="browse_categories" >Browse More Tags <i class="icon icon-plus"></i></a>');
                                                        }
                                                    

                                                    }
                                                }
						$.each(res.tags, function (key, val) {
							var inputValue = $.trim($('#tags').val());
							inputValue = inputValue.toLowerCase();
							var iconText = $.trim(val.name.toLowerCase());
							var activeClass = '';
                                                        var tagDisp = '';
							if (inputValue == iconText) {
								activeClass = 'active';
							}
                                                        if(typeof obj.getSession('currPage') != 'undefined' && obj.getSession('currPage') == '5'){
                                                            if(version == 'v4' && is_recommended_fetch){
                                                               tagDisp = 'hidden';   
                                                            }
                                                            if(iconSlugIndustry.toLowerCase() != val.slug){
                                                                //debugger;
                                                                if (val.name != "") {                                                            
                                                                    $('.icons-hint').append('<a class="icons-hint-button iconsHint '+tagDisp+' ' + activeClass + '" data-slug="' + val.slug + '">' + val.name + '</a>');
                                                            
                                                                }
                                                            }
                                                                                                                      
                                                        }
                                                        else{
                                                            if (val.name != "") {                                                            
								$('.icons-hint').append('<a class="icons-hint-button iconsHint '+tagDisp+' ' + activeClass + '" data-slug="' + val.slug + '">' + val.name + '</a>');
                                                            
                                                            }
                                                        }
							
						});
						
						$.each(res.icons, function (key, val) {
                                                    
							$('.iconsParentDiv').append('<a class="icons-images iconsImages" data-pngurl="' + val.url + '" data-svgurl="' + val.icon_url + '" data-id = "' + val.id + '"><img src="' + val.url + '" class="selectedIcons" /></a>');
						});
						$('.loadMoreIcons').hide();
						$('.searchIcon').html('Search');
                                                
                                                if(version == 'v4'){
                                                    if((res.nxt_search != 0 && res.more_icons == 1)){
                                                        //Remove existing load more icon button
                                                        $('.showIconsDiv .loadMoreIconsV2').remove();
                                                        $('.showIconsDiv').append('<div class="text-center"><button class="common-btn btn-white load-fewmore loadMoreIconsV2" data-more-icons ="'+res.more_icons +'" >Load A Few More</button></div>');
                                                        $('.showIconsDiv').off('scroll');
                                                        //debugger;
                                                    }
                                                    else{
                                                        $('.showIconsDiv').off('scroll');
                                                        if(obj.objIconPage == 1 && typeof obj.getSession('currPage') != 'undefined' && obj.getSession('currPage') == '5'){
                                                            var bb = $('.step_5 .iconsParentDiv').find('.iconsImages').length;
                                                            //debugger;
                                                            if($('.step_5 .iconsParentDiv').find('.iconsImages').length > 33 && screen.width >= 800){    
                                                                  $('.showIconsDiv .loadMoreIconsV2').remove();
                                                        $('.showIconsDiv').append('<div class="text-center"><button class="common-btn btn-white load-fewmore loadMoreIconsV2" data-more-icons ="'+res.more_icons +'" >Load A Few More</button></div>');
                                                                 //debugger;
                                                            }
                                                            else{
                                                                //debugger;
                                                                $('.step_5 .showIconsDiv .loadMoreIconsV2').addClass('hidden');
                                                                
                                                            }
                                                            
                                                        }
                                                        //$('.showIconsDiv .loadMoreIconsV2').remove();
                                                    }
                                                    //hide old
                                                    if(obj.objIconPage == 1 && typeof obj.getSession('currPage') != 'undefined' && obj.getSession('currPage') == '5'){
                                                        
                                                        if($('.iconsParentDiv').find('.iconsImages').length > 33 && screen.width >= 800){                                                         
                                                            $('.iconsParentDiv .iconsImages:gt('+32+')').addClass('hidden');
                                                            //debugger;
                                                        }
                                                        
                                                    }
                                                    
                                                    
                                                    
                                                }
                                                
                                                
					}
				});
			},
			
			// for getting variation of monogram 
			obj.getMonogramVariations = function () {
				
				var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
				var monogram = $('.editMonogramText').val();
				var limit = 10;
				loadMoreStart++;
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'monograms', start: loadMoreStart },
					async: true,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							
							var fontList = json.monograms;
							
							var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
							var generateType = "old";
							if (logoTemp.generate.templatePath.isMono == 0) {
								generateType = "new";
							}
							var type = 'icon';
							var i = 0;
							var j = (loadMoreStart - 1) * limit;
							if (loadMoreStart == 1) {
								lEditor.logoTempArr = [];
								lEditor.logoSlider('final', 1);
							}
							
							var fontListLength = fontList.length;
							$('.load--more--class').remove();
							if (fontListLength == 0) {
								return false;
							}
							
							
							$.each(fontList, function (k, v) {
								
								opentype.load(v.font_link, function (err, font) {
									try {
										if (err) {
											alert('Font could not be loaded: ' + v.font_link + ' -- ' + err);
										} else {
											if (generateType == "old") {
											} else {
												var isMono = 1;
												var isIcon = 0;
												var isFrame = 0;
												var isIconFrame = 0;
												var isEqual = 0;
												if (typeof logoTemp.generate.templatePath.isFrame !== "undefined") {
													isFrame = logoTemp.generate.templatePath.isFrame;
												}
												
												if (typeof logoTemp.generate.templatePath.isIconFrame !== "undefined") {
													isIconFrame = logoTemp.generate.templatePath.isIconFrame;
												}
												if (typeof logoTemp.generate.templatePath.isEqual !== "undefined") {
													isEqual = logoTemp.generate.templatePath.isEqual;
												}
												var templates = getTemplatesByType(0, isIcon, isMono, isFrame, isIconFrame, isEqual);
												logoTemp.generate.templatePath = templates[0];
											}
											var icon = font.getPath(monogram, 0, 0, 72);
											logoTemp.generate.iconPath = icon.toSVG();
											
											var idKey = logoMakerFunction.genRandomId();
											logoTemp.generate.idKey = idKey;
											//	if(currObj.generate.templatePath.isFrame==1){
											logoTemp.generate.templatePath.frameType = currLogo.generate.templatePath.frameType;
											logoTemp.generate.templatePath.frameOverlap = currLogo.generate.templatePath.frameOverlap;
											logoTemp.generate.fontName = v.font_link;
											//	}
											if (generateType == "old") {
												var returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
												logoTemp.generate = returnObj.logoObj;
												returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, 'containerBody', idKey);
											} else {
												var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, idKey);
											}
											logoTemp.generate = returnObj.logoObj;
											currObj = updateCurrLogoObject(logoTemp);
											
											lEditor.logoTempArr[j] = JSON.parse(JSON.stringify(currObj));
											
											slickElement = '<div class="logos--boxes"><div class="logo--slides"><div class="logoSlide-overlay  gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="monogram-update" data-id="' + (j++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + currObj.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
											$(".finalogoSlider").append(slickElement);
											dh_utility_common.changeBg();
											i++;
											if (json.pagination == 1 && i == fontListLength) {
												
												$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreMonograms load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
											}
										}
										
									} catch (e) {
									}
								});
							});
							
						}
					}
				});
			},
			
			// using for NOUN API 
			obj.ajaxEditIconsResponse = function (iconSlug) {
				//
				
				var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
                                var offset = 0;
				var limit = 6;
				if (typeof iconSlug === "undefined") {
					iconSlug = obj.getSession('iconValue');
				}
				if (obj.objIconPage == 1) {
					
				}
				var i = 0;
				loadMoreStart++;
				if (loadMoreStart == 1) {
					lEditor.logoTempArr = [];
					lEditor.logoSlider('final', 1);
					$('.editSearchButton').html('<img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" />');
				}
                                else{
                                    limit = loadMoreStart * limit;
                                }
				var j = (loadMoreStart - 1) * limit;
				jqXHR = $.ajax({
					url: DH.baseURL + '/dh_ajax.php',
					type: 'POST',
					data: { action: 'api', action_type : 'icon_tags',type: 'editor', slug: iconSlug, offset : offset,limit : limit },
					dataType: "json",
					beforeSend: function () {
						
					},
					success: function (res) {
						$('.editSearchButton').html('Search');
						if (loadMoreStart == 1) {
							if (res.icons.length == 0) {
								$('.editSearchButton').html('Search');
								$('.finalogoSlider').html('<div class="result-option noResultFound text-center">No Result Found.</div>');
								return false;
							}
						}
						if (res.status == 0) {
							return false;
						}
						$('.iconBlank').addClass('hidden');
						$.each(res.tags, function (key, val) {
							var inputValue = $.trim($('#tags').val());
							inputValue = inputValue.toLowerCase();
							var iconText = $.trim(val.name.toLowerCase());
							var activeClass = '';
							if (inputValue == iconText) {
								activeClass = 'active';
							}
							if (val.name != "") {
								$('.icons-hint').append('<a class="icons-hint-button iconsHint ' + activeClass + '" data-slug="' + val.slug + '">' + val.name + '</a>');
							}
						});
						var svgUrls = [];
						
						$.each(res.icons, function (key, val) {
							svgUrls.push(val.icon_url);
						});
						var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
						var generateType = "old";
						if (logoTemp.generate.templatePath.isIcon == 0) {
							generateType = "new";
						}
						var type = 'icon';
						var iconsLength = svgUrls.length;
						$('.noResultFound').remove();
						if (iconsLength == 0) {
							return false;
						}
						$('.load--more--class').remove();
						jqXHR1 = $.ajax({
							url: DH.baseURL + '/dh_ajax.php',
							type: 'POST',
							data: { action: 'svg', 'icons': svgUrls },
							async: false,
							success: function (json) {
								var json = JSON.parse(json);
								$.each(json.icons, function (k, v) {
									logoTemp.generate.iconPath = v;
									var idKey = logoMakerFunction.genRandomId();
									logoTemp.generate.idKey = idKey;
									if (generateType == "old") {
										var returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
									} else {
										var isIcon = 1;
										var isMono = 0;
										var isFrame = 0;
										var isIconFrame = 0;
										var isEqual = 0;
										if (typeof logoTemp.generate.templatePath.isFrame !== "undefined") {
											isFrame = logoTemp.generate.templatePath.isFrame;
										}
										if (typeof logoTemp.generate.templatePath.isIconFrame !== "undefined") {
											isIconFrame = logoTemp.generate.templatePath.isIconFrame;
										}
										if (typeof logoTemp.generate.templatePath.isEqual !== "undefined") {
											isEqual = logoTemp.generate.templatePath.isEqual;
										}
										var templates = getTemplatesByType(0, isIcon, isMono, isFrame, isIconFrame, isEqual);
										logoTemp.generate.templatePath = templates[0];
										logoTemp.generate.templatePath.frameType = currLogo.generate.templatePath.frameType;
										logoTemp.generate.templatePath.frameOverlap = currLogo.generate.templatePath.frameOverlap;
										var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, idKey);
									}
									
									logoTemp.generate = returnObj.logoObj;
									currObj = updateCurrLogoObject(logoTemp);
									obj.logoTempArr[j] = JSON.parse(JSON.stringify(currObj));
									slickElement = '<div class="logos--boxes"><div class="item logo--slides logoSlides" style="background-color:' + currObj.generate.bgColor + ';"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="icon" data-id="' + (j++) + '"><span>Update to this</span></a></div><div class="svg--slide"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
									$(".finalogoSlider").append(slickElement);
									dh_utility_common.changeBg();
									i++;
									if (i % limit == 0 && obj.nextIconSearch == true) {
										$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreEditorIcons load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
									}
									
									$('.finaLogoInner').html('');
								});
								
								
								
							}
						});
						
						$('.editSearchButton').html('Search');
					}
				});
				
				
			}
			
			// using for NOUN API  
			obj.selectedIcons = function (objIcon) {
				if (obj.sampleIconArr.containObject(objIcon)) {
					return false;
				}
				if ($.inArray(objIcon, obj.sampleIconArr) < 0) {
					for (var i = 0; i < 5; i++) {
						if (typeof obj.sampleIconArr[i] === 'undefined' || obj.sampleIconArr[i].pngurl == null) {
							obj.sampleIconArr[i] = objIcon;
							break;
						}
					}
				}
				return obj.sampleIconArr;
			}
			
			// using for NOUN API 
			obj.addSelectedIcon = function () {
				var boxLength = 0;
				var isCountFive = true;
				
				$('.symbol-container .iconContainerBoxes').html('');
				$('.symbol-container .iconEditContainerBoxes').html('');
				for (var i = 0, length = obj.sampleIconArr.length; i < length; i++) {
					boxLength = 1;
					$('.symbol-container .iconContainerBoxes[data-containerbox="' + (i + 1) + '"]').html('<img src="' + obj.sampleIconArr[i].pngurl + '" /><span class="delete-icon"><img class="icon-remove" src="' + DH.getAssetImgUrl('logo-maker/close.svg') + '"></span>');
					$('.symbol-container .iconEditContainerBoxes[data-containerbox="' + (i + 1) + '"]').html('<img src="' + obj.sampleIconArr[i].pngurl + '" /><span class="delete-icon" data-placement="bottom"><img class="icon-remove" src="' + DH.getAssetImgUrl('logo-maker/close.svg') + '"></span>');
				}
				
				if (obj.sampleIconArr.length == 5) {
					$('.iconSection, .editSelectionContainer').append('<div class="hide--icons"><span>You can select upto 5 symbols. Please remove selected symbols from above if you want to add more.</span></div>');
					$('.iconSection').css('box-shadow', 'none');
				}
				obj.setSession('sampleIcon', JSON.stringify({ "si": obj.sampleIconArr }));
				$('.symbol-section .symbol-text')[obj.sampleIconArr.length > 0 ? 'hide' : 'show']();
				$('.symbol-section .icons-container')[obj.sampleIconArr.length > 0 ? 'show' : 'hide']();
				obj.skipBtn(boxLength);
			}
			
			// using for NOUN API 
			obj.removeSelectedIcon = function (i) {
				if (obj.sampleIconArr[i]) {
					var iconId = obj.sampleIconArr[i].id;
					$('.showIconsDiv [data-id="' + iconId + '"]').removeClass('active');
					$('.editShowIconsDiv [data-id="' + iconId + '"]').removeClass('active');
					obj.sampleIconArr.splice(i, 1);
					obj.setSession('sampleIcon', JSON.stringify({ "si": obj.sampleIconArr }));
					$('.hide--icons').remove();
				}
			}
			
			// using for NOUN API 
			obj.getSliderDataIcons = function (callback) {
				obj.sliderData.icons = [];
				var icons = JSON.parse(obj.getSession('sampleIcon'));
				
				if (typeof icons === 'undefined' || icons == null || icons.si === "") {
					icons = { "si": [] };
					sessionStorage.setItem('sampleIcon', icons);
					// return;
				}
				var svgUrls = [];
				obj.sliderData.icons = [];
				
				$.each(icons.si, function (k, v) {
					svgUrls.push(v.svgurl);
				});
				jqXHR = $.ajax({
					url: DH.baseURL + '/dh_ajax.php',
					type: 'POST',
					data: { action: 'svg', 'icons': svgUrls },
					//async: false,
					success: function (json) {
						var json = JSON.parse(json);
						$.each(json.icons, function (k, v) {
							obj.sliderData.icons.push(v);
						});
						callback();
					}
				});
			}
			
			// for setting default Logo 	
			obj.setDefaultLogo = function (object, generate) {
				var currLogo = JSON.parse(obj.getSession('currentLogo'));
				$.each(object, function (k, v) {
					currLogo[k] = object[k];
				});
				$.each(generate, function (k, v) {
					currLogo.generate[k] = generate[k];
				});
				
				obj.currentLogo = currLogo;
				obj.setSession('currentLogo', JSON.stringify(currLogo));
				
			}
			
			// for lgoo slider ( initially use owl now removed
			obj.logoSlider = function (type, isNew) {
				$(".sliderContainer").html('');
				if (isNew == 1) {
					$(".finalogoSlider").html('');
				}
				if (isNew == 1) {
					if (type == "final") {
						$(".finalogoSlider").html('<div class="owl-carousel logoSlider logo--slider owl-theme"></div>');
					} else if (type == "step6") {
						$(".sliderContainer").html('<div class="owl-carousel logoSlider logo--slider owl-theme"></div>');
					}
				}
			}
			obj.validateJSON = (currentJSON) => {
				
				var tempJSON = JSON.parse(JSON.stringify(currentJSON));
				if (tempJSON.generate.iconFramePath == "") {
					tempJSON.generate.iconFrameColor = '';
					tempJSON.generate.iconFrameGradient = '';
				}
				if (tempJSON.generate.iconPath == "") {
					tempJSON.generate.iconColor = '';
					tempJSON.generate.iconGradient = '';
					tempJSON.generate.iconFrameColor = '';
					tempJSON.generate.iconFrameGradient = '';
					
				}
				if (tempJSON.generate.framePath == "") {
					tempJSON.generate.frameColor = '';
					tempJSON.generate.frameGradient = '';
				}
				if (tempJSON.generate.sloganPath == '<path d=""/>') {
					tempJSON.generate.sloganTextColor = '';
					tempJSON.generate.sloganGradient = '';
				}
				if (tempJSON.generate.logoPath == '<path d="M 0 0 l 1 0" stroke="white" stroke-width="0" fill ="none" />') {
					tempJSON.generate.mainTextColor = '';
					tempJSON.generate.textGradient = '';
				}
				return tempJSON;
			}
			// for saving logo
			obj.saveDefaultLogo = function (key) {
				//debugger;
				var currLogo = obj.logoTempArr[key];
				obj.setSession('currentLogo', JSON.stringify(currLogo));
				obj.currentLogo = currLogo;
				var logoId = obj.getCurrentLogoId();
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'save', logo_id: logoId, 'curr_logo': obj.validateJSON(obj.currentLogo), 'svg_logo': logoMakerFunction.getFinalLogoTemplate(obj.currentLogo.generate),exceptions : editor_exceptions },
					async: false,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							obj.alertMessages('error', json.msg);
						} else {
							obj.alertMessages('success', json.msg);
							obj.setCurrentLogoId(json.data.logo_id);
						}
                                                clearException();
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
				
				
			}
			
			// gor getting svg of current logoo
			obj.getCurrentLogo = function () {
				var html = logoMakerFunction.getFinalLogoTemplate(obj.currentLogo.generate);
				$('.finaLogoInner').html('<div class="svg--slide" style="background-color:' + obj.currentLogo.generate.bgColor + '; "><div class="svg-slide--content svgSlideContent"><div class="water-mark-img"></div>' + html + '</div></div>');
				
				if (!(typeof obj.getSession('boundary') == "undefined" || obj.getSession('boundary') == null)) {
					var boundary = JSON.parse(obj.getSession('boundary'));
					$('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + boundary.width + 'px; height:' + boundary.height + 'px; border:1px solid lime; left:' + boundary.left + 'px; z-index:11; top:' + boundary.top + 'px"></div>');
					
				}
			}
			
			// for showing preiview page
			obj.previewLogo = function () {
				//$("html, body").animate({ scrollTop: 0 });
				var currLogo = JSON.parse(obj.getSession('currentLogo'));
				
				//var i = 0;
				if (currLogo != null) {
					$('.previewLogoBox, .cardBG').css({ 'background-color': currLogo.generate.bgColor });
					$('.bagSvgBG svg g').attr('fill', currLogo.generate.bgColor);
					$('.logoImages').each(function () {
						$(this).html(logoMakerFunction.getFinalLogoTemplate(currLogo.generate));
					});
					if (currLogo.generate.templatePath.frameType == 'filled') {
						$('.logoImages').removeClass('noFilled');
					}
					else {
						$('.logoImages').addClass('noFilled');
					}
				}
			}
			
			// for getting current logo id	
			obj.getCurrentLogoId = function () {
				return obj.getSession('currLogoId');
			},
			
			// for setting current logo id
			obj.setCurrentLogoId = function (logoId) {
				obj.setSession('currLogoId', logoId);
			},
			
			// function for showing logo colors in preview page	
			obj.previewColors = function () {
				
				var currLogo = JSON.parse(obj.getSession('currentLogo'));
				var objLen = 0;
				$('.previewColorsPlates').html('');
				$('.previewColorsPlates').append('<div class="palette-desc"><div class="box box2 shadow"><div class="palette-head">Color Palette</div><div class="palette-para">Included in premium</div></div></div>');
				var arr = {};
				
				if (currLogo != null) {
					if (currLogo.generate.templatePath.isIconFrame == 1) {
						arr.iconFrame = { head: 'Inner Container', color: currLogo.generate.iconFrameColor, gradientType: currLogo.generate.iconFrameGradient };
					}
					
					if (currLogo.generate.templatePath.isFrame == 1) {
						if (currLogo.generate.templatePath.frameType == "filled") {
							arr.frame = { head: 'Filled Container', color: currLogo.generate.frameFilledColor, gradientType: currLogo.generate.frameFilledGradient };
						} else {
							arr.frame = { head: 'Container', color: currLogo.generate.frameColor, gradientType: currLogo.generate.frameGradient };
						}
					}
					
					
					if (currLogo.generate.templatePath.isIcon == 1) {
						arr.icon = { head: 'Symbol', color: currLogo.generate.iconColor, gradientType: currLogo.generate.iconGradient };
					}
					if (currLogo.generate.templatePath.isMono == 1) {
						arr.mono = { head: 'Monogram', color: currLogo.generate.iconColor, gradientType: currLogo.generate.iconGradient };
					}
					
					if (currLogo.logoName != "") {
						arr.main = { head: 'Company Name', color: currLogo.generate.mainTextColor, gradientType: currLogo.generate.textGradient };
					}
					
					if (currLogo.sloganName != "") {
						arr.slogan = { head: 'Slogan', color: currLogo.generate.sloganTextColor, gradientType: currLogo.generate.sloganGradient };
					}
					
					arr.bg = { head: 'Background', color: currLogo.generate.bgColor, gradientType: '' };
					var colorPalette = {};
					var colorArr = [];
					var currColor = "";
					var i = j = k = 0;
					$.each(arr, function (k, v) {
						currColor = typeof v.gradientType == 'undefined' || v.gradientType == "" ? v.color : v.gradientType;
						if ($.inArray(currColor, colorArr) == -1) {
							colorArr.push(currColor);
						}
					});
					
					$.each(colorArr, function (k, v) {
						var ver = v;
						
						if (!gradientsArray[v]) {
							ver = v.substr(1);
						}
						colorPalette[ver] = [];
						$.each(arr, function (ke, ve) {
							
							currColor = typeof ve.gradientType == 'undefined' || ve.gradientType == "" ? ve.color : ve.gradientType;
							if (currColor == v) {
								colorPalette[ver].push('<span>' + ve.head + '</span>');
							}
						});
					});
					
					$.each(colorPalette, function (k, v) {
						if (gradientsArray[k]) {
							var colorObj = gradientsArray[k]
							var style = getGradientStyle(k);
							
							$('.previewColorsPlates').append('<div class="preview-color-container"><div class="preview-bg" style="background:' + style + '"></div><div class="preview-color--boxes"><div class="color--boxes-center"><p class="color--name">' + colorObj.name + '</p><p>' + v.join(', ') + '</p></div></div></div>');
						}
						else {
							$('.previewColorsPlates').append('<div class="preview-color-container"><div class="preview-bg" style="background-color:#' + k + ';"></div><div class="preview-color--boxes"><div class="color--boxes-center"><p class="color--name">#' + k + '</p><p>' + v.join(', ') + '</p></div></div></div>');
							
						}
					});
					if ($('.preview-color-container').length <= 4) {
						$('.preview-image-container-palete').addClass('mob-color-palete');
					} else {
						$('.preview-image-container-palete').removeClass('mob-color-palete');
					}
					
				}
				return colorPalette;
				
			}
			
			// for showing aler messages 	
			obj.alertMessages = function (type, msg) {
				var stripHeight = 0;
				if ($('.avail_offer').length > 0) {
					stripHeight = $('.avail_offer').height();
				}
				
				switch (type) {
					
					case 'success': {
						$('.step_7').append('<div class="commonNotification common-notification"><div class="spin circle notif notif-success"><div class="notify--text">' + msg + '</div></div></div>');
						break;
					}
					case 'error': {
						$('.step_7').append('<div class="commonNotification common-notification"><div class="spin circle notif notif-danger"><a href="javascript:;" class="iconCheck icons-check"> </a><div class="notify--text">' + msg + '</div></div></div>');
						break;
					}
					case 'warning': {
						$('.step_7').append('<div class="commonNotification common-notification"><div class="alert alert-warning text-left"><a href="javascript:;" class="iconCheck icons-check"> </a><div class="notify--text">' + msg + '</div></div></div>');
						break;
					}
				}
				setTimeout(function () { $('.commonNotification').addClass('active').css('top', stripHeight + 60 + "px"); }, 500);
				setTimeout(function () { $('.commonNotification .notif-success .notify--text').html('Saved'); }, 850);
				setTimeout(function () { $('.commonNotification').remove(); }, 3000);
			}
			
			return obj;
		})();
		
		
		//load the recent colors on the basis of user previous selections
		function loadRecentColors() {
			jqXHR = $.ajax({
				url: DH.baseURL + '/logoMakerAjax.php',
				type: 'GET',
				data: { action: 'recent_colors' },
				dataType: "json",
				success: function (res) {
					if (res.status == 1) {
						recentColors = res.data;
						refreshRecentColorBox();
					}
				}
			});
		}
		//save recent colors as user selects any color
		function saveRecentColor(color) {
			jqXHR = $.ajax({
				url: DH.baseURL + '/logoMakerAjax.php',
				type: 'GET',
				data: { action: 'save_recent_colors', color: color },
				dataType: "json"
			});
		}
		//// todo
		
		/* editor bottom strip js */
		
		$('.getCurrentLogo').click(function (e) {
			e.stopImmediatePropagation();
			if ($(this).parents('.currentLogoContainer').hasClass('active')) {
				return;
			} else {
				$('.logoTab').removeClass('active');
				$('[data-tab=".currentLogoTab"]').addClass('active');
				$('.logosTabBox').removeClass('tabActive');
				$('.currentLogoTab').addClass('tabActive');
			}
			$('body,html').css({ "overflow": "hidden", "height": "100%" });
			$(this).removeClass('getCurrentLogo');
			$('.currentLogoContainer').addClass('active');
			$('.closeCurrentLogo, .expandLogo').show();
			
			var returnObj = logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate);
			$('.innerlogo').html('<div class="svg--slide" style="background-color:' + lEditor.currentLogo.generate.bgColor + '; "><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit setCurrentLogoDiv"><span>Update to this</span></a></div><div class="svg-slide--content svgSlideContent"><div class="water-mark-img"></div>' + returnObj + '<div class="bgOutlineBox bg-outline-box"></div></div></div>');
			dh_utility_common.changeBg();
		});
		
		$('body').on('click', '.currentLogoContainer.active, .closeCurrentLogo, .expandLogo', function (e) {
			if ((!$(e.target).closest('.logosTabBox').length)) {
				$('body,html').css({ "overflow": "auto", "height": "auto" });
				$('.logoBottomDiv').addClass('getCurrentLogo');
				$(this).removeClass('active');
				$('.logosTabBox').removeClass('tabActive');
				$('.logoTab').removeClass('active');
				$('.logoTab:first').addClass('active');
				$('.closeCurrentLogo, .expandLogo').hide();
				$('.innerlogo').html('');
			}
		});
		
		
		$('.logoTab').click(function (e) {
			
			e.stopImmediatePropagation();
			var dataTarget = $(this).data('tab');
			if (dataTarget == ".shareTab") {
				$('.shareButton').trigger('click');
				return false;
			}
			
			if (dataTarget == ".savedLogoTab") {
				savedPagination = 0;
				$('.savedLogo').html('');
				getSavedLogoListing();
			}
			if (dataTarget == ".favoriteLogoTab") {
				favoritePagination = 0;
				$('.favoriteLogo').html('');
				getFavoriteLogoListing();
			}
			$('body,html').css({ "overflow": "hidden", "height": "100%" });
			$('.currentLogoContainer').addClass('active');
			$('.logoTab').removeClass('active');
			$(this).addClass('active');
			$('.closeCurrentLogo, .expandLogo').show();
			$('.logosTabBox').removeClass('tabActive');
			$(dataTarget).addClass('tabActive');
			var returnObj = logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate);
			$('.innerlogo').html('<div class="svg--slide" style="background-color:' + lEditor.currentLogo.generate.bgColor + '; "><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit setCurrentLogoDiv"><span>Update to this</span></a></div><div class="svg-slide--content svgSlideContent"><div class="water-mark-img"></div>' + returnObj + '<div class="bgOutlineBox bg-outline-box"></div></div></div>');
			dh_utility_common.changeBg();
		});
		
		$('.currentLogoContainer').on('click', '.setCurrentLogoDiv', function () {
			$('.currentLogoContainer').removeClass('active');
			$('.logoTab').removeClass('active');
			$('.logosTabBox').removeClass('tabActive');
			$('.menu_1 ul li').removeClass('active');
			$('.logoTab:first-child').addClass('active');
			$('.commonEditSection').addClass('hidden');
			lEditor.setSession('targetlink', 2);
			lEditor.setSession('defaultlink', 7);
			lEditor.setSession('parentlink', 'undefined');
			$('body').removeAttr('style');
			$('.closeCurrentLogo, .expandLogo').hide();
			lEditor.editLogoSteps();
			$('body,html').css({ "overflow": "auto", "height": "auto" });
		});
		
		$('.containerSection a.subMenu-42').click(function (e) {
			$(this).parent('li').removeClass('active');
			$(this).parent('li').addClass('hidden');
			$('.cancelFrameContainer').parent('li').removeClass('hidden');
			$(".containerOptions").addClass('active');
			$('.containerFrameSlider').removeClass('hidden');
		});
		
		
		// for checking frame available or not and set menu accordingly
		function checkFrame() {
			var currLogo = lEditor.currentLogo;
			var isFrame = currLogo.generate.templatePath.isFrame;
			
			if (isFrame == 0) {
				$('.subMenu-23, .subMenu-42').parent('li').addClass('hidden');
				$('.subMenu-24').text('Add Outer Container');
				$('.containerFrameSlider').addClass('hidden');
				$(".containerOptions").addClass('active');
				$('.cancelFrameContainer').parent('li').addClass('hidden');
				$('.subMenu-42').parents('ul').removeClass('flex');
				
			} else {
				$('.subMenu-24').text('Edit Outer Container');
				$('.containerFrameSlider').removeClass('hidden');
				$('.subMenu-23, .subMenu-42').parent('li').removeClass('hidden');
				$('.cancelFrameContainer').parent('li').addClass('hidden');
				$('.subMenu-42').parents('ul').addClass('flex');
				
				if ($(".containerOptions").hasClass('active')) {
					$('.subMenu-42').parent('li').addClass('hidden');
					$('.containerFrameSlider').addClass('hidden');
					$('.cancelFrameContainer').parent('li').removeClass('hidden');
					$('.subMenu-42').parents('ul').removeClass('flex');
				}
				$('.frameSizeSlider').removeClass('disabled');
				
			}
			
		}
		
		$('.containerSection a.subMenu-44').click(function (e) {
			$(this).parent('li').removeClass('active');
			$(this).parent('li').addClass('hidden');
			$('.cancelIconFrameContainer').parent('li').removeClass('hidden');
			$(".innerContainerOptions").addClass('active');
			$('.containerInnerFrameSlider').addClass('hidden');
		});
		
		// for checking icon frame available or not and set menu accordingly
		function checkIconFrame() {
			
			var currLogo = lEditor.currentLogo;
			var isIconFrame = currLogo.generate.templatePath.isIconFrame;
			
			if (isIconFrame == 0) {
				$('.subMenu-41, .subMenu-44').parent('li').addClass('hidden');
				$('.subMenu-40').text('Add Inner Container');
				$('.containerInnerFrameSlider').addClass('hidden');
				$(".innerContainerOptions").addClass('active');
				$('.cancelIconFrameContainer').parent('li').addClass('hidden');
				
			} else {
				$('.subMenu-40').text('Edit Inner Container');
				$('.containerInnerFrameSlider').removeClass('hidden');
				$('.subMenu-41, .subMenu-44').parent('li').removeClass('hidden');
				$('.cancelIconFrameContainer').parent('li').addClass('hidden');
				if ($(".innerContainerOptions").hasClass('active')) {
					$('.subMenu-44').parent('li').addClass('hidden');
					$('.containerInnerFrameSlider').addClass('hidden');
					$('.cancelIconFrameContainer').parent('li').removeClass('hidden');
				}
				$('.frameSizeSlider').removeClass('disabled');
				
			}
			
		}
		
		
		
		
		/////////////////////////////////
		// for editor menu 
		$('.common-nav li a').click(function (e) {
			var targetLink = $(this).data('target');
			var parentLink = $(this).data('parent');
			var dataType = $(this).data('type');
			lEditor.setSession('targetlink', targetLink);
			lEditor.setSession('parentlink', parentLink);
			lEditor.setSession('colorDataType', dataType);
			lEditor.showNav($(this));
			var defaultKeys = { 1: 1, 2: 7, 3: 12, 4: 17, 5: 0, 6: 0, 11: 0 };
			if (typeof lEditor.currentLogo.generate.templatePath.isMono != 'undefiend' && lEditor.currentLogo.generate.templatePath.isMono != null && lEditor.currentLogo.generate.templatePath.isMono == 1) {
				defaultKeys[5] = 32;
			}
			if (typeof lEditor.currentLogo.generate.templatePath.isIcon != 'undefiend' && lEditor.currentLogo.generate.templatePath.isIcon != null && lEditor.currentLogo.generate.templatePath.isIcon == 1) {
				defaultKeys[5] = 31;
			}
			lEditor.setSession('defaultlink', defaultKeys[targetLink]);
			
			lEditor.editLogoSteps();
			
		});
		
		
		
		
		// for edit monogram 
		$('.editMonogram').on('click', function () {
			if ($('.editMonogramText').val() == "") {
				//alert('Please fill monogram text');
				return;
			}
			
			loadMoreStart = 0;
			lEditor.setMonogramText($('.editMonogramText').val());
			lEditor.getMonogramVariations();
		});
		
		// function called on onload						
		lEditor.showStep();
		
		// for edit monogram 
		
		
		$('.icons-selection-container').on('click', '.iconsHint', function () {
                    //Added for version 2
                    if($(this).hasClass('browse_cat_slug')){
                        $('.iconsHint:not(.recommend_tag)').removeClass('hidden');
                        $(this).hide();
                        return;
                    }
                    
                    $('.icons-search-bar .error-text').hide();
                    var slug = $(this).data('slug');
                    var text = $(this).text();
                    if(text.toLowerCase() == 'recommended'){
                        text = slug.charAt(0).toUpperCase() + slug.slice(1);
                    }
                    $('#tags').val(text);
                    lEditor.objIconPage = 1;
                    lEditor.objIconSearch = slug;  
                    lEditor.setSession('iconValue', slug);
                    lEditor.ajaxIconsResponse(slug, lEditor.objIconPage);
		});
		
		$('body').on('click', '.startIcoTab', function (e) {
			var target = $(e.target);
			var slug = $(this).data('tag');
			var searchBtn = target.closest('.step-holder').find('.logo-search-form .searchIcon');
			
			$('.icons-search-bar .error-text').hide();
			$('.startIcoTab').addClass('disabled');
			$('#tags').addClass('active');
			$('#tags').focus().click().val(slug);
			lEditor.objIconSearch = "";
			searchBtn.trigger('click');
		});
		$('#tags').on('input', function () {
			if ($(this).val() == '' || $(this).val() == null) {
				$(this).removeClass('active');
			}
		});
		
		$('body').on('click', '.hintIcoTab', function (e) {
			var target = $(e.target);
			var slug = $(this).data('tag');
			if ($(window).width() < 991) {
				var searchBtn = target.closest('.mobile-selection').find('.logo-search-form .searchIcon');
				$('#mobile-icontags').addClass('active');
				$('#mobile-icontags').focus().click().val(slug);
			}
			else {
				var searchBtn = target.closest('.edit-strip').find('.logo-search-form .searchIcon');
				
				$('#icontags').addClass('active');
				$('#icontags').focus().click().val(slug);
			}
                        $(this).addClass('active');
			lEditor.objIconSearch = "";
			searchBtn.trigger('click');
		});
		
		$('#icontags, #mobile-icontags').on('input', function () {
			if ($(this).val() == '' || $(this).val() == null) {
				$(this).removeClass('active');
			}
		});
		
		$('.brickImage').click(function () {
			$(this).addClass('hidden');
			$('.flipIconTag').removeClass('hidden');
			$('.startIcoTab').removeClass('disabled');
			$('.iconsContainerBox').addClass('hidden');
			$('.startIcoSection').removeClass('hidden');
			$('.iconsImages').remove();
			$('#tags').removeClass('active');
			$('#tags').val('');
		});
		
		
		$('body').on('click', '.searchIcon', function (e) {                    
			var target = $(e.target);
                        
			var input = target.closest('.logo-search-form').find('input');
			//debugger;
                        lEditor.objIconSearch = "";
			lEditor.objIconPage = 1;
			if ($(input).val() == '') {
                            
				$('.error-text').show();
				$('.iconBlank').text('Type something above or pick a related term to see symbols');
			}
			var iconValue = $(input).val();
			lEditor.setSession('iconValue', iconValue);
			lEditor.iconsData(target);
		});
		
		
		$('body').on('click', '.editSearchButton', function (e) {
			loadMoreStart = 0;
			if ($('.tags').val() == '') {
				$('.error-text').show();
				$('.finalogoSlider').text('Type something above or pick a related term to see symbols');
			}
			lEditor.setSession('iconValue', $('.editTags').val());
			lEditor.editIconsData();
		});
		
		
		$('.tags').keyup(function (e) {
			if ($('.tags').val() != '') {
				$('.error-text').hide();
			}
		});
		
		$('body').on('click', '.iconContainerBoxes', function (e) {
			lEditor.removeSelectedIcon($(this).index());                        
			lEditor.addSelectedIcon();
			$('.step_6 .load-more-anim').addClass('fixed');
			$('.step_6 .load-more-anim .loadMoreGenerate').addClass('animate');
		});
		
		$('body').on('click', '.iconEditContainerBoxes', function (e) {
			lEditor.removeSelectedIcon($(this).index());
			lEditor.addSelectedIcon();
		});
		$('body').on('click', '.iconsImages', function (e) {
			var iconName = $(this).data();
			$(this).addClass('active');
			lEditor.selectedIcons(iconName);
			lEditor.addSelectedIcon();
			$('.step_6 .load-more-anim').addClass('fixed');
			$('.step_6 .load-more-anim .loadMoreGenerate').addClass('animate');
		});
		
		$('body').on('click', '.loadMoreIconsV2', function (e) {                    
			var target = $(e.target);                        
			//var input = target.closest('.logo-search-form').find('input');
                        //debugger;
                        if(typeof lEditor.getSession('currPage') != 'undefined' && lEditor.getSession('currPage') == '5'){
                           
                            if($('.iconsParentDiv .iconsImages.hidden').length){
                                $('.iconsParentDiv .iconsImages').removeClass('hidden');
                                if($(this).data('more-icons') == '0'){
                                    $(this).addClass('hidden');
                                }
                            }
                            else{
                                $('.showIconsDiv .loadMoreIconsV2').html('<div class="text-center"><div class="cssload-container"><div class="cssload-speeding-wheel"></div></div></div>');
                                lEditor.iconsData(target);
                            }
                        }
                        
		});
		/*=== Current Logo Data JS Start ====*/
		
		$('.step_6').on('click', '.iconEdit', function (e) {
			
			$('.step_6 .load-more-anim').addClass('hidden');
			if (DH.isLogged == 0 && DH.userId == 0) {
				userLoginPopup();
				$('body').addClass('logo-modal-unset');
				return;
			}
			editorClickObject = $(this);
			lEditor.currentLogo = {};
			
			lEditor.currentLogo = lEditor.logoTempArr[parseInt($(this).data('id'))];
			
			lEditor.currentStep = 7;
			sessionStorage.setItem("prevPage", 7);
			if (lEditor.currentLogo.generate && lEditor.currentLogo.generate.sloganFontObject != '') {
				lEditor.currentLogo.generate.sloganFontObject = '';
			}
			lEditor.setSession('currentLogo', JSON.stringify(lEditor.currentLogo));
			lEditor.setSession('currPage', lEditor.currentStep);
			var type = $(this).data('type');
			var curLogoId = $(this).attr('data-logo-id');
			
			jqXHR = $.ajax({
				url: DH.baseURL + '/logoMakerAjax.php',
				type: 'POST',
				beforeSend: function () {
					$('#loadere').show();
				},
				data: { action: 'save', logo_id: curLogoId, 'curr_logo': lEditor.validateJSON(lEditor.currentLogo), 'svg_logo': logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate),exceptions : editor_exceptions },
				success: function (json) {
					$('#loadere').hide();
					json = $.parseJSON(json);
					if (json.status == 0) {
					} else {
						lEditor.showStep();
						$('.step_6 .logoSlider').trigger("destroy.owl.carousel");
						$('.step_6 .owl-carousel').remove();
						lEditor.setCurrentLogoId(json.data.logo_id);
						if (type == 'purchase') {
							window.location.href = DH.baseURL + '/tools/logo-maker/payment?logoid=' + json.data.logo_id * 11 + "" + qrStr;
						} else {
							window.location.href = DH.baseURL + '/tools/logo-maker?editor=' + json.data.logo_id * 11 + "" + qrStr;
						}
					}
                                        clearException();
				},
				error: function (jqXHR, textStatus, errorThrown) {
					//alert(errorThrown);
				}
				
			});
			
		});
		
		
		
		/*=== Current Logo Data JS End ====*/
		
		$('.flipIconTag').click(function () {
			getIconTagListing(0);
		});
		
		
		// $('body').keypress(function (e) {
		// 	var key = e.which;
		// 	if (!$(this).hasClass('modal-open')) {
		
		// 		if (key == 13) {
		// 			if (lEditor.currentStep == 6) {
		// 				return false;
		// 			}
		// 			if (lEditor.currentStep == 7) {
		// 				//@TODO confirm with monogram generation issue with Varun sir
		// 				//$('.editSearchButton, .editMonogram').trigger('click');
		// 				return false;
		// 			}
		// 			sessionData();
		// 		}
		// 	}
		
		// });
		$('body').on('keypress', '#icontags, #tags', '#mobile-icontags', function (e) {
			const target = $(e.target);
			const key = e.which;
			const button = target.closest('.logo-search-form').find('button');
			
			if (key == 13) {
				button.trigger('click');
			}
		});
		
		$('#editLogoNameText').on('keyup', function (e) {
                    //debugger;
			var key = e.which;
			
			if (key == 13) {
				e.stopPropagation();
				return;
			}
                        if($(this).val().trim() == ''){
                            $(this).val(lEditor.getSession('logoname'));
                            return false;
                        }
			lEditor.setSession('logoname', $(this).val().trim());
			clearTimeout(editorTimer);
			editorTimer = setTimeout(function () {
				lEditor.modifyLogoProperties("logoname");
			}, 1500);
		});
		
		$('#editSloganNameText').on('keyup', function (e) {
			var key = e.which;
			
			if (key == 13) {
				e.stopPropagation();
				return;
			}
			lEditor.setSession('sloganText', $(this).val());
			clearTimeout(editorTimer);
			editorTimer = setTimeout(function () {
				lEditor.modifyLogoProperties("sloganText");
			}, 1500);
		});
		
		$('.color-selection.colorContainer .system-color').click(function (e) {
			const target = $(e.target);
			const colorId = $(target).attr('data-samplecolorid');
			let selectedColors = JSON.parse(lEditor.getSession('sampleColor'));
			const index = selectedColors.findIndex(item => item.samplecolorid == colorId);
			const colorBoxes = $('.color-selection.colorContainer .color');
			
			if (index > -1) {
				selectedColors.splice(index, 1);
				target.removeClass('active');
			}
			else {
				const multiColorIndex = selectedColors.findIndex(item => item.samplecolorid == -1);
				
				if (colorId == -1 || multiColorIndex > -1) {
					selectedColors = [{ samplecolorid: colorId }];
				}
				else {
					selectedColors.unshift({ samplecolorid: colorId });
				}
			}
			lEditor.setSession('sampleColor', JSON.stringify(selectedColors));
			
			
			colorBoxes.removeClass('active');
			lEditor.refreshSelectedColorBox();
			$('.step_6 .load-more-anim').addClass('fixed');
			$('.step_6 .load-more-anim .loadMoreGenerate').addClass('animate');
		});
		
		$('body').on('click', '.color-section .icons-container-box.colorContainerBoxes .delete-icon', function (e) {
			const target = $(e.target);
			const selectedColors = JSON.parse(lEditor.getSession('sampleColor'));
			const sampleColorId = target.closest('.colorContainerBoxes').attr('data-samplecolorid');
			
			if (sampleColorId) {
				const index = selectedColors.findIndex(item => item.samplecolorid == sampleColorId);
				const systemColor = $('.color-selection.colorContainer .system-color[data-samplecolorid="' + sampleColorId + '"]');
				
				selectedColors.splice(index, 1);
				lEditor.setSession('sampleColor', JSON.stringify(selectedColors));
				lEditor.refreshSelectedColorBox();
				target.removeClass('active');
				systemColor.removeClass('active');
				$('.step_6 .load-more-anim').addClass('fixed');
				$('.step_6 .load-more-anim .loadMoreGenerate').addClass('animate');
			}
		});
		
		
		
		$('.getStarted').click(function (e) {
                    
			sessionData();
			var lPage = lEditor.getSession('currPage');
			$("html, body").animate({ scrollTop: 0 });
			$(this).trigger("blur");
		});
		
		$('.backButton').click(function (e) {
			var currentPage = parseInt(lEditor.getSession('currPage'));
			lEditor.currentStep--;
			if (lEditor.currentStep == 6) {
				window.location.href = $(this).attr('data-link');
				return
			}
			lEditor.setSession('currPage', lEditor.currentStep);
			$("html, body").animate({ scrollTop: 0 });
			$('.hide--icons').remove();
			$('#tags').val('');
			$('.commonFont a').removeClass('active');
			$('.startIcoSection').removeClass('hidden');
			$('.startIcoTab').removeClass('disabled');
			$('.loadMoreIcons, .iconsContainerBox, .brickImage').addClass('hidden');
			$('.flipIconTag').removeClass('hidden');
			lEditor.showStep();
		});
		
		$('.btnSkip').click(function (e) {
			var currentPage = parseInt(lEditor.getSession('currPage'));
			lEditor.currentStep++;
			lEditor.setSession('currPage', lEditor.currentStep);
			if (currentPage == 3) {
				lEditor.setSession('sampleColor', JSON.stringify([]));
			} else if (currentPage == 5) {
				lEditor.sampleIconArr = [];
				lEditor.setSession('sampleIcon', JSON.stringify({ "si": '' }));
			}
			$("html, body").animate({ scrollTop: 0 });
			lEditor.showStep();
		});
		
		$('.startButton').click(function (e) {
			lEditor.startNew();
			
		});
		$('.editCompanyName').val(lEditor.getSession('logoname'));
		$('.editSloganName').val(lEditor.getSession('sloganText'));
		
		/* Step Two JS */
		
		$('body').on('click', '.le-imageLayout', function () {
			
			var boxLength = lEditor.imgLength();
			if (boxLength == 0) {
				$('.footer-strip-content .progress').css('float', 'none');
				$('.footer-strip-content .progress').addClass('mob-progress');
			}
			switch (lEditor.currentStep) {
				case 2: {
					lEditor.progressBar(boxLength);
					break;
				}
				case 5:
				case 3: {
					lEditor.skipBtn(boxLength);
					break;
				}
			}
			
		});
		
		
		
		$('.editShowIconsDiv').scroll(function (e) {
			var element = e.target;
			if ((element.scrollHeight - element.scrollTop) === element.clientHeight) {
				if (lEditor.nextIconSearch == true) {
					lEditor.editIconsData();
				}
			}
		});
		
		$('.showIconsDiv').scroll(function (e) {
			var element = e.target;
			if ((element.scrollHeight - element.scrollTop) === element.clientHeight) {
				if (lEditor.nextIconSearch == true) {
					lEditor.iconsData($(element));
				}
			}
		});
		
		
		
		// company name slider code 
		$('.logoTextSlider').slider({
			value: getSliderValue('logoTextSlider'),
			min: 10,
			max: 100,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				updateLogoText('logo', '', ui.value, getSliderValue('logoLetterSpacing'), 'slider');
				lEditor.setSession('logoTextSlider', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				constantVars.SPACING.logoTextSlider = ui.value;
				lEditor.currentLogo.generate.logoTextSlider = ui.value;
			}
		});
		
		// slogan name slider code	
		$('.sloganTextSize').slider({
			value: getSliderValue('sloganTextSize'),
			min: 10,
			max: 100,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				updateLogoText('slogan', '', ui.value, getSliderValue('sloganLetterSpacing'), 'slider');
				lEditor.setSession('sloganTextSize', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				constantVars.SPACING.sloganTextSize = ui.value;
				lEditor.currentLogo.generate.sloganTextSize = ui.value;
			}
		});
		
		// getting slider value
		function getSliderValue(key) {
			
			var value = constantVars.SPACING[key];
			if (key != "sloganLetterSpacing" && key != "logoLetterSpacing" && key != "logoTextSlider" && key != "sloganTextSize" && key != "logoSizeSlider") {
				if (!(lEditor.getSession(key) == null || lEditor.getSession(key) == 'undefined')) {
					value = lEditor.getSession(key);
				}
			}
			$('.' + key).parents('.rangeSlider').find('.rangeSliderValue').val(value);
			return value;
		}
		
		// getting updated slider value
		function getSliderUpdatedValue(key) {
			
			var value = constantVars.SPACING[key];
			if (!(lEditor.getSession(key) == null || lEditor.getSession(key) == 'undefined')) {
				value = lEditor.getSession(key);
			}
			if (key == "logoSizeSlider") {
				value = lEditor.currentLogo.generate.logoSizeSlider;
			}
			return value;
		}
		
		// company name spacing slider code 
		$('.logoLetterSpacing').slider({
			value: getSliderValue('logoLetterSpacing'),
			min: 1,
			step: 0.5,
			max: 10,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				updateLogoText('logo', '', getSliderValue('logoTextSlider'), ui.value, 'slider');
				lEditor.setSession('logoLetterSpacing', ui.value);
				constantVars.SPACING.logoLetterSpacing = ui.value;
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				lEditor.currentLogo.generate.logoLetterSpacing = ui.value;
			}
		});
		
		// slogan spacing slider code 	
		$('.sloganLetterSpacing').slider({
			value: getSliderValue('sloganLetterSpacing'),
			min: -10,
			max: 100,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				lEditor.setSession('sloganLetterSpacing', ui.value);
				constantVars.SPACING.sloganLetterSpacing = ui.value;
				updateLogoText('slogan', '', getSliderValue('sloganTextSize'), ui.value, 'slider');
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				lEditor.currentLogo.generate.sloganLetterSpacing = ui.value;
			}
		});
		
		/*==== Common Setting JS ====*/
		// logo size slider 
		$('.logoSizeSlider').slider({
			value: getSliderValue('logoSizeSlider'),
			min: 25,
			max: 300,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				var currVal = getSliderUpdatedValue('logoSizeSlider');
				lEditor.setSession('logoSizeSlider', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				var updatedVal = ui.value; // - lEditor.currentLogo.generate.logoSizeSlider;
				
				var currLogo = lEditor.currentLogo;
				currLogo = updateCurrLogoObject(currLogo);
				
				var obj = updateCurrentIconSize($('.finaLogoInner .sampleIcons_1'), currLogo.generate.templatePath, updatedVal, 'icon');
				
				currLogo.generate.templatePath.updates.icon.x = obj.x;
				currLogo.generate.templatePath.updates.icon.y = obj.y;
				currLogo.generate.templatePath.updates.icon.scale = obj.scale;
				
				lEditor.setSession('logoSizeSlider', ui.value);
				lEditor.setSession('iconVsTextSlider', ui.value);
				constantVars.SPACING.logoSizeSlider = ui.value;
				currLogo.generate.logoSizeSlider = ui.value;
				currLogo = updateCurrLogoObject(currLogo);
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				//  var currLogo = lEditor.currentLogo;
				
			}
		});
		
		// calculation of update current icon size 
		function updateCurrentIconSize(object, dimension, size, type) {
			var bbox = object.get(0).getBBox();
			var x = dimension[type].x;
			var y = dimension[type].y
			var obj = {};
			size = Number(size);
			dimension[type].scale = Number(dimension[type].scale);
			
			
			var scale = Number( /* dimension[type].scale + */ size / (bbox.width>bbox.height?bbox.width:bbox.height));  // * dimension[type].scale * dimension['containerBody'].scale * dimension['logoContainer'].scale ;
			
			if (dimension[type].xType == 'left') {
				x = Number((constantVars.SVGWIDTH * dimension[type].widthStart / 100) / scale - bbox.x * scale);
			}
			if (dimension[type].xType == 'center') {
				x = Number(((constantVars.SVGWIDTH * dimension[type].widthPercent / 100) + (constantVars.SVGWIDTH * dimension[type].widthStart / 100)) / (2 * scale) - ((bbox.width) / 2) - bbox.x);
			}
			if (dimension[type].xType == 'right') {
				x = Number((constantVars.SVGWIDTH * dimension[type].widthStart / 100) + (constantVars.SVGWIDTH * dimension[type].widthPercent / 100) / scale - bbox.width - bbox.x);
			}
			
			
			if (dimension[type].yType == 'up') {
				y = Number(((constantVars.SVGHEIGHT * dimension[type].heightStart / 100)) / scale - bbox.y);
			}
			if (dimension[type].yType == 'center') {
				y = Number((constantVars.SVGHEIGHT * dimension[type].heightStart / 100 + constantVars.SVGHEIGHT * dimension[type].heightPercent / 100) / (2 * scale) - bbox.height / 2 - bbox.y);
			}
			if (dimension[type].yType == 'down') {
				y = Number(((constantVars.SVGHEIGHT * dimension[type].heightStart / 100) + (constantVars.SVGHEIGHT * dimension[type].heightPercent / 100)) / scale - (bbox.height) - bbox.y);
			}
			
			
			
			object.attr('transform', "scale(" + scale + ") translate(" + x + "," + y + ")");
			obj = { 'x': x, 'y': y, 'scale': scale };
			return obj;
		}
		
		// slider for ican and text differences 	
		$('.iconVsTextSlider').slider({
			value: getSliderValue('iconVsTextSlider'),
			min: 25,
			max: 300,
			stop: saveSliderData,
			slide: function (event, ui) {
				
				clearOutlineBox();
				clearOutline();
				var currLogo = lEditor.currentLogo;
				currLogo = updateCurrLogoObject(currLogo);
				
				
				var obj = updateCurrentLogoSize($('.sampleIcons_1'), currLogo.generate.templatePath, ui.value, 'icon');
				currLogo.generate.templatePath.updates.icon.x = obj.x;
				currLogo.generate.templatePath.updates.icon.y = obj.y;
				currLogo.generate.templatePath.updates.icon.scale = obj.scale;
				
				
				var obj = updateCurrentLogoSize($('.sampleTexts_1'), currLogo.generate.templatePath, 300 - ui.value, 'textAndSlogan');
				currLogo.generate.templatePath.updates.textAndSlogan.x = obj.x;
				currLogo.generate.templatePath.updates.textAndSlogan.y = obj.y;
				currLogo.generate.templatePath.updates.textAndSlogan.scale = obj.scale;
				
				lEditor.setSession('logoSizeSlider', ui.value);
				lEditor.setSession('iconVsTextSlider', ui.value);
				
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				currLogo = updateCurrLogoObject(currLogo);
				
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				var currLogo = lEditor.currentLogo;
				
			}
		});
		
		
		
		// slider for icon distance ( up down left right )
		$('.iconDistanceSlider').slider({
			value: getSliderValue('iconDistanceSlider'),
			min: 0,
			max: 100,
			stop: saveSliderData,
			slide: function (event, ui) {
				
				clearOutlineBox();
				clearOutline();
				var currVal = getSliderUpdatedValue('iconDistanceSlider');
				lEditor.setSession('iconDistanceSlider', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				var updatedVal = ui.value - currVal;
				
				var currLogo = lEditor.currentLogo;
				if (currLogo.generate.templatePath.tempType == "center") {
					currLogo.generate.templatePath.updates.textAndSlogan.y = parseFloat(currLogo.generate.templatePath.textAndSlogan.y) + parseFloat(updatedVal);
					currLogo.generate.templatePath.updates.iconFrameBox.y = parseFloat(currLogo.generate.templatePath.iconFrameBox.y) - parseFloat(updatedVal);
				}
				if (currLogo.generate.templatePath.tempType == "left") {
					currLogo.generate.templatePath.updates.textAndSlogan.x = parseFloat(currLogo.generate.templatePath.textAndSlogan.x) + parseFloat(updatedVal);
					currLogo.generate.templatePath.updates.iconFrameBox.x = parseFloat(currLogo.generate.templatePath.iconFrameBox.x) - parseFloat(updatedVal);
				}
				if (currLogo.generate.templatePath.tempType == "right") {
					currLogo.generate.templatePath.updates.textAndSlogan.x = parseFloat(currLogo.generate.templatePath.textAndSlogan.x) + parseFloat(updatedVal);
					currLogo.generate.templatePath.updates.iconFrameBox.x = parseFloat(currLogo.generate.templatePath.iconFrameBox.x) - parseFloat(updatedVal);
				}
				
				if (currLogo.generate.templatePath.tempType == "right") {
					currLogo.generate.templatePath.updates.textAndSlogan.x = parseFloat(currLogo.generate.templatePath.textAndSlogan.x) + parseFloat(updatedVal);
					currLogo.generate.templatePath.updates.iconFrameBox.x = parseFloat(currLogo.generate.templatePath.iconFrameBox.x) - parseFloat(updatedVal);
				}
				
				currLogo = updateCurrLogoObject(currLogo);
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				var currLogo = lEditor.currentLogo;
				$('.sampleTexts_1').attr('transform', "scale(" + currLogo.generate.templatePath.textAndSlogan.scale + ") translate(" + currLogo.generate.templatePath.textAndSlogan.x + "," + currLogo.generate.templatePath.textAndSlogan.y + ")");
				$('.sampleIconBox').attr('transform', "scale(" + currLogo.generate.templatePath.iconFrameBox.scale + ") translate(" + currLogo.generate.templatePath.iconFrameBox.x + "," + currLogo.generate.templatePath.iconFrameBox.y + ")");
				lEditor.previewColors();
				lEditor.previewLogo();
				
			}
		});
		
		// slider for distance between text and slogan 
		$('.textSloganDistSlider').slider({
			value: getSliderValue('textSloganDistSlider'),
			min: 0,
			max: 100,
			stop: saveSliderData,
			slide: function (event, ui) {
				
				clearOutlineBox();
				clearOutline();
				var currVal = getSliderUpdatedValue('textSloganDistSlider');
				lEditor.setSession('textSloganDistSlider', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				
				var updatedVal = ui.value - currVal;
				var currLogo = lEditor.currentLogo;
				rangeSliderFlag = true;
				
				currLogo.generate.templatePath.updates.slogan.y = parseFloat(currLogo.generate.templatePath.slogan.y) + parseFloat(updatedVal);
				
				
				currLogo = updateCurrLogoObject(currLogo);
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				var currLogo = lEditor.currentLogo;
				$('.svgSloganText_1').attr('transform', "scale(" + currLogo.generate.templatePath.slogan.scale + ") translate(" + parseFloat(currLogo.generate.templatePath.slogan.x) + "," + parseFloat(currLogo.generate.templatePath.slogan.y) + ")");
			}
		});
		
		// slider for frame size 
		$('.frameSizeSlider').slider({
			value: getSliderValue('frameSizeSlider'),
			min: 1,
			max: 50,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				var currLogo = lEditor.currentLogo;
				rangeSliderFlag = true;
				var size = constantVars.SPACING.frameSizeSlider - ui.value;
				var obj = updateFrameSize($('.finaLogoInner .container_1'), size * -1);
				currLogo.generate.templatePath.updates.frame.x = obj.x;
				currLogo.generate.templatePath.updates.frame.y = obj.y;
				currLogo.generate.templatePath.updates.frame.scale = obj.scale;
				lEditor.setSession('frameSizeSlider', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				currLogo = updateCurrLogoObject(currLogo);
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				var currLogo = lEditor.currentLogo;
			}
		});
		
		// slider for icon frame size
		$('.iconFrameSizeSlider').slider({
			value: getSliderValue('iconFrameSizeSlider'),
			min: 1,
			max: 50,
			stop: saveSliderData,
			slide: function (event, ui) {
				clearOutlineBox();
				clearOutline();
				var currLogo = lEditor.currentLogo;
				rangeSliderFlag = true;
				var old = parseInt($(this).parents('.rangeSlider').find('.rangeSliderValue').val());
				var direction = 'left';
				if (old < ui.value) {
					var direction = 'right';
				}
				
				var size = constantVars.SPACING.iconFrameSizeSlider - ui.value;
				var obj = updateSizeByCenter($('.finaLogoInner .iconFrame'), currLogo.generate.templatePath, 'iconFrame', size * -1, direction);
				
				// var obj = updateFrameSize($('.finaLogoInner .iconFrame'), size * -1);
				
				
				currLogo.generate.templatePath.updates.iconFrame.x = obj.x;
				currLogo.generate.templatePath.updates.iconFrame.y = obj.y;
				currLogo.generate.templatePath.updates.iconFrame.scale = obj.scale;
				lEditor.setSession('iconFrameSizeSlider', ui.value);
				$(this).parents('.rangeSlider').find('.rangeSliderValue').val(ui.value);
				currLogo = updateCurrLogoObject(currLogo);
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				var currLogo = lEditor.currentLogo;
			}
		});
		
		/*==== Font case Js ====*/
		
		// for chanign compnay name font and slogan name font
		$('.companyFontCase').click(function (e) {
			var textCase = $(this).text();
			textCase = textCase.toLowerCase();
			if (constantVars.targets[lEditor.getSession('targetlink')] == 'slogan') {
				updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], textCase, getSliderValue('sloganTextSize'), getSliderValue('sloganLetterSpacing'), '');
			}
			if (constantVars.targets[lEditor.getSession('targetlink')] == 'logo') {
				updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], textCase, getSliderValue('logoTextSlider'), getSliderValue('logoLetterSpacing'), 'layout');
				
			}
			lEditor.previewColors();
			lEditor.previewLogo();
			
		});
		
		
		/*=== Change Text on Keyup===*/
		// for changing slogan or company name text 
		$('.templateText.editCompanyName').keypress(function (key) {
			if (lEditor.getSession('isEditable') == 1) {
				return false;
			}
		});
		$('.templateText').on('input', function (e) {
			lEditor.currentLogo = JSON.parse(lEditor.getSession('currentLogo'));
			lEditor.updateFontsObject('mono').then(_=>{
				
				if (constantVars.targets[lEditor.getSession('targetlink')] == 'slogan') {
					updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], '', getSliderValue('sloganTextSize'), getSliderValue('sloganLetterSpacing'), '');
				}
				if (constantVars.targets[lEditor.getSession('targetlink')] == 'logo') {
                                    //debugger;
                                    //console.log('Called'+lEditor.getSession('logoName'));
                                    if($('.editCompanyName').val().trim() == ''){
                                        $('.editCompanyName').val(lEditor.getSession('logoname'));
                                        return false;
                                    }
                                    //debugger;
					updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], '', getSliderValue('logoTextSlider'), getSliderValue('logoLetterSpacing'), '');
					
				}
				var currLogo = lEditor.currentLogo;
				
				
				currLogo = updateCurrLogoObject(currLogo);
				
				var obj = updateCurrentIconSize($('.finaLogoInner .sampleIcons_1'), currLogo.generate.templatePath, currLogo.generate.logoSizeSlider, 'icon');
				
				currLogo.generate.templatePath.updates.icon.x = obj.x;
				currLogo.generate.templatePath.updates.icon.y = obj.y;
				currLogo.generate.templatePath.updates.icon.scale = obj.scale;
				
				currLogo = updateCurrLogoObject(currLogo);
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				
				/* //var returnObj = logoMakerFunction.generateLogoTemplate(currLogo.generate, currLogo.idKey);
				let logoTemp = {};
				logoTemp.generate = returnObj.logoObj;
				$('.finaLogoInner').html('<div class="svg--slide" style="background-color:' + lEditor.currentLogo.generate.bgColor + ';"><div class="svg-slide--content svgSlideContent"><div class="water-mark-img"></div>' + returnObj.html + '<div class="bgOutlineBox bg-outline-box"></div></div></div>');
				currObj = updateCurrLogoObject(logoTemp);
				lEditor.setDefaultLogo(currObj, currObj.generate); */
			})
			
			
			
		});
		
		// changing slogan name 
		$('.editSloganName').blur(function (e) {
			var sloganText = lEditor.getSession('sloganText');
			if (sloganText == '') {
				// $('.editSloganName').val('Slogan');
				// lEditor.setSession('sloganText', 'Slogan');
				updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], '', getSliderValue('sloganTextSize'), getSliderValue('sloganLetterSpacing'), '');
			}
			lEditor.previewColors();
			lEditor.previewLogo();
		});
		
		$('.removeSloganText').on('click', function (e) {
			if ($('.editSloganName').val() != '') {
				$('.editSloganName').val('');
				lEditor.setSession('sloganText', '');
				lEditor.modifyLogoProperties("sloganText");
			}
		});
		
		// remove sloagn name
		$('.removeSlogan').on('click', function (e) {
			$('.editSloganName').val('');
			lEditor.setSession('sloganText', '');
			updateLogoText(constantVars.targets[lEditor.getSession('targetlink')], '', getSliderValue('sloganTextSize'), getSliderValue('sloganLetterSpacing'), '');
			$(this).addClass('hidden');
		});
		
		/*=== Change font family ===*/
		
		
		$('body').on('click', '.commonFont a', function (e) {
			$('.commonFont a').removeClass('active');
			$(this).addClass('active');
			editorParameters = {};
			editorParameters.obj = $(this);
			editorParameters.fors = constantVars.targets[lEditor.getSession('targetlink')];
			loadMoreStart = 0;
			logoByfontFamily(editorParameters);
		});
		
		/*=== Change layout Section ===*/
		$('.layoutSection').on('click', 'li a', function (e) {
			var dataOption = parseInt($(this).data('option'));
			var currLogo = lEditor.currentLogo;
			currLogo.generate.templateType = dataOption;
			currLogo.generate.templatePath = lEditor.sliderData.templates[dataOption];
			if (dataOption == 2) {
				currLogo.generate.iconPath = "";
			}
			lEditor.getCurrentLogo();
		});
		
		
		
		/*=== Change Frame Section ===*/
		
		function sessionData() {
			//console.log('Cur step is: '+lEditor.currentStep);
			switch (lEditor.currentStep) {
                            
				case 1: {
					lEditor.currentStep = 2;
					break;
				}
				case 2: {
					var sampleImage = {};
					var arr = [];
					lEditor.cleanSession('sampleImage');
					$('.step_2 .active').each(function () {
						arr.push($(this).data());
					});
					sampleImage = arr;
					if (sampleImage.length != 0) {
						lEditor.setSession('sampleImage', JSON.stringify(sampleImage));
						lEditor.currentStep = 3;
					}
					
					break;
				}
				case 3: {
					var sampleColor = [];
					lEditor.cleanSession('sampleColor');
					$('.step_3 .active').each(function () {
						sampleColor.push($(this).data());
					});
					lEditor.setSession('sampleColor', JSON.stringify(sampleColor))
					lEditor.currentStep = 4;
					break;
				}
				
				case 4: {					
					var logoName = $('#logoname2').val().trim();
					var sloganText = $('#sloganText').val().trim();
					var industryName = $('#industryName').val();
                                        var industryText = $('#industryName').text();
					if (industryName == 2010) {
						var extraIndustry = $('#extraIndustry').val();
                                                var industryText = $('#extraIndustry').text();
					} else {
						var extraIndustry = $('#search_industry').val();
                                                var industryText = $('#search_industry').val();
					}
					
					if (lEditor.budgetShowType == 1) {
						sessionStorage.removeItem('budgetType');
						sessionStorage.removeItem('budgetVal');
						sessionStorage.removeItem('budgetId');
						var budgetId = $('#budgetType').val();
						var budgetType = 1;
						if (budgetId == 'custom') {
							budgetType = 2;
							lEditor.setSession('budgetVal', $('#extraBudget').val());
						} else {
							lEditor.setSession('budgetId', budgetId);
						}
						lEditor.setSession('budgetType', budgetType);
						
					}
					if(extraIndustry.toLowerCase() == 'wedding service' || extraIndustry.toLowerCase() == 'wedding-service'){
                                            extraIndustry = 'wedding';
                                        }
					lEditor.setSession('extraIndustry', extraIndustry);
					lEditor.setSession('logoname', logoName);
					lEditor.setSession('industryId', industryName);
                                        lEditor.setSession('industryText', industryText);
					var getLogoName = lEditor.getSession('logoname');
					lEditor.setSession('sloganText', sloganText);                                        
					if (getLogoName == "" || getLogoName == null || getLogoName == "undefined") {
						$(".error-text").show();
						$('.le-s-logoName').addClass('has-error');
					} else {
						$(".error-text").hide();
						$('.le-s-logoName').removeClass('has-error');
						lEditor.currentStep = 5;
						lEditor.iconsData();
					}
					break;
				}
				case 5: {
					var boxLength = 0;
					lEditor.setSession('sampleIcon', JSON.stringify({ "si": lEditor.sampleIconArr }));
					lEditor.currentStep = 6;
					
					break;
				}
				case 6: {
					lEditor.currentStep = 7;
					break;
				}
				
				case 7: {
					
					break;
				}
			}
			
			lEditor.setSession('currPage', lEditor.currentStep);
			lEditor.showStep();
		}
		
		
		
		/*=== Change Frame Section ===*///////////////////////////////
		
		
		
		$('.containerShapeList').change(function () {
			loadMoreStart = 0;
			logoByContainer();
		});
		
		$('.containerTypeList').change(function () {
			loadMoreStart = 0;
			logoByContainer();
		});
		
		
		$('.containerIconShapeList').change(function () {
			loadMoreStart = 0;
			logoByIconContainer();
		});
		
		$('.containerIconTypeList').change(function () {
			loadMoreStart = 0;
			logoByIconContainer();
		});
		
		
		
		
		
		////////////////////////////////////////////////////////////////////////
		
		
		$('body').click(function (e) {
			var targetLen = $(e.target).closest('.containerOptions').length;
			if (targetLen == 0) {
				$('.containerOptions').removeClass('open');
				$('.containerOptions button').removeClass(' btn-purple');
			}
		});
		
		/*=== Change Color Section ===*/
		
		$('.colorsVariant a').click(function (e) {
			$('.finalogoSlider').html('');
			editorParameters = {};
			editorParameters.id = $(this).data('id');
			editorParameters.color = $(this).data('color');
			loadMoreStart = 0;
			fixedColorVariation(editorParameters);
			$('.commonClrDiv a').removeClass('active');
			$(this).addClass('active');
			$('.previewSection').addClass('hidden');
		});
		
		$('.colorPaletteButton, .colorPaletteVariants a').click(function (e) {
			$('.finalogoSlider').html('');
			editorParameters = {};
			editorParameters.id = $(this).data('id');
			loadMoreStart = 0;
			palettsColorVariation(editorParameters);
			$('.commonClrDiv a, .colorPaletteButton').removeClass('active');
			$(this).addClass('active');
		});
		
		$('.colorPicker .input-group-addon').on('click', function (e) {
			$('.commonClrDiv a').removeClass('active');
		});
		
		$('.colorPicker').on('colorpickerUpdate', function (e) {
			$('.commonClrDiv a').removeClass('active');
			$('.previewSection').addClass('hidden');
			var colorVal = $(this).colorpicker('getValue');
			lEditor.logoSlider('final', 1);
			try {
				colorVariation(colorVal);
			} catch (e) {
				$('.finaLogoInner').html('');
				$('.colorNotFound').remove();
				$('.editLogoSlider').removeClass('hidden');
				$('.editFinalLogo').addClass('hidden');
				$(".finalogoSlider").html('<div class="result-option colorNotFound">Not a valid Color code !</div>');
			}
		});
		
		// Handling color gradients items click
		$('.foil--variations.commonClrDiv').click(function (e) {
			var color = $(this).attr('color');
			var targetLink = lEditor.getSession('targetlink');
			var picker = $(this).closest('.colorPicker');
			
			if (color) {
				$('.commonClrDiv a').removeClass('active');
				$(this).find('a').addClass('active');
				colorGradient(color);
				addRecentColor(targetLink);
				
				//set the color of the picker
				if (picker) {
					picker.find('.input-group-addon.color-box i')[0].style.background = getGradientStyle(color);
				}
			}
			$('.previewSection').removeClass('hidden');
			lEditor.previewColors();
			lEditor.previewLogo();
		});
		
		/*=== Edit Symbol Section ===*/
		
		
		$('.editTags').focus(function (e) {
			$('.searchContainer').css('transform', 'scale(1)');
		});
		$('.editSearchButton').click(function (e) {
			$('.searchContainer').show();
		});
		
		$('body').on('click', '.closeSearchContainer', function () {
			$('.searchContainer').css('transform', 'scale(0)');
		});
		
		
		$('.step_7').click(function (e) {
			if (($(e.target).closest('.searchSymbol').length == 0) && ($(e.target).closest('.searchContainer').length == 0)) {
				$('.searchContainer').css('transform', 'scale(0)');
			}
		});
		
		
		
		
		
		
		/*==== svg js ====*/
		function getOulineJson(className) {
			if ($(".finaLogoInner ." + className).length < 1) {
				return { width: 0, height: 0, left: 0, top: 0 };
			}
			var currBBox = $(".finaLogoInner ." + className)[0].getBoundingClientRect();
			var widths = currBBox.width + 20;
			var heights = currBBox.height;
			heights = 20 + heights;
			
			var wid = parseFloat(widths);
			var height = parseFloat(heights);
			var divLeft = parseInt($('.svgSlideContent').offset().left);
			var divHeight = parseInt($('.svgSlideContent').offset().top);
			var left = parseInt($(".finaLogoInner ." + className).offset().left) - divLeft - 10;
			var top = parseInt($(".finaLogoInner ." + className).offset().top) - divHeight - 10;
			
			return { width: wid, height: height, left: left, top: top };
		}
		
		function updateOutlineStats() {
			var jsonObj = {};
			
			var currentLogo = JSON.parse(lEditor.getSession('currentLogo'));
			var currLogo = currentLogo.generate;
			if (currLogo.templatePath.isFrame != 0) {
				jsonObj.frame = getOulineJson('container_1');
			}
			
			if (!(currentLogo.logoName == "" || currentLogo.logoName == null || typeof (currentLogo.logoName) === "undefined")) {
				jsonObj.text = getOulineJson('logoNameBox');
			}
			
			if (!(currentLogo.sloganName == "" || currentLogo.sloganName == null || typeof (currentLogo.sloganName) === "undefined")) {
				jsonObj.slogan = getOulineJson('sloganBox');
			}
			
			if ((currLogo.templatePath.isIcon != 0) || (currLogo.templatePath.isMono != 0)) {
				jsonObj.icon = getOulineJson('sampleIcons_1');
			}
			
			
			if ((currLogo.templatePath.isIconFrame != 0)) {
				jsonObj.iconFrame = getOulineJson('iconFrame');
			}
			
			jsonObj.backGround = getOulineJson('svgSlideContent svg');
			
			return jsonObj;
			
			
		}
		
		
		$('.editFinalLogo').on('mouseover', '.finaLogoInner svg', function (e) {
			
			var jsonObj = updateOutlineStats();
			var widForBg = parseFloat(jsonObj.backGround.width) - 40;
			var heightForBg = parseFloat(jsonObj.backGround.height) - 40;
			var leftForBg = 10;
			var topForBg = 10;
			var currentLogo = JSON.parse(lEditor.getSession('currentLogo'));
			var currLogo = currentLogo.generate;
			
			$('.svgBoderOutline').remove();
			if (currLogo.templatePath.isFrame != 0) {
				$('.svgSlideContent').append('<div class="svgBoderOutline svg-ouline--box svg--outline forContainer" style="width:' + jsonObj.frame.width + 'px; height:' + jsonObj.frame.height + 'px; border:1px solid transparent; z-index:7; opacity:0; left:' + jsonObj.frame.left + 'px; top:' + jsonObj.frame.top + 'px"></div>');
			}
			
			if (!(currentLogo.logoName == "" || currentLogo.logoName == null || typeof (currentLogo.logoName) === "undefined")) {
				$('.svgSlideContent').append('<div class="svgBoderOutline svg-ouline--box svg--outline forText" style="width:' + jsonObj.text.width + 'px; height:' + jsonObj.text.height + 'px; border:1px solid transparent;  opacity:0; z-index:8; left:' + jsonObj.text.left + 'px; top:' + jsonObj.text.top + 'px"></div>');
			}
			
			if (!(currentLogo.sloganName == "" || currentLogo.sloganName == null || typeof (currentLogo.sloganName) === "undefined")) {
				$('.svgSlideContent').append('<div class="svgBoderOutline svg-ouline--box svg--outline forSlogan" style="width:' + jsonObj.slogan.width + 'px; height:' + jsonObj.slogan.height + 'px; border:1px solid transparent;  opacity:0; z-index:9; left:' + jsonObj.slogan.left + 'px; top:' + jsonObj.slogan.top + 'px"></div>');
			}
			
			if ((currLogo.templatePath.isIconFrame != 0)) {
				
				$('.svgSlideContent').append('<div class="svgBoderOutline svg-ouline--box svg--outline forIconFrame" style="width:' + jsonObj.iconFrame.width + 'px; height:' + jsonObj.iconFrame.height + 'px; border:1px solid transparent; opacity:0; z-index:10; left:' + jsonObj.iconFrame.left + 'px; top:' + jsonObj.iconFrame.top + 'px"></div>');
			}
			if (currLogo.templatePath.isIcon != 0 || currLogo.templatePath.isMono != 0) {
				$('.svgSlideContent').append('<div class="svgBoderOutline svg-ouline--box svg--outline forIcon" style="width:' + jsonObj.icon.width + 'px; height:' + jsonObj.icon.height + 'px; border:1px solid transparent; opacity:0; z-index:10; left:' + jsonObj.icon.left + 'px; top:' + jsonObj.icon.top + 'px"></div>');
			}
			
			
			
			$('.svgSlideContent').append('<div class="svgBoderOutline svg-ouline--box svg--outline forbackGround" style="width:' + widForBg + 'px; height:' + heightForBg + 'px; border:1px solid transparent; opacity:0; z-index:6; left:' + leftForBg + 'px; top:' + topForBg + 'px"></div>');
			
			
		});
		
		
		$('.editFinalLogo').on('mouseenter', '.finaLogoInner .svgBoderOutline', function (e) {
			e.stopImmediatePropagation();
			var jsonObj = updateOutlineStats();
			var widForBg = parseFloat(jsonObj.backGround.width) - 40;
			var heightForBg = parseFloat(jsonObj.backGround.height) - 40;
			var leftForBg = 10;
			var topForBg = 10;
			var classAttr = $(this).attr('class');
			$('.editFinalLogo .svgBoder').remove();
			if ($(this).hasClass('forContainer')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoder svg--outline" style="width:' + jsonObj.frame.width + 'px; height:' + jsonObj.frame.height + 'px; border:1px solid #6495ed; left:' + jsonObj.frame.left + 'px; top:' + jsonObj.frame.top + 'px"></div>');
			}
			else if ($(this).hasClass('forText')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoder svg--outline" style="width:' + jsonObj.text.width + 'px; height:' + jsonObj.text.height + 'px; border:1px solid #6495ed; left:' + jsonObj.text.left + 'px; top:' + jsonObj.text.top + 'px"></div>');
			}
			else if ($(this).hasClass('forSlogan')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoder svg--outline" style="width:' + jsonObj.slogan.width + 'px; height:' + jsonObj.slogan.height + 'px; border:1px solid #6495ed; left:' + jsonObj.slogan.left + 'px; top:' + jsonObj.slogan.top + 'px"></div>');
			}
			else if ($(this).hasClass('forIconFrame')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoder svg--outline" style="width:' + jsonObj.iconFrame.width + 'px; height:' + jsonObj.iconFrame.height + 'px; border:1px solid #6495ed; left:' + jsonObj.iconFrame.left + 'px; top:' + jsonObj.iconFrame.top + 'px"></div>');
			}
			else if ($(this).hasClass('forIcon')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoder svg--outline" style="width:' + jsonObj.icon.width + 'px; height:' + jsonObj.icon.height + 'px; border:1px solid #6495ed; left:' + jsonObj.icon.left + 'px; top:' + jsonObj.icon.top + 'px"></div>');
			}
			
			else if ($(this).hasClass('forbackGround')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoder svg--outline" style="width:' + widForBg + 'px; height:' + heightForBg + 'px; border:1px solid #6495ed; left:' + leftForBg + 'px; top:' + topForBg + 'px"></div>');
			}
			
		});
		
		$('.editFinalLogo').on('click', '.finaLogoInner .svgBoderOutline', function (e) {
			
			e.stopImmediatePropagation();
			var targetLink, defaultlink, left, top, wid, height;
			var jsonObj = updateOutlineStats();
			var targetLink = lEditor.getSession('targetlink');
			var parentLink = lEditor.getSession('parentlink');
			
			jsonObj.backGround.width = parseFloat(jsonObj.backGround.width) - 40;
			jsonObj.backGround.height = parseFloat(jsonObj.backGround.height) - 40;
			jsonObj.backGround.top = 10;
			jsonObj.backGround.left = 10;
			var boundary = {};
			
			var classAttr = $(this).attr('class');
			$('.editFinalLogo .svgBoderActive').remove();
			
			if ($(this).hasClass('forContainer')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + jsonObj.frame.width + 'px; height:' + jsonObj.frame.height + 'px; border:1px solid lime; left:' + jsonObj.frame.left + 'px; z-index:11; top:' + jsonObj.frame.top + 'px"></div>');
				if (parseInt(targetLink) == 3 || parseInt(parentLink) == 3) {
					$('.subMenu-16').trigger('click');
					//var getSessionDft = $('[data-target="16"').offset().left;
					//$('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
				}
				else {
					$('.topParent-6').trigger('click');
					lEditor.setSession('defaultlink', 24);
					
					// var getSessionDft = $('.topParent-6').offset().left;
					// $('.tabel-menu-1').stop().animate({scrollLeft : getSessionDft }); 
				}
				
				boundary = jsonObj.frame;
				
			}
			else if ($(this).hasClass('forText')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + jsonObj.text.width + 'px; height:' + jsonObj.text.height + 'px; border:1px solid lime; left:' + jsonObj.text.left + 'px; z-index:11; top:' + jsonObj.text.top + 'px"></div>');
				if (parseInt(targetLink) == 3 || parseInt(parentLink) == 3) {
					$('.subMenu-13').trigger('click');
					// var getSessionDft = $('[data-target="13"').offset().left;
					// $('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
				}
				else {
					$('.topParent-2').trigger('click');
					
					// var getSessionDft = $('[data-target="7"').offset().left;
					// $('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
					
					// var getSessionTgt = $('.topParent-2').offset().left - 30;
					//$('.tabel-menu-1').stop().animate({scrollLeft : getSessionTgt });
				}
				
				boundary = jsonObj.text;
				
			}
			else if ($(this).hasClass('forSlogan')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + jsonObj.slogan.width + 'px; height:' + jsonObj.slogan.height + 'px; border:1px solid lime; left:' + jsonObj.slogan.left + 'px; z-index:11; top:' + jsonObj.slogan.top + 'px"></div>');
				if (parseInt(targetLink) == 3 || parseInt(parentLink) == 3) {
					$('.subMenu-14').trigger('click');
					// var getSessionDft = $('[data-target="14"').offset().left;
					// $('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
				}
				else {
					$('.topParent-2').trigger('click');
					lEditor.setSession('defaultlink', 9);
					lEditor.setSession('targetlink', 9);
					
					//  var getSessionDft = $('[data-target="9"').offset().left;
					// $('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
					
					//  var getSessionTgt = $('.topParent-2').offset().left - 30;
					//  $('.tabel-menu-1').stop().animate({scrollLeft : getSessionTgt });
				}
				
				boundary = jsonObj.slogan;
				
			}
			
			else if ($(this).hasClass('forIcon')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + jsonObj.icon.width + 'px; height:' + jsonObj.icon.height + 'px; border:1px solid lime; left:' + jsonObj.icon.left + 'px; z-index:11; top:' + jsonObj.icon.top + 'px"></div>');
				if (parseInt(targetLink) == 3 || parseInt(parentLink) == 3) {
					$('.subMenu-15').trigger('click');
					//  var getSessionDft = $('[data-target="15"').offset().left;
					// $('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
				}
				else {
					$('.topParent-5').trigger('click');
					//  var getSessionTgt = $('[data-target="5"]').offset().left - 30;
					// $('.tabel-menu-1').stop().animate({scrollLeft : getSessionTgt });
					
				}
				boundary = jsonObj.icon;
				
			}
			else if ($(this).hasClass('forIconFrame')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + jsonObj.iconFrame.width + 'px; height:' + jsonObj.iconFrame.height + 'px; border:1px solid lime; left:' + jsonObj.iconFrame.left + 'px; z-index:11; top:' + jsonObj.iconFrame.top + 'px"></div>');
				if (parseInt(targetLink) == 3 || parseInt(parentLink) == 3) {
					$('.subMenu-43').trigger('click');
					//  var getSessionDft = $('[data-target="43"').offset().left;
					//$('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
				}
				else {
					$('.topParent-6').trigger('click');
					lEditor.setSession('defaultlink', 40);
					
					// var getSessionTgt = $('[data-target="5"]').offset().left;
					//  $('.tabel-menu-1').stop().animate({scrollLeft : getSessionTgt });
					
				}
				boundary = jsonObj.iconFrame;
				
			}
			else if ($(this).hasClass('forbackGround')) {
				$(this).parents('.svgSlideContent').append('<div class="svgBoderActive svg--outline" style="width:' + jsonObj.backGround.width + 'px; height:' + jsonObj.backGround.height + 'px; border:1px solid lime; left:' + jsonObj.backGround.left + 'px; z-index:11; top:' + jsonObj.backGround.top + 'px"></div>');
				$('.topParent-3').trigger('click');
				
				// var getSessionDft = $('[data-target="12"').offset().left;
				// $('.subMenuSection .table-menu').stop().animate({scrollLeft : getSessionDft });
				
				// var getSessionTgt = $('.topParent-3').offset().left - 30;
				// $('.tabel-menu-1').stop().animate({scrollLeft : getSessionTgt });
				
				boundary = jsonObj.backGround;
				
			}
			
			
			lEditor.setSession('boundary', JSON.stringify(boundary));
			lEditor.editLogoSteps();
			
		});
		
		$('.editFinalLogo').on('mouseleave', '.svgBoderOutline', function (e) {
			$('.editFinalLogo .svgBoder').remove();
		});
		
		$('.editFinalLogo').on('mouseleave', '.svgSlideContent', function (e) {
			$('.editFinalLogo .svgBoderOutline').remove();
		});
		
		$('body').click(function (e) {
			if ($(e.target).closest('.menuSteps').length == 0) {
				$('.editFinalLogo .svgBoderActive').remove();
				
			}
		});
		
		function clearOutlineBox() {
			lEditor.cleanSession('boundary');
			
		}
		
		function clearOutline() {
			$('.svgBoderActive').remove();
		}
		
		/*****************************************************************************************************************************************************************************/
		
		/*=== For too long text ===*/
		
		
		$("#logoname2").on('paste keyup input', function () {			
                        var inp_txt = $(this).val().trim();
                        var inp_len = inp_txt.length;  
                        //console.log(inp_len);
			//var getLength = $(this).val().trim().length;
			
			if (inp_len >= 17) {                            
				$(".error-text1").show();
                                $(".error-text").hide();
				$('.le-s-logoName').addClass('has-warning').removeClass('has-success has-error');                                
			}
                        else if(inp_len == 0){ 
                            $(".error-text").show();
                            $(".error-text1").hide();
                            $('.le-s-logoName').addClass('has-error').removeClass('has-success has-warning');  
                           
                        }
			else {                            
				$(".error-text1").hide();  
                                $(".error-text").hide();  
                                $('.le-s-logoName').addClass('has-success').removeClass('has-error has-warning');
			}
		});
		
		$("#sloganText").on('paste keyup', function () {
			var getLength = $(this).val().length;
			if (getLength >= 30) {
				$(".error-text2").show();
				$('.le-s-sloganName').addClass('has-warning');
			}
			else {
				$(".error-text2").hide();
				$('.le-s-sloganName').removeClass('has-warning');
			}
		});
		
		
		/*$("#logoname2").on('paste keyup input', function () {
			if ($(this).val().length != 0) {
				$(".error-text").hide();
				$('.le-s-logoName').removeClass('has-error').addClass('has-success');
			}
		});
		$("#logoname2").on('paste keyup', function () {
			if ($(this).val().length == 0) {
				$(".error-text").show();
				$('.le-s-logoName').removeClass('has-success').addClass('has-error');
			}
		});*/
		
		
		/*=== For too long text ===*/
		
		/*=== Set Default Section ===*/
		
		
		$('body').on('click', '.setDefaultLogo', function (e) {
			var type = $(this).data('type');
			//console.log(type);
			lEditor.saveDefaultLogo($(this).data('id'));
			if (type == 'logo') {
				lEditor.updateFontsObject('logo');
			} else if (type == 'slogan') {
				lEditor.updateFontsObject('slogan');
			}
			if (type == 'frame') {
				logoMakerFunction.resetSlider('frameSizeSlider');
			}
			var tempLogoId = $(this).parents('.logoSlides').find('.iconFav').attr('data-logo-id');
			if (tempLogoId > 0) {
				lEditor.setCurrentLogoId(tempLogoId);
			}
			$('.setDefaultLogo').removeClass('active');
			$(this).addClass('active');
			lEditor.alertMessages('success', 'Saving');
			var getTargetLink = parseInt(lEditor.getSession('targetlink'));
			
			if (type == 'color') {
				addRecentColor(getTargetLink);
				$('.previewSection').removeClass('hidden');
				lEditor.previewColors();
				lEditor.previewLogo();
			}
			
			switch (getTargetLink) {
				case 8: {
					$('.topParent-2').trigger('click');
					break;
				}
				case 10: {
					$('.topParent-2').trigger('click');
					lEditor.setSession('defaultlink', 9);
					lEditor.setSession('targetlink', 9);
					break;
				}
				case 42:
				case 24: {
					$('.topParent-6').trigger('click');
					lEditor.setSession('targetlink', 6);
					lEditor.setSession('defaultlink', 24);
					$(".containerOptions").removeClass('active');
					break;
				}
				case 44:
				case 40: {
					$('.topParent-6').trigger('click');
					lEditor.setSession('targetlink', 6);
					lEditor.setSession('defaultlink', 40);
					$(".innerContainerOptions").removeClass('active');
					break;
				}
				case 29: {
					
					lEditor.setSession('targetlink', 1);
					$('.topParent-2').trigger('click');
					break;
				}
				case 30: {
					$('.topParent-2').trigger('click');
					break;
				}
				case 26: {
					$('.topParent-2').trigger('click');
					break;
				}
				case 3: {
					$('.topParent-3').trigger('click');
					break;
				}
				case 5:
				case 27: {
					$('.subMenu-31').trigger('click');
					break;
				}
				case 39:
				case 32: {
					$('.subMenu-32').trigger('click');
					$('.previewSection').removeClass('hidden');
					break;
				}
				case 13:
				case 14:
				case 15:
				case 16: {
					$('.topParent-3').trigger('click');
					lEditor.setSession('defaultlink', 12);
					break;
				}
			}
			
			lEditor.editLogoSteps();
			
		});
		
		$('.iconClose').click(function (e) {
			$('.commonNotification').removeClass('active');
		});
		
		$('.removeIcon').click(function (e) {
			var currLogo = lEditor.currentLogo;
			currLogo.generate.iconPath = "";
			currLogo.generate.templatePath.isIcon = 0;
			var returnObj = logoMakerFunction.generateLogoTemplate(currLogo.generate);
			lEditor.setDefaultLogo(currLogo, currLogo.generate);
			lEditor.getCurrentLogo();
			
		});
		
		
		/*=== Buy Now Button ====*/
		$('.buyNowBtn, .previewPurchase, .previewGetstarted').click(function (e) {
			e.stopImmediatePropagation();
			showWarning = false;
			
			
			if (lEditor.getCurrentLogoId() == 'undefined') {
			} else {
				var logoId = lEditor.getCurrentLogoId();
				logoId = parseInt(logoId) * 11;
				window.location.href = DH.baseURL + '/tools/logo-maker/payment?logoid=' + logoId;
			}
		});
		
		$('.downloadFilesBtn').click(function () {
			if (lEditor.getCurrentLogoId() != 'undefined') {
				var logoId = lEditor.getCurrentLogoId();
				logoId = parseInt(logoId) * 11;
				
				window.location = DH.baseURL + '/my-logos/files/' + logoId;
			}
		});
		
		
		Array.prototype.containObject = function (obj) {
			var i = this.length;
			while (i--) {
				if (this[i] === obj) {
					return true;
				}
			}
			return false;
		}
		
		
		
		function addEditOptions() {
			var currentLogo = JSON.parse(lEditor.getSession('currentLogo'));
			var currLogo = currentLogo.generate;
			var parentlink = lEditor.getSession('parentlink');
			if (currLogo.templatePath.isIcon != 1) {
				$('.iconVsTextSlider').addClass('disabled');
				$('[data-option=".symbolContainer"]').text('Add Symbol');
			} else {
				$('.iconVsTextSlider').removeClass('disabled');
				$('[data-option=".symbolContainer"]').text('Edit Symbol');
				$('[data-option=".symbolVariations"]').text('Change Symbol');
			}
			
			
			if (currLogo.templatePath.isMono != 1) {
				$('.iconVsTextSlider').addClass('disabled');
				$('[data-option=".monogramContainer"]').text('Add Monogram');
			} else {
				$('.iconVsTextSlider').removeClass('disabled');
				$('[data-option=".monogramContainer"]').text('Edit Monogram');
				$('[data-option=".monoVariations"]').text('Change Monogram');
			}
			
			if (currLogo.templatePath.isMono != 1 && currLogo.templatePath.isIcon != 1) {
				$(".subMenu-40").parent().addClass('disabled');
			} else {
				$(".subMenu-40").parent().removeClass('disabled');
			}
			
			if (currLogo.templatePath.isFrame != 1) {
				$('.frameSizeSlider').addClass('disabled');
				
			} else {
				$('.frameSizeSlider').removeClass('disabled');
			}
		}
		
		
		
		// logo listing by icon frames   
		
		function logoByIconContainer() {
			var limit = 10;
			var dataOption = $('.containerSection li.active a').data('frame');
			var currLogo = lEditor.currentLogo;
			if (dataOption == 'none') {
				currLogo.generate.iconFramePath = "";
				currLogo.generate.templatePath.isIconFrame = 0;
				lEditor.getCurrentLogo();
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				$('#saveIcon').trigger('click');
			}
			
			if (dataOption == 'inner') {
				var frameList = [];
				
				var i = 0;
				
				var type = 'frame';
				loadMoreStart++;
				
				if (loadMoreStart == 1) {
					lEditor.logoTempArr = [];
					lEditor.logoSlider('final', 1);
				}
				
				var j = (loadMoreStart - 1) * 10;
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'iconframes', 'type': $('.containerIconTypeList').val(), 'shape': $('.containerIconShapeList').val(), start: loadMoreStart },
					async: true,
					success: function (json) {
						$('.load--more--class').remove();
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							var frameList = json.data.frames;
							var frameLength = frameList.length;
							if (frameLength == 0) {
								return false;
							}
							
							$.each(frameList, function (k, v) {
								var tempType = "new";
								var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
								logoTemp.generate.iconFramePath = v.icon_frame_svg;
								if (logoTemp.generate.templatePath.isIconFrame == 1) {
									tempType = "old";
								} else {
									var isMono = 0;
									var isIcon = 0;
									var isFrame = 0;
									var isIconFrame = 1;
									var isEqual = 0;
									if (typeof logoTemp.generate.templatePath.isFrame !== "undefined") {
										isFrame = logoTemp.generate.templatePath.isFrame;  // have tobechange
									}
									if (typeof logoTemp.generate.templatePath.isIcon !== "undefined") {
										isIcon = logoTemp.generate.templatePath.isIcon;
									}
									if (typeof logoTemp.generate.templatePath.isMono !== "undefined") {
										isMono = logoTemp.generate.templatePath.isMono;
									}
									if (typeof logoTemp.generate.templatePath.isEqual !== "undefined") {
										isEqual = logoTemp.generate.templatePath.isEqual;
									}
									
									var templates = getTemplatesByType(0, isIcon, isMono, isFrame, isIconFrame, isEqual);
									logoTemp.generate.templatePath = templates[0];
								}
								
								
								var idKey = logoMakerFunction.genRandomId();
								logoTemp.generate.idKey = idKey;
								if (tempType == "old") {
									var returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
									logoTemp.generate = returnObj.logoObj;
								} else {
									var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, idKey);
									logoTemp.generate = returnObj.logoObj;
								}
								currObj = updateCurrLogoObject(logoTemp);
								lEditor.logoTempArr[j] = JSON.parse(JSON.stringify(currObj));
								
								slickElement = '<div class="logos--boxes" data-frmid = "' + v.icon_frame_id + '"><div class="item logo--slides logoSlides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type = "frame" data-id="' + (j++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
								$(".finalogoSlider").append(slickElement);
								dh_utility_common.changeBg();
								i++;
								if (json.pagination == 1 && i == frameLength) {
									$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreIconFrames load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
								}
								$('.finaLogoInner').html('');
							});
						}
					}
				});
			}
		}
		
		// logo lisiting by frames
		function logoByContainer() {
			var limit = 10;
			var dataOption = $('.containerSection li.active a').data('frame');
			var currLogo = lEditor.currentLogo;
			if (dataOption == 'none') {
				currLogo.generate.framePath = "";
				currLogo.generate.templatePath.isFrame = 0;
				lEditor.getCurrentLogo();
				lEditor.setDefaultLogo(currLogo, currLogo.generate);
				$('#saveIcon').trigger('click');
			}
			
			if (dataOption == 'whole') {
				var frameList = [];
				
				var i = 0;
				
				var type = 'frame';
				loadMoreStart++;
				
				if (loadMoreStart == 1) {
					lEditor.logoTempArr = [];
					lEditor.logoSlider('final', 1);
				}
				
				var j = (loadMoreStart - 1) * 10;
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'frames', 'type': $('.containerTypeList').val(), 'shape': $('.containerShapeList').val(), start: loadMoreStart },
					async: true,
					success: function (json) {
						$('.load--more--class').remove();
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							var frameList = json.data.frames;
							var frameLength = frameList.length;
							if (frameLength == 0) {
								return false;
							}
							
							$.each(frameList, function (k, v) {
								var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
								logoTemp.generate.templatePath.isFrame = 1;
								logoTemp.generate.framePath = v.frame_svg;
								logoTemp.generate.templatePath.frameType = v.frame_type;
								logoTemp.generate.templatePath.frameOverlap = v.frame_overlap;
								var idKey = logoMakerFunction.genRandomId();
								logoTemp.generate.idKey = idKey;
								var returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
								logoTemp.generate = returnObj.logoObj;
								currObj = updateCurrLogoObject(logoTemp);
								lEditor.logoTempArr[j] = JSON.parse(JSON.stringify(currObj));
								
								slickElement = '<div class="logos--boxes" data-frmid = "' + v.frame_id + '"><div class="item logo--slides logoSlides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type = "frame" data-id="' + (j++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
								$(".finalogoSlider").append(slickElement);
								dh_utility_common.changeBg();
								i++;
								if (json.pagination == 1 && i == frameLength) {
									$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreFrames load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
								}
								$('.finaLogoInner').html('');
							});
						}
					}
				});
			}
		}
		
		// code for load more 
		$('body').on('click', '.loadMoreFrames', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			logoByContainer();
		});
		
		$('body').on('click', '.loadMoreIconFrames', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			logoByIconContainer();
		});
		
		
		$('body').on('click', '.loadMoreEditorIcons', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			lEditor.objIconPage++;
			lEditor.ajaxEditIconsResponse();
		});
		
		
		$('body').on('click', '.loadMoreDynamicGenerate', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			lEditor.generateDynamicLogoVariations();
		});
		// 
		
		// logo listing by font families 
		function logoByfontFamily(parameters) {
			var limit = 10;
			var ele = parameters.obj;
			var $for = parameters.fors;
			var categoryId = ele.data('id');
			var letterSpacing = 0;
			var updateText = "";
			loadMoreStart++;
			
			jqXHR = $.ajax({
				url: DH.baseURL + '/logoMakerAjax.php',
				type: 'POST',
				data: { action: 'fonts', category_id: categoryId, start: loadMoreStart },
				async: true,
				success: function (json) {
					json = $.parseJSON(json);
					if (json.status == 0) {
						
					} else {
						
						var fontList = json.fonts;
						
						var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
						var type = "";
						var i = 0;
						var j = (loadMoreStart - 1) * limit;
						if (loadMoreStart == 1) {
							lEditor.logoTempArr = [];
							lEditor.logoSlider('final', 1);
						}
						if ($for == 'logo') {
							updateText = lEditor.currentLogo.logoName;
							letterSpacing = getSliderValue('logoLetterSpacing');
						} else if ($for == "slogan") {
							updateText = lEditor.currentLogo.sloganName;
							letterSpacing = getSliderValue('sloganLetterSpacing');
						}
						var fontListLength = fontList.length;
						$('.load--more--class').remove();
						if (fontListLength == 0) {
							return false;
						}
						
						$.each(fontList, function (k, v) {
							
							opentype.load(v.font_link, function (err, font) {
								try {
									if (err) {
									} else {
										letterSpacing = parseInt(letterSpacing);
										if ($for == 'logo') {
											if (updateText != '') {
												var logo = font.getPath(updateText, 0, 0, 72, { 'letterSpacing': letterSpacing });
												logoTemp.generate.logoPath = logo.toSVG();
											}
											else {
												logoTemp.generate.logoPath = '<path d="M 0 0 l 1 0" stroke="white" stroke-width="0" fill ="none" />';
											}
											
											//logoTemp.generate.logoPath = logo.toSVG();
											logoTemp.generate.textFontType = v.font_link;
											type = "logoName";
											
										} else if ($for == "slogan") {
											var logo = font.getPath(updateText, 0, 0, 24, { 'letterSpacing': letterSpacing });
											logoTemp.generate.sloganFontType = v.font_link;
											logoTemp.generate.sloganPath = logo.toSVG();
											type = "sloganName";
										}
										var idKey = logoMakerFunction.genRandomId();
										logoTemp.generate.idKey = idKey;
										var returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
										logoTemp.generate = returnObj.logoObj;
										returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, 'containerBody', idKey);
										logoTemp.generate = returnObj.logoObj;
										currObj = updateCurrLogoObject(logoTemp);
										lEditor.logoTempArr[j] = JSON.parse(JSON.stringify(currObj));
										slickElement = '<div class="logos--boxes" data-fntid = "' + v.font_id + '"><div class="logo--slides"><div class="logoSlide-overlay  gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="' + $for + '" data-id="' + (j++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + currObj.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
										$(".finalogoSlider").append(slickElement);
										dh_utility_common.changeBg();
										i++;
										if (json.pagination == 1 && i == fontListLength) {
											$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreFonts load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
										}
									}
									
								} catch (e) {
									//	alert(e);
								}
							});
						});
						
					}
				}
			});
			
		}
		
		// code for pagination 
		$('body').on('click', '.loadMoreFonts', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			logoByfontFamily(editorParameters);
		});
		
		$('body').on('click', '.loadMoreMonograms', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			lEditor.getMonogramVariations();
		});
		
		$('body').on('click', '.loadMoreVariations', function () {
			$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
			loadMoreStart++;
			getLayoutVariations();
		});
		
		function loaderShow() {
			$('.editLogoSlider .loadMoreIcons').show();
			$('.finalogoSlider').hide();
		}
		
		function loaderHide() {
			$('.editLogoSlider .loadMoreIcons').hide();
			$('.finalogoSlider').show();
			$(".logoSlider").trigger('refresh.owl.carousel');
		}
		
		// disabling menu itesm
		function disableOption() {
			var currentLogo = JSON.parse(lEditor.getSession('currentLogo'));
			var currLogo = currentLogo.generate;
			var targetlink = lEditor.getSession('targetlink');
			var defaultlink = lEditor.getSession('defaultlink');
			var logoname = lEditor.getSession('logoname');
			var getSampleIcon = $.parseJSON(lEditor.getSession('sampleIcon'));
			if (defaultlink == 7 || targetlink == 7) {
				if (logoname == '') {
					$('.companyName .companyFontCase, .companyName .rangeSlider, .iconVsTextSlider').addClass('disabled');
					$('.subMenu-8, .subMenu-13').parents('li').addClass('disabled');
				} else {
					$('.companyName .companyFontCase, .companyName .rangeSlider, .iconVsTextSlider').removeClass('disabled');
					$('.subMenu-8, .subMenu-13').parents('li').removeClass('disabled');
				}
			}
			var sloganText = lEditor.getSession('sloganText');
			
			if (sloganText == '') {
				$('.sloganOption .companyFontCase, .sloganOption .rangeSlider').addClass('disabled');
				$('.subMenu-10, .subMenu-14').parents('li').addClass('disabled');
				$('.subMenu-9').text('Add Slogan');
				$('.removeSlogan').addClass('hidden');
				
			} else {
				$('.sloganOption .companyFontCase, .sloganOption .rangeSlider').removeClass('disabled');
				$('.subMenu-10, .subMenu-14').parents('li').removeClass('disabled');
				$('.subMenu-9').text('Edit Slogan');
				$('.removeSlogan').removeClass('hidden');
			}
			
			if (logoname == '' || sloganText == '') {
				$('.textSloganDistSlider').addClass('disabled');
			}
			else {
				$('.textSloganDistSlider').removeClass('disabled');
			}
			
			if (currLogo.templatePath.isIcon != 1 && currLogo.templatePath.isMono != 1) {
				
				$('.iconDistanceSlider, .iconVsTextSlider, .logoSizeSlider').addClass('disabled');
				$('.subMenu-15').parents('li').addClass('disabled');
				$('.subMenu-15').text("Symbol");
			} else {
				$('.iconDistanceSlider, .iconVsTextSlider, .logoSizeSlider').removeClass('disabled');
				$('.subMenu-15').parents('li').removeClass('disabled');
				if (currLogo.templatePath.isIcon == 1) {
					$('.subMenu-15').text("Symbol");
				} else {
					$('.subMenu-15').text("Monogram");
				}
				
			}
			
			if (currLogo.templatePath.isIconFrame != 1) {
				$('.subMenu-43').parents('li').addClass('disabled');
			} else {
				$('.subMenu-43').parents('li').removeClass('disabled');
			}
			
			if (currLogo.framePath == '') {
				$('.frameSizeSlider').addClass('disabled');
				$('.subMenu-16').parents('li').addClass('disabled');
			} else {
				$('.frameSizeSlider').removeClass('disabled');
				$('.subMenu-16').parents('li').removeClass('disabled');
			}
			
		}
		
		// updateing text, size , space of company name and slogan  
		function updateLogoText($for, fontCases, size, letterSpacing, acType) {
			size = parseInt(size);
			letterSpacing = parseFloat(letterSpacing);
			// code will shift to case
			if (typeof fontCases === "undefined") {
				fontCases = 'normal';
			}
			if (typeof letterSpacing === "undefined") {
				letterSpacing = 0;
			}
			var fontName = "";
			var updateText;
			
			var logoTemp = {};
			var type = "";
			logoTemp = lEditor.currentLogo;
			
			if (lEditor.getSession('isEditable') == 1) {
				var companyName = $('.editCompanyName').val();
				//var sloganText = $('.editSloganName').val();
				var sessionCompanyText = lEditor.getSession('logoname');
				//var sessionSloganText = lEditor.getSession('sloganText');
				
				if ($for == 'logo') {
					updateText = companyName.toLowerCase() == sessionCompanyText.toLowerCase() ? companyName : sessionCompanyText;
					$('.editCompanyName').val(updateText);
					fontName = lEditor.currentLogo.generate.textFontType;
				}
				else if ($for == 'slogan') {
					updateText = $('.editSloganName').val();
					lEditor.setSession('sloganText', updateText);
					fontName = lEditor.currentLogo.generate.sloganFontType;
				}
			}
			else {
				if ($for == 'logo') {
					updateText = $('.editCompanyName').val();
					lEditor.setSession('logoname', updateText);
					fontName = lEditor.currentLogo.generate.textFontType;
				} else if ($for == 'slogan') {
					updateText = $('.editSloganName').val();
					lEditor.setSession('sloganText', updateText);
					fontName = lEditor.currentLogo.generate.sloganFontType;
				}
			}
			String.prototype.capitalize = function () {
				let stringArray = this.split(" ");
				for (let a = 0; a < stringArray.length; a++) {
					stringArray[a] = stringArray[a].charAt(0).toUpperCase() + stringArray[a].slice(1)
				}
				return stringArray.join(" ");
			}
			
			switch (fontCases) {
				case 'normal': {
					updateText = updateText;
					break;
				}
				case 'caps': {
					updateText = updateText.toLowerCase().capitalize();
					break;
				}
				case 'up': {
					updateText = updateText.toUpperCase();
					break;
				}
				case 'low': {
					updateText = updateText.toLowerCase();
					break;
				}
				
			}
			
			if ($for == 'logo') {
				$('.editCompanyName').prop('value', updateText);				
				lEditor.setSession('logoname', updateText);
			} else if ($for == 'slogan') {
				$('.editSloganName').prop('value', updateText);
				lEditor.setSession('sloganText', updateText);			
			}
			disableOption();
			
			var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
			if ($for == 'logo') {
				if (currCompFontObject) {
					if (updateText != '') {
						
						if (acType =='layout'){
							
							var logo = currCompFontObject.getPath(updateText, 0, 0, size, { 'letterSpacing': letterSpacing });
							logoTemp.generate.logoPath = logo.toSVG();
						}else{
							
							var logo = currCompFontObject.getPath(updateText, 0, 0, size, { 'letterSpacing': letterSpacing });
							logoTemp.generate.logoPath = logo.toSVG();
							if (acType != 'slider' && logoTemp.generate.templatePath.isIcon=="0"){
								var monotext = logoMakerFunction.genMonoGramText(updateText)
								var monogramNew = currMonogramFontObject.getPath(monotext, 0, 0, 72)
								logoTemp.generate.iconPath = monogramNew.toSVG();
								logoTemp.generate.monogram = monotext;
							}
							
						}
						
					}
					else {
						logoTemp.generate.logoPath = '<path d="M 0 0 l 1 0" stroke="white" stroke-width="0" fill ="none" />';
					}
					currLogo.logoName = updateText;
					type = "logoName";
				}
			} else if ($for == "slogan") {
				if (currSloganFontObject) {
					
					var logo = currSloganFontObject.getPath(updateText, 0, 0, size, { 'letterSpacing': letterSpacing });
					logoTemp.generate.sloganPath = logo.toSVG();
					
					currLogo.sloganName = updateText;
					type = "sloganName";
				}
			}
			
			var returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, logoTemp.generate.idKey);
			//var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, logoTemp.idKey);
			logoTemp = returnObj.logoObj;
			currLogo.generate = logoTemp;
			
			$('.finaLogoInner').html('<div class="svg--slide" style="background-color:' + lEditor.currentLogo.generate.bgColor + ';"><div class="svg-slide--content svgSlideContent"><div class="water-mark-img"></div>' + returnObj.html + '<div class="bgOutlineBox bg-outline-box"></div></div></div>');
			currLogo = updateCurrLogoObject(currLogo);
			lEditor.setDefaultLogo(currLogo, currLogo.generate);
			
			if (acType != "slider") {
				saveSliderData();
			}
			
		}
		
		// listing by color gradients 
		function colorGradient(type) {
			var targetLink = parseInt(lEditor.getSession('targetlink'));
			var colorDataType = lEditor.getSession('colorDataType');
			if (typeof colorDataType === 'undefined') {
				colorDataType = 'background';
			}
			var currLogo = lEditor.currentLogo;
			var color = '';
			switch (colorDataType) {
				case 'foreground': {
					$('.colorSection .subnav li.active').each(function () {
						var option = $(this).find('a').data('target');
						switch (option) {
							case 13: {
								currLogo.generate.textGradient = type;
								break;
							}
							case 14: {
								currLogo.generate.sloganGradient = type;
								break;
							}
							case 15: {
								currLogo.generate.iconGradient = type;
								break;
							}
							case 16: {
								if (currLogo.generate.templatePath.frameType == "filled") {
									currLogo.generate.frameFilledGradient = type;
								} else {
									currLogo.generate.frameGradient = type;
								}
								break;
							}
							case 43: {
								currLogo.generate.iconFrameGradient = type;
								break;
							}
						}
					});
				}
			}
			lEditor.getCurrentLogo();
			$('.editLogoSlider, .previewSection').addClass('hidden');
			$('.editFinalLogo').removeClass('hidden');
			
			lEditor.setDefaultLogo(currLogo, currLogo.generate);
			$('#saveIcon').trigger('click');
		}
		
		
		// update item size by center 
		function updateSizeByCenter(object, template, type, size, direction) {
			var dimension = template[type];
			var x = dimension.x;
			var y = dimension.y;
			var oscale = dimension.scale;
			var ratio = oscale / x;
			var scale = 1;
			
			scale += (size / 100);
			var bbox = object.get(0).getBBox();
			
			bbox.width = parseFloat(bbox.width);
			bbox.height = parseFloat(bbox.height);
			bbox.x = parseFloat(bbox.x);
			bbox.y = parseFloat(bbox.y);
			
			var svgWidth = parseFloat(constantVars.SVGWIDTH);
			var svgHeight = parseFloat(constantVars.SVGHEIGHT);
			if (direction == 'right') {
				x = x - size; // ratio;
				y = y - size;
			} else {
				x = x + size; // ratio;
				y = y + size;
			}
			
			
			object.attr('transform', "scale(" + scale + ") translate(" + x + "," + y + ")");
			obj = { 'x': x, 'y': y, 'scale': scale };
			return obj;
		}
		
		// update item zise of SVG ( any ) 
		function updateGroupSize(object, template, type, size) {
			var dimension = template[type];
			var scale = 1;
			if (type == "frame" && template.isFrame == 0) {
				object.attr('transform', "scale(0) translate(0,0)");
				return { 'x': 0, 'y': 0, 'scale': 0 };
			}
			
			var bbox = object.get(0).getBBox();
			var x = 0;
			var y = 0;
			
			var ox = dimension.x;
			var oy = dimension.y;
			var oscale = dimension.scale;
			
			var obj = {};
			scale = scale + (size / 100);
			
			if (dimension.field == "logoContainer") {
				if (template.isFrame == 1) {
					scale = 1;
				} else {
					scale = 0.75;
				}
			}
			
			if (dimension.field == "frame") {
				
				if (template.isFrame == 0) {
					object.attr('transform', "scale(0) translate(0,0)");
					return { 'x': 0, 'y': 0, 'scale': 0 };
				}
			}
			
			
			if (dimension.field == "containerBody") {
				
				if (template.isFrame == 1 && template.frameOverlap == 0) {
					var frame = $('#templateGenerator .container_1').get(0).getBBox();
					var frameHeight = (frame.height / 2) > constantVars.FRAMERATIO ? constantVars.FRAMERATIO : frame.height / 2;
					var frameWidth = (frame.width / 2) > constantVars.FRAMERATIO ? constantVars.FRAMERATIO : frame.width / 2;
					scale = setScale(frameWidth, bbox.width, frameHeight, bbox.height);
					object.attr('transform', "scale(" + scale + ")");
				} else {
					var container = $('#templateGenerator .containerBody').get(0).getBBox();
					var containerWidth = container.width;
					var containerHeight = container.height;
					scale = setScale(400, containerWidth, 400, containerHeight) + 0.12;
					//	object.attr('transform',"scale("+scale+")");
				}
			}
			
			if (dimension.field == "icon") {
				scale = 100 / bbox.width;
				if (scale > 100 / bbox.height) {
					scale = 100 / bbox.height;
				}
			}
			
			/*	if(dimension.field == "icon" && template.isIconFrame == 1){
				var iconFrame = $('#templateGenerator .iconFrame').get(0).getBBox();
				x = ((constantVars.SVGWIDTH * dimension.widthPercent/100) + ( constantVars.SVGWIDTH * dimension.widthStart / 100) ) / ( 2 * scale ) - ( (bbox.width )/ 2)  - bbox.x ;
				y =( constantVars.SVGHEIGHT * dimension.heightStart / 100 +  constantVars.SVGHEIGHT * dimension.heightPercent / 100) / (2 * scale)  - bbox.height / 2 - bbox.y  ;
				object.attr('transform',"scale("+scale+") translate("+x+","+y+")");    
				obj = {'x':x,'y':y,'scale':scale};
				return obj;
			} */
			if (dimension.xType == 'left') {
				x = (constantVars.SVGWIDTH * dimension.widthStart / 100) / scale - bbox.x * scale;
			}
			if (dimension.xType == 'center') {
				x = ((constantVars.SVGWIDTH * dimension.widthPercent / 100) + (constantVars.SVGWIDTH * dimension.widthStart / 100)) / (2 * scale) - ((bbox.width) / 2) - bbox.x;
			}
			if (dimension.xType == 'right') {
				x = (constantVars.SVGWIDTH * dimension.widthStart / 100) + (constantVars.SVGWIDTH * dimension.widthPercent / 100) / scale - bbox.width - bbox.x;
			}
			
			/*     if(dimension.field == "slogan"){
				bboxText = $('#templateGenerator  .svgLogoName_1').get(0).getBBox();
				y =  parseFloat( template.updates.text.y ) +parseFloat( bboxText.height) / 2  + 10;
			}else{ */
				if (dimension.yType == 'up') {
					y = ((constantVars.SVGHEIGHT * dimension.heightStart / 100)) / scale - bbox.y;
				}
				if (dimension.yType == 'center') {
					y = (constantVars.SVGHEIGHT * dimension.heightStart / 100 + constantVars.SVGHEIGHT * dimension.heightPercent / 100) / (2 * scale) - bbox.height / 2 - bbox.y;
				}
				if (dimension.yType == 'down') {
					y = ((constantVars.SVGHEIGHT * dimension.heightStart / 100) + (constantVars.SVGHEIGHT * dimension.heightPercent / 100)) / scale - (bbox.height) - bbox.y;
				}
				//	}
				if (x < constantVars.MINX || x > constantVars.MAXX) {
					
					obj = { 'x': ox, 'y': oy, 'scale': oscale };
				}
				object.attr('transform', "scale(" + scale + ") translate(" + x + "," + y + ")");
				obj = { 'x': x, 'y': y, 'scale': scale };
				return obj;
			}
			
			// update current logo ojgect ( template to main )  
			function updateCurrentLogoSize(object, dimension, size, type) {
				if (type == "frame" && dimension.isFrame == 0) {
					object.attr('transform', "scale(0) translate(0,0)");
					return { 'x': 0, 'y': 0, 'scale': 0 };
				}
				var scale = 1;
				var bbox = object.get(0).getBBox();
				var x = dimension[type].x;
				var y = dimension[type].y
				var obj = {};
				
				scale = scale + (size / 100);
				
				if (dimension[type].field == "logoContainer") {
					scale = setScale(constantVars.SVGHWIDTH, bbox.width, constantVars.SVGHEIGHT, bbox.height);
				}
				if (dimension[type].field == "containerBody") {
					scale = setScale(constantVars.FRAMERATIO, bbox.width, constantVars.FRAMERATIO, bbox.height);
					object.attr('transform', "scale(" + scale + ")");
				}
				if (dimension.field == "icon") {
					scale = 100 / bbox.width;
					if (scale > 100 / bbox.height) {
						scale = 100 / bbox.height;
					}
				}
				
				scale = scale + (size / 100);
				if (dimension.xType == 'left') {
					x = (constantVars.SVGWIDTH * dimension.widthStart / 100) / scale - bbox.x * scale;
				}
				if (dimension.xType == 'center') {
					x = ((constantVars.SVGWIDTH * dimension.widthPercent / 100) + (constantVars.SVGWIDTH * dimension.widthStart / 100)) / (2 * scale) - ((bbox.width) / 2) - bbox.x;
				}
				if (dimension.xType == 'right') {
					x = (constantVars.SVGWIDTH * dimension.widthStart / 100) + (constantVars.SVGWIDTH * dimension.widthPercent / 100) / scale - bbox.width - bbox.x;
				}
				
				if (dimension.field == "slogan") {
					bboxText = $('#templateGenerator  .svgLogoName_1').get(0).getBBox();
					y = template.updates.text.y + bboxText.height / 2 + 10;
				} else {
					if (dimension.yType == 'up') {
						y = ((constantVars.SVGHEIGHT * dimension.heightStart / 100)) / scale - bbox.y;
					}
					if (dimension.yType == 'center') {
						y = (constantVars.SVGHEIGHT * dimension.heightStart / 100 + constantVars.SVGHEIGHT * dimension.heightPercent / 100) / (2 * scale) - bbox.height / 2 - bbox.y;
					}
					if (dimension.yType == 'down') {
						y = ((constantVars.SVGHEIGHT * dimension.heightStart / 100) + (constantVars.SVGHEIGHT * dimension.heightPercent / 100)) / scale - (bbox.height) - bbox.y;
					}
				}
				object.attr('transform', "scale(" + scale + ") translate(" + x + "," + y + ")");
				obj = { 'x': x, 'y': y, 'scale': scale };
				return obj;
			}
			
			// ( updateing frame size ) 
			function updateFrameSize(object, size) {
				var scale = 1;
				scale += (size / 100);
				var bbox = object.get(0).getBBox();
				bbox.width = parseFloat(bbox.width);
				bbox.height = parseFloat(bbox.height);
				bbox.x = parseFloat(bbox.x);
				bbox.y = parseFloat(bbox.y);
				var svgWidth = parseFloat(constantVars.SVGWIDTH);
				var svgHeight = parseFloat(constantVars.SVGHEIGHT);
				var x = svgWidth / (2 * scale) - ((bbox.width) / 2) - bbox.x;
				if (x < 0 || x > svgWidth) return;
				var y = (svgHeight / (2 * scale)) - ((bbox.height) / 2) - bbox.y;
				if (y < 0 || y > svgHeight) return;
				object.attr('transform', "scale(" + scale + ") translate(" + x + "," + y + ")");
				obj = { 'x': x, 'y': y, 'scale': scale };
				return obj;
			}
			
			// not in use
			function updateIconVsText(obj1, obj2, size) {
				updateGroupSize(obj1, size * (-1));
				updateGroupSize(obj2, size);
			}
			
			// not in use
			function updateBetweenDistance(obj1, obj2, distance) {
				var obj1Scale = obj1.data('scale');
				var obj1X = obj1.data('x');
				var obj1Y = obj1.data('y');
				var obj2Scale = obj2.data('scale');
				var obj2X = obj2.data('x');
				var obj2Y = obj2.data('y');
				
				obj1Y = obj1Y - (distance);
				obj2Y = obj2Y + (distance);
				
				obj1.attr('transform', "scale(" + obj1Scale + ") translate(" + obj1X + "," + obj1Y + ")");
				obj1.data('x', obj1X);
				obj1.data('y', obj1Y);
				obj2.attr('transform', "scale(" + obj2Scale + ") translate(" + obj2X + "," + obj2Y + ")");
				obj2.data('x', obj2X);
				obj2.data('y', obj2Y);
			}
			
			// listing by color variation 
			function fixedColorVariation(editorParameters) {
				var colorId = editorParameters.id;
				var colorVal = editorParameters.color;
				var dataOption = colorVal;
				loadMoreStart++;
				var limit = 10;
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'colors', color_id: colorId, start: loadMoreStart },
					async: true,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							var colorVariant = json.colors;
							var targetLink = parseInt(lEditor.getSession('targetlink'));
							var colorDataType = lEditor.getSession('colorDataType');
							if (typeof colorDataType === 'undefined') {
								colorDataType = 'background';
							}
							var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
							var i = 0;
							var k = (loadMoreStart - 1) * limit;
							var type = '';
							
							if (loadMoreStart == 1) {
								lEditor.logoTempArr = [];
								lEditor.logoSlider('final', 1);
							}
							var color = '';
							var colorVariantLength = colorVariant.length;
							$('.load--more--class').remove();
							if (colorVariantLength == 0) {
								return false;
							}
							
							var returnObj = {};
							$('.editFinalLogo').addClass('hidden');
							$('.editLogoSlider').removeClass('hidden');
							$.each(colorVariant, function (kee, v) {
								var idKey = logoMakerFunction.genRandomId();
								logoTemp.generate.idKey = idKey;
								switch (colorDataType) {
									case 'background': {
										color = "" + v.cp_code;
										logoTemp.generate.bgColor = color;
										constantVars.colors.bgColorFamily = dataOption;
										returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
										break;
									}
									case 'foreground': {
										var j = 0;
										$('.colorSection .subnav li.active').each(function () {
											color = "" + v.cp_code;
											var option = $(this).find('a').data('target');
											switch (option) {
												case 13: {
													logoTemp.generate.mainTextColor = color;
													logoTemp.generate.textGradient = "";
													constantVars.colors.mainTextFamily = dataOption;
													
													break;
												}
												case 14: {
													logoTemp.generate.sloganTextColor = color;
													logoTemp.generate.sloganGradient = "";
													constantVars.colors.sloganTextFamily = dataOption;
													break;
												}
												case 15: {
													logoTemp.generate.iconColor = color;
													logoTemp.generate.iconGradient = "";
													constantVars.colors.iconFamily = dataOption;
													break;
												}
												case 16: {
													if (logoTemp.generate.templatePath.frameType == "filled") {
														logoTemp.generate.frameFilledColor = color;
														logoTemp.generate.frameGradient = "";
													} else {
														logoTemp.generate.frameColor = color;
														logoTemp.generate.frameGradient = "";
													}
													constantVars.colors.frameFamily = dataOption;
													break;
												}
												case 43: {
													logoTemp.generate.iconFrameColor = color;
													logoTemp.generate.iconFrameGradient = "";
													constantVars.colors.iconFrameFamily = dataOption;
													break;
												}
											}
											
											returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
											j++;
										});
									}
								}
								logoTemp.generate = returnObj.logoObj;
								lEditor.logoTempArr[k] = JSON.parse(JSON.stringify(logoTemp));
								
								slickElement = '<div class="logos--boxes" data-cpId = "' + v.cp_id + '"><div class="item logo--slides logoSlides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="color" data-id="' + (k++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
								$(".finalogoSlider").append(slickElement);
								dh_utility_common.changeBg();
								i++;
								if (json.pagination == 1 && i == colorVariantLength) {
									
									$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreColors load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
									
								}
								
							});
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
			}
			
			function addRecentColor(targetLink) {
				var generateObj = lEditor.currentLogo.generate;
				var color;
				
				switch (parseInt(targetLink)) {
					case 3:
					case 12: {
						color = generateObj.bgColor;
						break;
					}
					case 13: {
						if (generateObj.mainTextColor.indexOf('url') != -1) {
							color = generateObj.textGradient;
						}
						else {
							color = generateObj.mainTextColor;
						}
						break;
					}
					case 14: {
						if (generateObj.sloganTextColor.indexOf('url') != -1) {
							color = generateObj.sloganGradient;
						}
						else {
							color = generateObj.sloganTextColor;
						}
						break;
					}
					case 15: {
						if (generateObj.iconColor.indexOf('url') != -1) {
							color = generateObj.iconGradient;
						}
						else {
							color = generateObj.iconColor;
						}
						break;
					}
					case 16: {
						if (generateObj.frameColor.indexOf('url') != -1) {
							color = generateObj.iconGradient;
						}
						else {
							color = generateObj.frameColor;
						}
						
						break;
					}
					case 43: {
						if (generateObj.iconFrameColor.indexOf('url') != -1) {
							color = generateObj.iconFrameGradient;
						}
						else {
							color = generateObj.iconFrameColor;
						}
						break;
					}
				}
				if (color) {
					color = color.replace('#', '');
					if (color && recentColors.indexOf(color) == -1) {
						if (recentColors.length == 8) {
							recentColors.unshift(color);
							recentColors.pop();
						}
						else {
							recentColors.unshift(color);
						}
						saveRecentColor(color);
					}
					refreshRecentColorBox();
				}
			}
			
			function refreshRecentColorBox() {
				let content = recentColors.reduce((accm, color) => {
					if (gradientsArray[color]) {
						return accm += '<a href="javascript:;" class="recent-color gradient-color" style="background:' + getGradientStyle(color) + '" data-color="' + color + '"></a>'
					}
					else {
						return accm += '<a href="javascript:;" class="recent-color" style="background-color:#' + color + '" data-color="#' + color + '"></a>'
					}
				}, '');
				
				$('.colors--variant.recentColorsBox').html(content);
				$('.recentColorsBox a').on('click', function (e) {
					var color = $(this).data('color');
					var picker = $(this).closest('.colorPicker');
					
					if (gradientsArray[color]) {
						$('.commonClrDiv a').removeClass('active');
						$(this).find('a').addClass('active');
						colorGradient(color);
						
						//set the color of the picker
						if (picker) {
							picker.find('.input-group-addon.color-box i')[0].style.background = getGradientStyle(color);
						}
					}
					else {
						lEditor.logoSlider('final', 1);
						try {
							colorVariation(color);
							//set the color of the picker
							if (picker) {
								picker.colorpicker('setValue', color);
							}
						} catch (e) {
							$('.finaLogoInner').html('');
							$('.colorNotFound').remove();
							$('.editLogoSlider').removeClass('hidden');
							$('.editFinalLogo').addClass('hidden');
							$(".finalogoSlider").html('<div class="result-option colorNotFound">Not a valid Color code !</div>');
						}
					}
				});
			}
			
			// logo listing by color palettes
			
			function getGradientStyle(color) {
				var stops = gradientsArray[color].stops;
				var content = [];
				
				stops.forEach(element => {
					content.push(element.color + ' ' + element.offset * 100 + '%');
				});
				return 'linear-gradient(to right, ' + content.join(', ') + ')';
			}
			
			function palettsColorVariation(editorParameters) {
				var colorId = editorParameters.id;
				loadMoreStart++;
				var limit = 10;
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'paletts', color_id: colorId, start: loadMoreStart },
					async: true,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							var colorVariant = json.colors;
							var targetLink = parseInt(lEditor.getSession('targetlink'));
							var colorDataType = lEditor.getSession('colorDataType');
							if (typeof colorDataType === 'undefined') {
								colorDataType = 'background';
							}
							var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
							var i = 0;
							
							var k = (loadMoreStart - 1) * limit;
							var type = '';
							
							if (loadMoreStart == 1) {
								lEditor.logoTempArr = [];
								lEditor.logoSlider('final', 1);
							}
							var color = '';
							var colorVariantLength = colorVariant.length;
							$('.load--more--class').remove();
							if (colorVariantLength == 0) {
								return false;
							}
							
							var returnObj = {};
							$('.editFinalLogo').addClass('hidden');
							$('.editLogoSlider').removeClass('hidden');
							
							$.each(colorVariant, function (kee, v) {
								
								var idKey = logoMakerFunction.genRandomId();
								logoTemp.generate.idKey = idKey;
								
								
								logoTemp.generate.bgColor = v.bg_color;
								constantVars.colors.bgColorFamily = v.color_parent;
								
								var textColor = v.text_color;
								var frameColor = v.frame_color;
								var frameFilledColor = v.filled_frame_color;
								var iconFrameColor = v.frame_color;
								var iconColor = v.icon_color;
								var sloganColor = v.slogan_color;
								
								if (gradientsArray[v.text_color]) {
									logoTemp.generate.mainTextColor = "";
									logoTemp.generate.textGradient = v.text_color;
									textColor = getGradientStyle(v.text_color);
								}
								else {
									logoTemp.generate.textGradient = "";
									logoTemp.generate.mainTextColor = v.text_color;
								}
								constantVars.colors.mainTextFamily = v.color_parent;
								
								if (gradientsArray[v.icon_color]) {
									logoTemp.generate.iconColor = "";
									logoTemp.generate.iconGradient = v.icon_color;
									iconColor = getGradientStyle(v.icon_color);
								}
								else {
									logoTemp.generate.iconGradient = "";
									logoTemp.generate.iconColor = v.icon_color;
								}
								constantVars.colors.iconFamily = v.color_parent;
								
								if (gradientsArray[v.frame_color]) {
									logoTemp.generate.frameColor = "";
									logoTemp.generate.frameGradient = v.frame_color;
									frameColor = getGradientStyle(v.frame_color);
								}
								else {
									logoTemp.generate.frameGradient = "";
									logoTemp.generate.frameColor = v.frame_color;
								}
								
								if (gradientsArray[v.filled_frame_color]) {
									logoTemp.generate.frameFilledColor = "";
									logoTemp.generate.frameFilledGradient = v.filled_frame_color;
									frameFilledColor = getGradientStyle(v.filled_frame_color);
								}
								else {
									logoTemp.generate.frameFilledGradient = "";
									logoTemp.generate.frameFilledColor = v.filled_frame_color;
								}
								
								constantVars.colors.frameFamily = v.color_parent;
								
								if (gradientsArray[v.frame_color]) {
									logoTemp.generate.iconFrameColor = "";
									logoTemp.generate.iconFrameGradient = v.frame_color;
									frameFilledColor = getGradientStyle(v.frame_color);
									v.icon_frame_color = v.frame_color;
								}
								else {
									logoTemp.generate.iconFrameGradient = "";
									logoTemp.generate.iconFrameColor = v.frame_color;
									v.icon_frame_color = v.frame_color;
								}
								
								constantVars.colors.iconFrameFamily = v.color_parent;
								
								if (gradientsArray[v.slogan_color]) {
									logoTemp.generate.sloganTextColor = "";
									logoTemp.generate.sloganGradient = v.slogan_color;
									sloganColor = getGradientStyle(v.slogan_color);
								}
								else {
									logoTemp.generate.sloganGradient = "";
									logoTemp.generate.sloganTextColor = v.slogan_color;
								}
								
								constantVars.colors.sloganTextFamily = v.color_parent;
								returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
								logoTemp.generate = returnObj.logoObj;
								lEditor.logoTempArr[k] = JSON.parse(JSON.stringify(logoTemp));
								var favoriteStatus = "";
								var toolTxt = "Add to favorites";
								var dataLogoId = 0;
								var subType = $('.colorPaletteButton.active').attr('data-id');
								if (typeof subType === 'undefined') {
									subType = $('.colorPaletteVariants a.active').attr('data-id');
								}
								var favData = logoMakerFunction.isExistInFavoriteJson('colorPallete', subType, k);
								if (favData !== false) {
									favoriteStatus = "active";
									toolTxt = "Remove from favorites";
									dataLogoId = favData;
								}
								slickElement = '<div class="logos--boxes color-logo-boxes color--variation" data-cpId = "' + v.color_id + '"><div class="item logo--slides logoSlides"><div class="logo-favourite iconFav ' + favoriteStatus + '" data-toggle="tooltip" title="" data-type="favorite" data-listType = "colorPallete" data-id="' + (k) + '" data-logo-id="' + dataLogoId + '" data-original-title="' + toolTxt + '"><i class="icon icon-heart"></i></div><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="color"  data-id="' + (k++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color : ' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div><div class="color-palette-name"><span>' + v.color_name + '</span>';
								//slickElement = '<div class="logos--boxes color-logo-boxes" data-cpId = "'+v.color_id+'"><div class="item logo--slides logoSlides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="color"  data-id="'+(k++)+'"><span>Update to this</span></a></div><div class="svg--slide" style="background-color : '+logoTemp.generate.bgColor+';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>'+returnObj.html+'</div></div></div><div class="color-palette-name"><span>'+v.color_name+'</span>';
								slickElement += '<div class="color-palettes">';
								if (logoTemp.generate.templatePath.isFrame != 0 && logoTemp.generate.framePath != "") {
									if (logoTemp.generate.templatePath.frameType == 'outline') {
										slickElement += '<a href="javascript:;" style="background:' + frameColor + '" data-toggle="tooltip" data-html="true" data-original-title="Container Color : ' + v.frame_color + '"></a>';
									} else {
										slickElement += '<a href="javascript:;" style="background:' + frameFilledColor + '" data-toggle="tooltip" data-html="true" data-original-title="Filled Container Color : ' + v.filled_frame_color + '"></a>';
									}
								}
								if (logoTemp.generate.templatePath.isIcon != 0) {
									slickElement += '<a href="javascript:;" style="background:' + iconColor + '" data-toggle="tooltip" data-html="true" data-original-title="Symbol Color : ' + v.icon_color + '"></a>';
								}
								if (logoTemp.generate.templatePath.isMono != 0) {
									slickElement += '<a href="javascript:;" style="background:' + iconColor + '" data-toggle="tooltip" data-html="true" data-original-title="Monogram Color : ' + v.icon_color + '"></a>';
								}
								if (logoTemp.generate.templatePath.isIconFrame != 0) {
									slickElement += '<a href="javascript:;" style="background:' + iconFrameColor + '" data-toggle="tooltip" data-html="true" data-original-title="Inner Container Color : ' + v.icon_frame_color + '"></a>';
								}
								if (logoTemp.sloganName != "") {
									slickElement += '<a href="javascript:;" style="background:' + sloganColor + '" data-html="true" data-toggle="tooltip" data-original-title="Slogan Color : ' + v.slogan_color + '"></a>';
								}
								if (logoTemp.logoName != "") {
									slickElement += '<a href="javascript:;" style="background:' + textColor + '" data-html="true" data-toggle="tooltip" data-original-title="Company Name Color : ' + v.text_color + '"></a>';
								}
								slickElement += '<a href="javascript:;" data-html="true" style="background-color:' + v.bg_color + '" data-toggle="tooltip" data-original-title="Background Color : ' + v.bg_color + '"></a>';
								slickElement += '</div>';
								slickElement + '</div></div>';
								
								$(".finalogoSlider").append(slickElement);
								dh_utility_common.changeBg();
								i++;
								if (json.pagination == 1 && i == colorVariantLength) {
									
									$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMorePaletts load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
									
								}
								
							});
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
			}
			
			// for pagination 
			$('body').on('click', '.loadMoreColors', function () {
				$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
				fixedColorVariation(editorParameters);
			});
			
			$('body').on('click', '.loadMorePaletts', function () {
				$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
				palettsColorVariation(editorParameters);
			});
			
			
			$('body').on('click', '.loadMoreGenerate', function () {
				//$('.loadMoreLogosBoxes').css({ 'display': 'inline-block' });
				lEditor.generateDynamicLogos();
				$("html, body").animate({
					scrollTop: $('html').height() - 300
				}, 'slow');
			});
			
			// check icon is available or not in logo 
			function isIconAvail() {
				
				var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
				var isIcon = currLogo.generate.templatePath.isIcon;
				var isMono = currLogo.generate.templatePath.isMono;
				var editIconVal = lEditor.getSession('iconValue');
				
				
				if (isIcon == 0) {
					$('.layoutDisplay, .cancel--symbol').addClass('hidden');
					$('.symbolVariations').removeClass('hidden');
					$('.noResultFound').show();
					loadMoreStart = 0;
					if (editIconVal != null && editIconVal != 'undefined' && editIconVal != '') {
						$('.editFinalLogo, .previewSection').addClass('hidden');
						$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
						lEditor.editIconsData();
					} else {
						$('.editFinalLogo, .previewSection').addClass('hidden')
						$('.editLogoSlider, .currentLogoBox').removeClass('hidden');
						$('.finalogoSlider').html('<div class="icons-blank result-option iconBlank">Type something above or pick a related term to see symbols</div>');
					}
					
				} else {
					$('.layoutDisplay, .editSymbolsSection, .cancel--symbol').removeClass('hidden');
					$('.symbolVariations').addClass('hidden');
					$('.noResultFound').hide();
				}
				
			}
			
			// check monogram is available or not 
			function isMonoAvail() {
				var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
				var isMono = currLogo.generate.templatePath.isMono;
				if (parseInt(isMono) == 0) {
					$('.layoutDisplay, .cancel--symbol, .editFinalLogo').addClass('hidden');
					$('.monoVariations, .editLogoSlider').removeClass('hidden');
					$('.editMonogram').trigger('click');
				} else if (parseInt(isMono) == 1) {
					$('.layoutDisplay, .editMonoSection, .cancel--symbol, .editFinalLogo').removeClass('hidden');
					$('.monoVariations, .editLogoSlider').addClass('hidden');
					lEditor.getMonogramVariations();
				}
				
			}
			
			// color listing 
			
			function colorVariation(colorVal) {
				
				lEditor.logoSlider('final', 1);
				var dataOption = colorVal;
				var colorVariant = logoMakerFunction.getShadesOfColor(dataOption);
				var targetLink = parseInt(lEditor.getSession('targetlink'));
				var colorDataType = lEditor.getSession('colorDataType');
				if (typeof colorDataType === 'undefined') {
					colorDataType = 'background';
				}
				lEditor.logoTempArr = [];
				var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
				var i = 0;
				var k = 0;
				var type = '';
				var color = '';
				var colorVariantLength = colorVariant.length;
				var returnObj = {};
				$('.editFinalLogo').addClass('hidden');
				$('.editLogoSlider').removeClass('hidden');
				$.each(colorVariant, function (k, v) {
					var idKey = logoMakerFunction.genRandomId();
					logoTemp.generate.idKey = idKey;
					switch (colorDataType) {
						case 'background': {
							color = "" + v;
							
							logoTemp.generate.bgColor = color;
							constantVars.colors.bgColorFamily = dataOption;
							returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
							break;
						}
						case 'foreground': {
							var j = 0;
							$('.colorSection .subnav li.active').each(function () {
								color = "" + v;
								var option = $(this).find('a').data('target');
								switch (option) {
									case 13: {
										logoTemp.generate.mainTextColor = color;
										logoTemp.generate.textGradient = "";
										constantVars.colors.mainTextFamily = dataOption;
										
										break;
									}
									case 14: {
										logoTemp.generate.sloganTextColor = color;
										logoTemp.generate.sloganGradient = "";
										constantVars.colors.sloganTextFamily = dataOption;
										break;
									}
									case 15: {
										logoTemp.generate.iconColor = color;
										logoTemp.generate.iconGradient = "";
										constantVars.colors.iconFamily = dataOption;
										break;
									}
									case 16: {
										
										if (logoTemp.generate.templatePath.frameType == "filled") {
											logoTemp.generate.frameFilledColor = color;
											logoTemp.generate.frameFilledGradient = "";
										} else {
											logoTemp.generate.frameColor = color;
											logoTemp.generate.frameGradient = "";
										}
										logoTemp.generate.frameColor = color;
										logoTemp.generate.frameGradient = "";
										constantVars.colors.frameFamily = dataOption;
										break;
									}
									case 43: {
										logoTemp.generate.iconFrameColor = color;
										logoTemp.generate.iconFrameGradient = "";
										constantVars.colors.iconFrameFamily = dataOption;
										break;
									}
								}
								
								
								returnObj = logoMakerFunction.generateLogoTemplateByOption(logoTemp, type, idKey);
								j++;
							});
						}
					}
					logoTemp.generate = returnObj.logoObj;
					lEditor.logoTempArr[k] = JSON.parse(JSON.stringify(logoTemp));
					$('.colorNotFound').remove();
					slickElement = '<div class="logos--boxes"><div class="item logo--slides logoSlides"><div class="logo-favourite iconFav" data-toggle="tooltip" title="" data-type="favorite" data-id="' + (k) + '" data-logo-id="0" data-original-title="Add to favorites"><i class="icon icon-heart"></i></div><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="color" data-id="' + (k++) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color:' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
					$(".finalogoSlider").append(slickElement);
					dh_utility_common.changeBg();
					i++;
					
					$('.finaLogoInner').html('');
					
				});
				
				
			}
			
			// for setting scale of group in svg
			function setScale(width, currWidth, height, currHeight) {
				var scale = 1;
				var wScale = 1;
				var hScale = 1;
				if (currWidth > width) {
					wScale = 1 * (width / currWidth);
				}
				if (currHeight > height) {
					hScale = 1 * (height / currHeight);
				}
				scale = wScale;
				if (wScale > hScale) {
					scale = hScale;
				}
				if (scale == 0) scale = 1;
				return scale;
				
			}
			
			// for updating current object 
			function updateCurrLogoObject(obj) {
				var generate = {};
				
				generate = $.extend(true, {}, obj);//JSON.parse(JSON.stringify(obj));
				if (generate.generate.templatePath.isIcon == 1 || generate.generate.templatePath.isMono == 1) {
					if (typeof generate.generate.templatePath.iconFrameBox !== 'undefined') {
						if (typeof generate.generate.templatePath.iconFrameBox.x !== 'undefined' || generate.generate.templatePath.updates.iconFrameBox.x !== 'undefined') {
							generate.generate.templatePath.iconFrameBox.x = generate.generate.templatePath.updates.iconFrameBox.x;
							generate.generate.templatePath.iconFrameBox.y = generate.generate.templatePath.updates.iconFrameBox.y;
							generate.generate.templatePath.iconFrameBox.scale = generate.generate.templatePath.updates.iconFrameBox.scale;
						}
					}
					if (typeof generate.generate.templatePath.icon.x !== 'undefined') {
						generate.generate.templatePath.icon.x = generate.generate.templatePath.updates.icon.x;
						generate.generate.templatePath.icon.y = generate.generate.templatePath.updates.icon.y;
						generate.generate.templatePath.icon.scale = generate.generate.templatePath.updates.icon.scale;
					}
				}
				if (typeof generate.generate.templatePath.text.x !== 'undefined') {
					generate.generate.templatePath.text.x = generate.generate.templatePath.updates.text.x;
					generate.generate.templatePath.text.y = generate.generate.templatePath.updates.text.y;
					generate.generate.templatePath.text.scale = generate.generate.templatePath.updates.text.scale;
				}
				
				if (typeof generate.generate.templatePath.slogan.x !== 'undefined') {
					generate.generate.templatePath.slogan.x = generate.generate.templatePath.updates.slogan.x;
					generate.generate.templatePath.slogan.y = generate.generate.templatePath.updates.slogan.y;
					generate.generate.templatePath.slogan.scale = generate.generate.templatePath.updates.slogan.scale;
				}
				
				if (typeof generate.generate.templatePath.textAndSlogan.x !== 'undefined') {
					generate.generate.templatePath.textAndSlogan.x = generate.generate.templatePath.updates.textAndSlogan.x;
					generate.generate.templatePath.textAndSlogan.y = generate.generate.templatePath.updates.textAndSlogan.y;
					generate.generate.templatePath.textAndSlogan.scale = generate.generate.templatePath.updates.textAndSlogan.scale;
				}
				
				if (typeof generate.generate.templatePath.containerBody.x !== 'undefined') {
					generate.generate.templatePath.containerBody.x = generate.generate.templatePath.updates.containerBody.x;
					generate.generate.templatePath.containerBody.y = generate.generate.templatePath.updates.containerBody.y;
					generate.generate.templatePath.containerBody.scale = generate.generate.templatePath.updates.containerBody.scale;
				}
				
				if (typeof generate.generate.templatePath.logoContainer.x !== 'undefined') {
					generate.generate.templatePath.logoContainer.x = generate.generate.templatePath.updates.logoContainer.x;
					generate.generate.templatePath.logoContainer.y = generate.generate.templatePath.updates.logoContainer.y;
					generate.generate.templatePath.logoContainer.scale = generate.generate.templatePath.updates.logoContainer.scale;
				}
				
				if (generate.generate.templatePath.isIconFrame == 1) {
					
					if (typeof generate.generate.templatePath.iconFrame.x !== 'undefined' || generate.generate.templatePath.updates.iconFrame.x !== 'undefined') {
						generate.generate.templatePath.iconFrame.x = generate.generate.templatePath.updates.iconFrame.x;
						generate.generate.templatePath.iconFrame.y = generate.generate.templatePath.updates.iconFrame.y;
						generate.generate.templatePath.iconFrame.scale = generate.generate.templatePath.updates.iconFrame.scale;
						//	alert(generate.generate.templatePath.iconFrame.scale);
					}
				}
				
				if (generate.generate.templatePath.isFrame == 1) {
					if (typeof generate.generate.templatePath.frame.x !== 'undefined' || generate.generate.templatePath.updates.frame.x !== 'undefined') {
						generate.generate.templatePath.frame.x = generate.generate.templatePath.updates.frame.x;
						generate.generate.templatePath.frame.y = generate.generate.templatePath.updates.frame.y;
						generate.generate.templatePath.frame.scale = generate.generate.templatePath.updates.frame.scale;
					}
				}
				return generate;
			}
			
			
			// saving logo  
			$('#saveIcon').click(function () {
				
				$(this).addClass('animated');
				setTimeout(function () { $('.topActionBtn').removeClass('animated'); }, 1500);
				lEditor.currentLogo.currencyId = lEditor.getSession('currencyId');
				var logoId = lEditor.getCurrentLogoId();
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'save', logo_id: logoId, 'curr_logo': lEditor.validateJSON(lEditor.currentLogo), 'svg_logo': logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate),exceptions : editor_exceptions },
					async: false,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							lEditor.alertMessages('error', json.msg);
						} else {
							lEditor.alertMessages('success', json.msg);
							lEditor.setCurrentLogoId(json.data.logo_id);
						}
                                                clearException();
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
				
			});
			
			// copieng logo 
			$('#copyIcon').click(function () {
				$(this).addClass('animated');
				setTimeout(function () { $('.topActionBtn').removeClass('animated'); }, 1500);
				lEditor.currentLogo.currencyId = lEditor.getSession('currencyId');
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'save', logo_id: 0, 'curr_logo': lEditor.validateJSON(lEditor.currentLogo), 'svg_logo': logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate),exceptions : editor_exceptions },
					async: false,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							lEditor.alertMessages('error', json.msg);
						} else {
							lEditor.setCurrentLogoId(json.data.logo_id);
							lEditor.alertMessages('success', json.msg);
							$('.savedLogoCount').html('(' + json.data.saved_count + ')');
							$('.favLogoCount').html('(' + json.data.fav_count + ')');
						}
                                                clearException();
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
			});
			
			
			//	$('body').on('click','.removeLogo',function(e){
			//		e.stopPropagation();
			//		var obj = $(this);
			//		var logoId = $(this).data('id');
			//		$.ajax({
			//			url:DH.baseURL + '/logoMakerAjax.php',
			//			type:'POST',
			//			data:{action:'delete',logo_id:logoId},
			//			async:false,
			//			success: function(json){
			//				json = $.parseJSON(json);
			//				if(json.status == 0){
			//					
			//				}else{
			//					obj.parents('.savedLogoLists').remove();
			//				}
			//			},
			//			error: function(jqXHR, textStatus, errorThrown) {
			//				//alert(errorThrown);
			//			}
			//		});
			//	});
			
			// delteng logo
			
			$('body').on('click', '.confirmDelete', function () {
				var confirmId = $(this).attr('data-logoid');
				var msgBox = $('.favoriteLogoTab .no-favourite');
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'delete', logo_id: confirmId },
					async: false,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							$('[data-id="' + confirmId + '"]').parents('.savedLogoLists').remove();
							$('[data-id="' + confirmId + '"]').parents('.favoriteLogoLists').remove();
							$('.savedLogoCount').html('(' + json.saved_count + ')');
							$('.favLogoCount').html('(' + json.favorite_count + ')');
							msgBox[$('.favoriteLogoLists.saved-logo-lists').length == 0 ? 'show' : 'hide']();
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						alert(errorThrown);
					}
				});
				$('#myModal').modal('hide');
			})
			
			// removing logo 	
			$('body').on('click', '.removeLogo', function (e) {
				e.stopPropagation();
				var obj = $(this);
				var logoId = $(this).data('id');
				$('.confirmDelete').attr('data-logoid', logoId);
				$('#myModal').modal('show');
			});
			
			// sharing logo
			$('body').on('click', '.shareButton, .shareLogo', function (e) {
				e.stopPropagation();
				$('#share-modal').modal('show');
				$('.btnCopy').text('Copy');
				lEditor.previewColors();
				lEditor.previewLogo();
			});
			
			$('.share-modal-popup').on('click', '.shareCommon', function () {
				var getId = $(this).data('id');
				$(this).addClass('active');
				$(this).siblings().removeClass('active');
				$(getId).addClass('active');
				$(getId).siblings().removeClass('active');
			});
			
			
			
			$('.loginOption').on('click', function () {
				$('.le--sidenavbar').addClass('focusable');
				$('.li-side--menu').animate({ right: '0px' }, 'fast');
				$('.le--sidenavbar').css({ 'background-color': 'rgba(0,0,0,0.4)', 'z-index': '9999', 'right': '0px' });
				$('body').css('overflow', 'hidden');
				
			});
			$('body').on('click', '.le--close', function () {
				$('.li-side--menu').animate({ right: '-420px' }, 'fast', function () {
					$('.le--sidenavbar').css('right', '-100%');
					$('body').css('overflow', 'auto');
					$('.le--sidenavbar').removeClass('focusable');
				});
				
			})
			$('body').on('click', '.le--sidenavbar', function (e) {
				if (!$(e.target).closest('.li-side--menu').length) {
					$('.li-side--menu').animate({ right: '-420px' }, 'fast', function () {
						$('.le--sidenavbar').css('right', '-100%');
						$('body').css('overflow', 'auto');
						$('.le--sidenavbar').removeClass('focusable');
					});
				}
			});
			
			$('.logoVariations').on('click', function () {
				$('.logoVariationContainer').append('<div class="logo-variation-container logoContainer"></div>');
				$('.logoVariationContainer .sliderContainer').addClass('active');
				$('body').css('overflow', 'hidden');
			});
			
			$('body').on('click', '.logoContainer, .closeVariation', function (e) {
				if (e.target == this) {
					$('.logoVariationContainer .sliderContainer').removeClass('active');
					setTimeout(function () {
						$('.logoContainer').remove();
						$('body').css('overflow', 'auto');
					}, 300);
				}
			});
			
			// Open Logo detail from saved and favourite logo section 
			$('body').on('click', '.openLogoDetail', function () {
				var obj = $(this);
				var logoId = $(this).data('id');
				var editorId = logoId * 11;
				
				window.location.href = DH.baseURL + '/tools/logo-maker?editor=' + editorId;
			});
			
			$('body').on('click', '.setSaveDefaultLogo', function () {
				var obj = $(this);
				var logoId = $(this).data('id');
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'default_logo', logo_id: logoId },
					async: false,
					success: function (json) {
						json = JSON.parse(json);
						if (json.status == 0) {
							
						} else {
							var logo = json.data.logo;
							lEditor.setCurrentLogoId(logo.logo_id);
							lEditor.setSession('sloganText', logo.logo_slogan);
							lEditor.updateFontsObject('logo');
							lEditor.updateFontsObject('slogan');
							lEditor.setSession('logoname', logo.logo_name);
							lEditor.setSession('currentLogo', logo.logo_json);
							$('.commonEditSection').addClass('hidden');
							lEditor.setSession('targetlink', 1);
							lEditor.setSession('parentlink', 0);
							lEditor.setSession('defaultlink', 0);
							$('.table-menu li, .currentLogoContainer,.logoTab').removeClass('active');
							$('.logosTabBox').removeClass('tabActive');
							$('.logoTab:first-child').addClass('active');
							$('.closeCurrentLogo, .expandLogo').hide();
							$('body').css('overflow', 'auto');
							lEditor.editLogoSteps();
							lEditor.previewColors();
							lEditor.previewLogo();
							$('.editSloganName').val(lEditor.getSession('sloganText'));
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
			});
			
			// saving logo after using slidre
			function saveSliderData() {
				var logoId = lEditor.getCurrentLogoId();
				lEditor.setSession('currentLogo', JSON.stringify(lEditor.currentLogo));
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'save', logo_id: logoId, 'curr_logo': lEditor.validateJSON(lEditor.currentLogo), 'svg_logo': logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate),exceptions : editor_exceptions },
					async: true,
					success: function (json) {
						json = JSON.parse(json);
						if (json.status == 0) {
							lEditor.alertMessages('error', json.msg);
						} else {
							lEditor.alertMessages('success', json.msg);
							lEditor.setCurrentLogoId(json.data.logo_id);
						}
                                                clearException();
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
				lEditor.previewColors();
				lEditor.previewLogo();
			}
			
			// for pagination 
			$('body').on('click', '.loadMoreSavedLogos', function () {
				getSavedLogoListing();
			});
			
			$('body').on('click', '.loadMoreFavoriteLogos', function () {
				getFavoriteLogoListing();
			});
			
			// by tushar 
			function getSavedLogoListing() {
				var htm = "";
				var currLogoId = lEditor.getCurrentLogoId();
				
				savedPagination++;
				if (savedPagination == 1) {
					$('.savedLogo').append('<div class="loadMoreIcons common--loader text-center"><div class="cssload-container"><div class="cssload-speeding-wheel"></div></div></div>');
				}
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'listing', start: savedPagination },
					async: true,
					success: function (json) {
						$('.loadMoreIcons').remove();
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							
							var i = 0;
							$('.loadMoreSavedLogos').parents('.load--more--class').remove();
							if (json.data.logos.length == 0) { return false; }
							$.each(json.data.logos, function (k, v) {
								var closeHtml = '';
								var defaultHtml = '';
								var activeFav = '';
								var favToolTip = 'Add to favorites';
								if (v.logo_is_favorite == 1) {
									activeFav = 'active';
									favToolTip = 'Remove from favorites';
								}
								if (currLogoId != v.logo_id) {
									closeHtml = '<img src="' + DH.getAssetImgUrl('logo-maker/close.svg') + '" class="removeLogo" data-id="' + v.logo_id + '">';
									defaultHtml = '<div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update openLogoDetail" data-id="' + v.logo_id + '"><span>Update to this</span></a></div>';
									dh_utility_common.changeBg();
								}
								$('.savedLogo').append('<div class="savedLogoLists saved-logo-lists" style="background-color:' + v.bg_color + '"><div class="water-mark-img"></div><div class="logo-favourite favLogoIcon ' + activeFav + '" data-placement="bottom" data-toggle="tooltip" title="" data-id="' + v.logo_id + '" data-original-title="' + favToolTip + '"><i class="icon icon-heart"></i></div>' + closeHtml + ' ' + v.logo_svg + ' ' + defaultHtml + '</div>');
								i++;
								if (json.pagination == 1 && i == json.data.logos.length) {
									$('.savedLogo').append('<div class="load--more--class"><a class="loadMoreSavedLogos load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
								}
							});
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
				
			};
			
			// by tushar     
			function userLoginPopup() {
				login.openSignupBox();
			}
			
			// restricting back button 
			window.history.pushState('', null, '');
			$(window).on('popstate', function () {
				var page = parseInt(sessionStorage.getItem('currPage'));
				if (page == 7) {
					return true;
				} else if (page == 1 || isNaN(page)) {
					history.go(-1);
					return false;
				} else if (page == 2) {
					window.history.pushState('', null, '');
					sessionStorage.setItem('currPage', 1);
					return true;
				} else {
					
					page = page - 1;
					if (page < 6) {
						$("#logomaker_signup_box").modal('hide');
						$("#logomaker_login_box").modal('hide');
					}
					window.history.pushState('', null, '');
					sessionStorage.setItem('currPage', page);
					
					lEditor.showStep();
					return false;
				}
				return true;
			});
			
			
			$('#industryName').change(function () {
				if ($(this).val() == 2010) {
					$(".extra--industry").show();
				} else {
					$(".extra--industry").hide();
				}
			});
			
			// changing template of logo ( left ,right ,down ,up )
			$('.layoutTemplate').click(function () {
				var type = $(this).data('option');
				var i = 0;
				lEditor.logoTempArr = [];
				lEditor.logoSlider('final', 1);
				var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
				var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
				var isIcon = 0;
				var isMono = 0;
				var isFrame = 0;
				var isIconFrame = 0;
				var isEqual = 0;
				if (typeof logoTemp.generate.templatePath.isIcon !== "undefined") {
					isIcon = logoTemp.generate.templatePath.isIcon;
				}
				if (typeof logoTemp.generate.templatePath.isMono !== "undefined") {
					isMono = logoTemp.generate.templatePath.isMono;
				}
				if (typeof logoTemp.generate.templatePath.isFrame !== "undefined") {
					isFrame = logoTemp.generate.templatePath.isFrame;
				}
				if (typeof logoTemp.generate.templatePath.isIconFrame !== "undefined") {
					isIconFrame = logoTemp.generate.templatePath.isIconFrame;
				}
				if (typeof logoTemp.generate.templatePath.isEqual !== "undefined") {
					isEqual = logoTemp.generate.templatePath.isEqual;
				}
				
				
				var templates = getTemplatesByType(type, isIcon, isMono, isFrame, isIconFrame, isEqual);
				$.each(templates, function (k, v) {
					logoTemp.generate.templatePath = v;
					logoTemp.generate.templatePath.frameType = currLogo.generate.templatePath.frameType;
					logoTemp.generate.templatePath.frameOverlap = currLogo.generate.templatePath.frameOverlap;
					var idKey = logoMakerFunction.genRandomId();
					logoTemp.generate.idKey = idKey;
					var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, idKey);
					logoTemp.generate = returnObj.logoObj;
					$('.finaLogoInner').html('<div class="svg--slide" style="background-color:' + lEditor.currentLogo.generate.bgColor + ';"><div class="svg-slide--content svgSlideContent"><div class="water-mark-img"></div>' + returnObj.html + '<div class="bgOutlineBox bg-outline-box"></div></div></div>');
					currObj = updateCurrLogoObject(logoTemp);
					lEditor.setDefaultLogo(currObj, currObj.generate);
					
				});
				
				addEditOptions();
				
				if (type == 3) {
					$('.topParent-5').parent('li').removeClass('active');
					$('.symbolSection').addClass('hidden');
					$('[data-option=".symbolSection"] .changeOptionText').text('Add Symbol');
					currLogo.generate.iconPath = "";
					currLogo.generate.templatePath.isMono = "0";
					lEditor.setSession('currentLogo', JSON.stringify(currLogo));
					lEditor.editLogoSteps();
					$('.subMenu-7').trigger('click');
					$('.previewSection').removeClass('hidden');
				} else {
					if (isMono == 1) {
						$('.subMenu-32').trigger('click');
						lEditor.editLogoSteps();
					} else {
						$('.subMenu-31').trigger('click');
						lEditor.editLogoSteps();
					}
				}
				
				logoMakerFunction.resetSlider('all');
				$('#saveIcon').trigger('click');
			});
			
			
			
			
			$('.cancelSymbol').click(function (e) {
				lEditor.setSession('targetlink', 31);
				lEditor.setSession('parentlink', 5);
				$('.menuSteps li').removeClass('active');
				lEditor.editLogoSteps();
			});
			
			$('.cancelMono').click(function (e) {
				lEditor.setSession('targetlink', 32);
				lEditor.setSession('parentlink', 5);
				$('.menuSteps li').removeClass('active');
				lEditor.editLogoSteps();
			});
			
			$('.cancelFrameContainer').click(function (e) {
				$('.containerOptions').removeClass('active');
				lEditor.setSession('targetlink', 6);
				lEditor.setSession('defaultlink', 24);
				$('.menuSteps li').removeClass('active');
				lEditor.editLogoSteps();
			});
			
			$('.cancelIconFrameContainer').click(function (e) {
				$('.innerContainerOptions').removeClass('active');
				lEditor.setSession('targetlink', 6);
				lEditor.setSession('defaultlink', 40);
				$('.menuSteps li').removeClass('active');
				lEditor.editLogoSteps();
			});
			
			
			// 0 => Center, 1 => Left, 2 => Right, 3 => None, 4=> Down
			function getTemplatesByType(type, isIcon, isMono, isFrame, isIconFrame, isEqual) {
				var templates = [];
				
				$.each(templatesDataJson, function (k, v) {
					if (typeof v.is_icon_frame == 'undefined' || v.is_icon_frame == null) {
						v.is_icon_frame = 0;
					}
					if (type == 3) {
						isIconFrame = 0;
						// alert();
						if (v.template_direction == type && v.is_frame == isFrame && v.is_icon_frame == isIconFrame && v.is_equal == isEqual) {
							templates.push(v.template_code);
						}
					} else {
						// alert(1);
						if (v.template_direction == type && v.is_icon == isIcon && v.is_mono == isMono && v.is_frame == isFrame && v.is_icon_frame == isIconFrame && v.is_equal == isEqual) {
							templates.push(v.template_code);
						}
					}
				});
				return templates;
			}
			
			// listing of layout variations 
			function getLayoutVariations() {
				var targetLink = parseInt(lEditor.getSession('targetlink'));
				lEditor.logoTempArr = [];
				var currLogo = JSON.parse(lEditor.getSession('currentLogo'));
				var logoTemp = JSON.parse(lEditor.getSession('currentLogo'));
				var i = 0;
				var frames = [];
				if (loadMoreStart == 0) {
					lEditor.logoSlider('final', 1);
				}
				$('.load--more--class').remove();
				$('.editFinalLogo').addClass('hidden');
				$('.editLogoSlider').removeClass('hidden');
				var templatesDataJsonArray = [];
				if (logoTemp.generate.templatePath.isIcon == 0 && logoTemp.generate.templatePath.isMono == 0) {
					logoTemp.generate.iconPath = '<path d="M85.141,16.424H14.858L1.46,29.821v3.686L50,83.576l2.43-2.429l0.07,0.041l0.149-0.262L97.774,34.29  l0.765-0.771v-3.698L85.141,16.424z M87.568,26.224l3.598,3.598h-7.195L87.568,26.224z M82.981,21.637l0.899,0.9l-6.412,6.414  l-7.313-7.313H82.981z M70.968,29.821H56.375l7.296-7.296L70.968,29.821z M57.187,21.637l-7.201,7.202l-7.201-7.202H57.187z   M43.596,29.821H28.969l7.314-7.313L43.596,29.821z M17.018,21.637h12.763l-7.01,7.01l-6.381-6.382L17.018,21.637z M12.703,25.95  l3.87,3.871h-7.74L12.703,25.95z M8.832,35.035h12.397l16.732,29.129L8.832,35.035z M47.392,70.116l-20.15-35.082h20.15V70.116z   M52.606,70.536V35.035h20.392L52.606,70.536z M62.594,63.615l16.415-28.581h12.174L62.594,63.615z"></path>';
				}
				if (currLogo.generate.templatePath.isIcon == 1) {
					$.each(templatesDataJson, function (k, v) {
						if (v.template_code.isMono == 0) {
							templatesDataJsonArray.push(v);
						}
					});
				} else if (currLogo.generate.templatePath.isMono == 1) {
					$.each(templatesDataJson, function (k, v) {
						if (v.template_code.isIcon == 0) {
							templatesDataJsonArray.push(v);
						}
					});
				} else {
					$.each(templatesDataJson, function (k, v) {
						if (v.template_code.isMono == 0) {
							templatesDataJsonArray.push(v);
						}
					});
				}
				
				var templateLength = templatesDataJsonArray.length;
				
				
				if (logoTemp.generate.templatePath.isFrame == 0) {
					
					jqXHR = $.ajax({
						url: DH.baseURL + '/logoMakerAjax.php',
						type: 'POST',
						data: { action: 'randomData', start: randomPagination },
						async: true,
						success: function (json) {
							var json = JSON.parse(json);
							$.each(json.data.frames, function (k, v) {
								frames.push(v);
							});
							for (var i = loadMoreStart; i < templateLength;) {
								
								logoTemp.generate.templatePath = templatesDataJsonArray[i].template_code;
								var randomFrame = logoMakerFunction.getRandomCombination([frames.length]);
								logoTemp.generate.framePath = frames[randomFrame[0]].svg;
								logoTemp.generate.templatePath.frameType = frames[randomFrame[0]].type;
								logoTemp.generate.templatePath.frameOverlap = frames[randomFrame[0]].isOverlap;
								var idKey = logoMakerFunction.genRandomId();
								logoTemp.generate.idKey = idKey;
								var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, idKey);
								logoTemp.generate = returnObj.logoObj;
								lEditor.logoTempArr[i] = updateCurrLogoObject(JSON.parse(JSON.stringify(logoTemp)));
								slickElement = '<div class="logos--boxes color-logo-boxes"><div class="item logo--slides logoSlides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="color"  data-id="' + (i) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color : ' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
								$(".finalogoSlider").append(slickElement);
								loadMoreStart = i;
								i++;
								if (i % 10 == 0) {
									$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreVariations load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
									break;
								}
								
								//	}	
							}
						}
					});
				} else {
					//	frames.push({"id":0,"svg":logoTemp.generate.framePath});
					//	console.log(logoTemp.generate);
					for (var i = loadMoreStart; i < templateLength;) {
						//	if(v.template_code.isIcon == 0){
						logoTemp.generate.templatePath = templatesDataJsonArray[i].template_code;
						if (logoTemp.generate.templatePath.isFrame == 1) {
							logoTemp.generate.templatePath.frameType = currLogo.generate.templatePath.frameType;
							logoTemp.generate.templatePath.frameOverlap = currLogo.generate.templatePath.frameOverlap;
						} else {
							logoTemp.generate.templatePath.frameType = "";
							logoTemp.generate.templatePath.frameOverlap = "";
						}
						//		var randomFrame = logoMakerFunction.getRandomCombination([frames.length]);
						//		logoTemp.generate.framePath = frames[randomFrame[0]].svg;
						var idKey = logoMakerFunction.genRandomId();
						logoTemp.generate.idKey = idKey;
						var returnObj = logoMakerFunction.generateLogoTemplate(logoTemp.generate, idKey);
						logoTemp.generate = returnObj.logoObj;
						lEditor.logoTempArr[i] = updateCurrLogoObject(JSON.parse(JSON.stringify(logoTemp)));
						slickElement = '<div class="logos--boxes color-logo-boxes"><div class="item logo--slides logoSlides"><div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update setDefaultLogo" data-type="color"  data-id="' + (i) + '"><span>Update to this</span></a></div><div class="svg--slide" style="background-color : ' + logoTemp.generate.bgColor + ';"><div class="svg-slide--content TopLogoTemplate"><div class="water-mark-img"></div>' + returnObj.html + '</div></div></div></div>';
						$(".finalogoSlider").append(slickElement);
						loadMoreStart = i;
						i++;
						if (i % 10 == 0) {
							$(".finalogoSlider").append('<div class="load--more--class"><a class="loadMoreVariations load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
							break;
						}
						//	alert(i);
					}
					//	});
				}
				
				
			}
			
			// for step -5 ( bricks ) 
			function getIconTagListingNew() {
				var industryName = lEditor.getSession('extraIndustry');
                                
				if (industryName == "") {
					industryName = 'company';
				}
                                if(industryName.toLowerCase() == 'wedding service' || industryName.toLowerCase() == 'wedding-service'){
                                    industryName = 'wedding';
                                }
                                //debugger;
                                industryName = getSlugNew(industryName);
                                //debugger;
				var htm = '<div class="loadMoreIcons text-center"><div class="cssload-container"><div class="cssload-speeding-wheel"></div></div></div>';
				$('.start-ico-list').html(htm);
				jqXHR = $.ajax({
					url: DH.baseURL + '/dh_ajax.php',
					type: 'POST',
					data: { action: 'api', action_type : 'tags_only' ,'tags_only': 1, slug: industryName },
					success: function (json) {
						json = $.parseJSON(json);
						var i = 0;
						if(Object.keys(json.tags).length){                                                    
                                                                                              
                                                    $.each(json.tags, function (k, v) {
                                                        i++;
                                                        if (v.name != "") {
                                                                htm += '<div class="bricks"><div class="start-ico-tab startIcoTab" title="' + v.name + '" data-tag="' + v.name + '">' + v.name + '</div></div>';
                                                        }
                                                        if (i == 40) {
                                                                return false;
                                                        }
                                                    });
                                                }
                                                
						
						if (htm != "") {
							$('.start-ico-list').html(htm);
						}
						$('.start-ico-list .loadMoreIcons').remove();
						$('.start-ico-list').removeClass('hidden');
					},
					error: function (jqXHR, textStatus, errorThrown) {
						$('#loadere').hide();
					}
				});
			};
			// for getting icon tag listing  
			// for step -5 ( bricks )        
			function getIconTagListing(industryId) {				
				if (typeof industryId === 'undefined') {
					var industryId = lEditor.getSession('industryId');
				} else {
					industryId = 0;
				}
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'tags', industry_id: industryId },
					async: true,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							var htm = '';
							var i = 0;
							$.each(json.data.tags, function (k, v) {
								i++;
								htm += '<div class="bricks"><div class="start-ico-tab startIcoTab" data-tag="' + v.icontag_tag + '">' + v.icontag_tag + '</div></div>';
								if (i == 40) {
									return false;
								}
							});
							$('.start-ico-list').removeClass('hidden');
							$('.start-ico-list').html(htm);
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
			};
                        //Added for version 2 functionality
			function getRecomIconListing() {
                            
                            //console.log('---getRecomIconListing---');  
                            var industryName = lEditor.getSession('extraIndustry');                                
                            if (industryName == "") {
                                    industryName = 'company';
                            } 
                            if(industryName.toLowerCase() == 'wedding service' || industryName.toLowerCase() == 'wedding-service'){
                                industryName = 'wedding';
                            }
                            industryName = getSlugNew(industryName);
                            $('.start-ico-list').html('');
                            var slug = industryName;
                            var searchBtn = $('.step-holder.step_5 .logo-search-form').find('.searchIcon');
                            lEditor.setSession('iconValue', slug);
                            $('.icons-search-bar .error-text').hide();
                            $('#tags').addClass('active');
                            $('.icons-search-bar .error-text').hide();
                            //$('#tags').focus().click().val(slug);
                            $('#tags').focus().val(slug);
                            lEditor.objIconSearch = "";
                            //debugger;
			    searchBtn.trigger('click');
			};
                        function getSlugNew(str){
                            if(str != ''){
                                var regex = /(&amp;|&)(.*)?/gi; //match & in between or end                                
                                str = str.replace(regex,"");
                            }
                            return str.trim();
                            
                        }
			/*== favorite - start ==*/
			// code by Tushar
			function getFavoriteLogoListing() {
				var htm = "";
				var currLogoId = lEditor.getCurrentLogoId();
				
				favoritePagination++;
				if (favoritePagination == 1) {
					$('.favoriteLogo').append('<div class="loadMoreIcons common--loader text-center"><div class="cssload-container"><div class="cssload-speeding-wheel"></div></div></div>');
				}
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'fav_listing', start: favoritePagination },
					async: true,
					success: function (json) {
						$('.loadMoreIcons').remove();
						json = $.parseJSON(json);
						if (json.status == 0) {
							
						} else {
							
							var i = 0;
							var msgBox = $('.favoriteLogoTab .no-favourite');
							$('.loadMoreFavoriteLogos').parents('.load--more--class').remove();
							if (json.data.logos.length == 0) {
								msgBox.show();
								return false;
							}
							msgBox.hide();
							$.each(json.data.logos, function (k, v) {
								var closeHtml = '';
								var defaultHtml = '';
								var activeFav = '';
								var favToolTip = 'Add to favorites';
								if (parseInt(v.logo_is_favorite) == 1) {
									activeFav = 'active';
									favToolTip = 'Remove from favorites';
								}
								if (currLogoId != v.logo_id) {
									closeHtml = '<img src="' + DH.getAssetImgUrl('logo-maker/close.svg') + '" class="removeLogo" data-id="' + v.logo_id + '">';
									defaultHtml = '<div class="logoSlide-overlay gradient-div"><a href="javascript:;" class="icons-edit icons-update openLogoDetail" data-id="' + v.logo_id + '"><span>Update to this</span></a></div>';
									dh_utility_common.changeBg();
								}
								$('.favoriteLogo').append('<div class="favoriteLogoLists saved-logo-lists" style="background-color:' + v.bg_color + '"><div class="water-mark-img"></div><div class="logo-favourite favLogoIcon ' + activeFav + '" data-placement="bottom" data-toggle="tooltip" title="" data-id="' + v.logo_id + '" data-original-title="' + favToolTip + '"><i class="icon icon-heart"></i></div>' + closeHtml + ' ' + v.logo_svg + ' ' + defaultHtml + '</div>');
								i++;
								if (json.pagination == 1 && i == json.data.logos.length) {
									$('.favoriteLogo').append('<div class="load--more--class"><a class="loadMoreFavoriteLogos load--more--button" href="javascript:;"><span class="load--more-shadow"><span class="final--loader loadMoreLogosBoxes" style="display:none;"><img src="' + DH.getAssetImgUrl('logo-maker/loading.svg') + '" /></span>Load More</span></a></div>');
								}
							});
						}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
				});
				
			};
			// code by Tushar        
			$('.step_6, .step_7').on('click', '.iconFav', function (e) {
				var ele = $(this);
				var fav = 1;
				var successMsg = '';
				var errMsg = '';
				var del = 0;
				var curLogoId = $(this).attr('data-logo-id');
				var listType = ele.attr('data-listType');
				var subType = '';
				if (ele.hasClass('active')) {
					ele.removeClass('active');
					ele.attr('data-original-title', 'Add to favorites');
					fav = 0;
					del = 1;
					successMsg = 'Logo removed from your favorite list.';
					errMsg = 'Cannot remove selected logo from your favorite list.';
					if (typeof listType !== "undefined") {
						switch (listType) {
							case 'colorPallete': {
								subType = $('.colorPaletteButton.active').attr('data-id');
								if (typeof subType === 'undefined') {
									subType = $('.colorPaletteVariants a.active').attr('data-id');
								}
								logoMakerFunction.removeToFavoriteJson('colorPallete', subType, parseInt(ele.data('id')));
								break;
							}
						}
					}
				} else {
					ele.addClass('active');
					ele.attr('data-original-title', 'Remove from favorites');
					fav = 1;
					del = 0;
					successMsg = 'Logo added in your favorite list.';
					errMsg = 'Cannot add selected logo in your favorite list.';
					if (typeof listType !== "undefined") {
						switch (listType) {
							case 'colorPallete': {
								subType = $('.colorPaletteButton.active').attr('data-id');
								if (typeof subType === 'undefined') {
									subType = $('.colorPaletteVariants').find('a.active').attr('data-id');
								}
								logoMakerFunction.addToFavoriteJson('colorPallete', subType, parseInt(ele.data('id')), curLogoId);
								break;
							}
						}
					}
				}
				
				lEditor.currentLogo = {};
				lEditor.currentLogo = lEditor.logoTempArr[parseInt($(this).data('id'))];
				
				jqXHR = $.ajax({
					url: DH.baseURL + '/logoMakerAjax.php',
					type: 'POST',
					data: { action: 'save', logo_id: curLogoId, 'curr_logo': lEditor.validateJSON(lEditor.currentLogo), fav: fav, del: del, 'svg_logo': logoMakerFunction.getFinalLogoTemplate(lEditor.currentLogo.generate),exceptions : editor_exceptions },
					async: true,
					success: function (json) {
						json = $.parseJSON(json);
						if (json.status == 0) {
							if (fav == 1) {
								ele.removeClass('active');
							} else {
								ele.addClass('active');
							}
							dh_utility_common.alert({ type: 'error', message: errMsg });
						} else {
							var retLogoId = json.data.logo_id;
							ele.attr('data-logo-id', retLogoId);
							$(".favOption .count").html(json.data.fav_count);
							ele.parents('.logo--slides').find('.iconEdit').attr('data-logo-id', retLogoId);
							if (ele.hasClass('active')) {
								logoMakerFunction.updateLogoIdJson(listType, subType, parseInt(ele.data('id')), retLogoId);
							}
							dh_utility_common.alert({ type: 'success', message: successMsg });
							$('.savedLogoCount').html('(' + json.data.saved_count + ')');
							$('.favLogoCount').html('(' + json.data.fav_count + ')');
							
						}
                                                clearException();
					},
					error: function (jqXHR, textStatus, errorThrown) {
						//alert(errorThrown);
					}
					
				});
				
			});
			// code by Tushar        
			$('.step_7').on('click', '.favLogoIcon', function (e) {
				var logoId = $(this).data('id');
				var ele = $(this);
				var favAction = 'add';
				var errMsg = 'Cannot add logo to favorite.';
				var msgBox = $('.favoriteLogoTab .no-favourite');
				
				if ($(this).hasClass('active')) {
					favAction = 'remove';
					errMsg = 'Cannot remove logo to favorite.';
					ele.removeClass('active');
					ele.attr('data-original-title', 'Add to favorites');
					ele.parents('.favoriteLogoLists').remove();
					
				} else {
					ele.addClass('active');
					ele.attr('data-original-title', 'Remove from favorites');
				}
				msgBox[$('.favoriteLogoLists.saved-logo-lists').length == 0 ? 'show' : 'hide']();
				$.ajax({
					type: "POST",
					url: DH.baseURL + '/logoMakerAjax.php',
					data: { action: 'add_remove_fav', logo_id: logoId, fav_action: favAction }
				}).done(function (retData) {
					$('#loadere').hide();
					if (retData.status == 'valid') {
						$('.savedLogoCount').html('(' + retData.saved_count + ')');
						$('.favLogoCount').html('(' + retData.favorite_count + ')');
						logoMakerFunction.removeLogoIdJson(logoId);
					} else {
						if (ele.hasClass('active')) {
							ele.removeClass('active');
						} else {
							ele.addClass('active');
						}
						dh_utility_common.alert({ type: 'error', msg: retData.msg });
					}
				}).fail(function () {
					
				}).always(function () {
					$('#loadere').hide();
				});
			});
			
			// Load the page and initialize the steps accordingly
			function initPageLoad() {
                            //debugger;
				var crLgId = parseInt(sessionStorage.getItem('currLogoId'));
				var crPg = parseInt(sessionStorage.getItem('currPage'));
				
				if (crLgId && crLgId > 0 && crPg == 7) {
					$.ajax({
						url: DH.baseURL + '/logoMakerAjax.php',
						type: 'POST',
						data: { action: 'get_logo_data', logo_id: crLgId },
						success: function (response) {
							var data = $.parseJSON(response.data.logo_json);
							
							// //Setting loaded logo as current logo into session
							lEditor.setSession('currentLogo', response.data.logo_json);
							lEditor.setSession('logoname', data.logoName);
							lEditor.setSession('sloganText', data.sloganName);
							lEditor.showStep();
						}
					});
				}
				else {
					lEditor.showStep();
				}
			}
			
			// Page load starts 
			initPageLoad();
			
			/*== favorite - end ==*/
			
			/* fix header strip */
			function headerFixed() {
				if ($(window).width() > 991) {
					var offerHeight = 0;
					if ($('.avail_offer').length > 0) {
						offerHeight = $('.avail_offer').height();
					}
					$('.lEditorHeader').css('top', offerHeight + 'px');
					$('.step-holder').css('padding-top', offerHeight + 60 + 'px');
					$('.step_6 .fix-padding').css('padding-top', '82px');
					$('#animation_box').css('padding-top', offerHeight + 20 + 'px');
				} else {
					$('.lEditorHeader').css('top', '0px');
					$('.step-holder').css('padding-top', '60px');
					$('.step_6 .fix-padding').css('padding-top', '82px');
				}
			}
			headerFixed();
			$(window).resize(function () {
				headerFixed();
			});
			
		});
function clearException(){
    editor_exceptions = new Array();
}		
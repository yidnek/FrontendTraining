//CNN AdFuel Modules
//Deployed: 2019-08-26 10:10:25

////////////////////////////////////////////
// ADFUEL UTILITIES 
////////////////////////////////////////////

(function createAdFuelUtilities() {
  var MODULE_NAME = 'AdFuel Utilities';
  var MODULE_VERSION = 'v3.1.18';

  var cdnRoot = document.location.hostname.indexOf('cnn.com') >= 0 ? 'cdn.cnn.com' : 'i.cdn.turner.com';

  window.googletag = window.googletag || {};
  window.googletag.cmd = window.googletag.cmd || [];

  // Promise Polyfill
  // eslint-disable-next-line
  !(function (e, n) {typeof exports==='object' && typeof module != 'undefined' ? n() : typeof define == 'function' && define.amd ? define(n) : n();}(0, function () {'use strict'; function e() {} function n(e) {if (!(this instanceof n)) throw new TypeError('Promises must be constructed via new'); if (typeof e != 'function') throw new TypeError('not a function'); this._state = 0, this._handled = !1, this._value = undefined, this._deferreds = [], f(e, this);} function t(e, t) {for (;e._state === 3;)e = e._value; e._state !== 0 ? (e._handled = !0, n._immediateFn(function () {var n = e._state === 1 ? t.onFulfilled : t.onRejected; if (n !== null) {var i; try {i = n(e._value);} catch (f) {return void r(t.promise, f);}o(t.promise, i);} else (e._state === 1 ? o : r)(t.promise, e._value);})) : e._deferreds.push(t);} function o(e, t) {try {if (t === e) throw new TypeError('A promise cannot be resolved with itself.'); if (t && (typeof t==='object' || typeof t == 'function')) {var o = t.then; if (t instanceof n) return e._state = 3, e._value = t, void i(e); if (typeof o == 'function') return void f((function (e, n) {return function () {e.apply(n, arguments);};}(o, t)), e);}e._state = 1, e._value = t, i(e);} catch (u) {r(e, u);}} function r(e, n) {e._state = 2, e._value = n, i(e);} function i(e) {e._state === 2 && e._deferreds.length === 0 && n._immediateFn(function () {e._handled || n._unhandledRejectionFn(e._value);}); for (var o = 0, r = e._deferreds.length; r > o; o++)t(e, e._deferreds[o]); e._deferreds = null;} function f(e, n) {var t = !1; try {e(function (e) {t || (t = !0, o(n, e));}, function (e) {t || (t = !0, r(n, e));});} catch (i) {if (t) return; t = !0, r(n, i);}} var u = setTimeout; n.prototype.catch = function (e) {return this.then(null, e);}, n.prototype.then = function (n, o) {var r = new this.constructor(e); return t(this, new function (e, n, t) {this.onFulfilled = typeof e == 'function' ? e : null, this.onRejected = typeof n == 'function' ? n : null, this.promise = t;}(n, o, r)), r;}, n.prototype.finally = function (e) {var n = this.constructor; return this.then(function (t) {return n.resolve(e()).then(function () {return t;});}, function (t) {return n.resolve(e()).then(function () {return n.reject(t);});});}, n.all = function (e) {return new n(function (n, t) {function o(e, f) {try {if (f && (typeof f == 'object' || typeof f==='function')) {var u = f.then; if (typeof u == 'function') return void u.call(f, function (n) {o(e, n);}, t);}r[e] = f, --i == 0 && n(r);} catch (c) {t(c);}} if (!e || typeof e.length == 'undefined') throw new TypeError('Promise.all accepts an array'); var r = Array.prototype.slice.call(e); if (r.length === 0) return n([]); for (var i = r.length, f = 0; r.length > f; f++)o(f, r[f]);});}, n.resolve = function (e) {return e && typeof e == 'object' && e.constructor === n ? e : new n(function (n) {n(e);});}, n.reject = function (e) {return new n(function (n, t) {t(e);});}, n.race = function (e) {return new n(function (n, t) {for (var o = 0, r = e.length; r > o; o++)e[o].then(n, t);});}, n._immediateFn = typeof setImmediate==='function' && function (e) {setImmediate(e);} || function (e) {u(e, 0);}, n._unhandledRejectionFn = function (e) {void 0 !== console && console && console.warn('Possible Unhandled Promise Rejection:', e);}; var c = (function () {if ('undefined'!==typeof self) return self; if ('undefined'!==typeof window) return window; if (void 0 !== c) return c; throw Error('unable to locate global object');}()); c.Promise || (c.Promise = n);}));

  // Object.assign Polyfill
  // eslint-disable-next-line
  typeof Object.assign !== 'function' && Object.defineProperty(Object, 'assign', {value: function (e, t) {'use strict'; if (e == null) throw new TypeError('Cannot convert undefined or null to object'); for (var n = Object(e), r = 1; r < arguments.length; r++) {var o = arguments[r]; if (o != null) for (var c in o)Object.prototype.hasOwnProperty.call(o, c) && (n[c] = o[c]);} return n;}, writable: !0, configurable: !0});

  // Console, Event Listener and Array Polyfills
  !(function (t) {
    'use strict';
    function n() { return a && a.call(c) || (new Date()).getTime(); }
    var o = [];
    var e = {};
    var r = {};
    var i = function () {};
    var u = '-----';
    u += u;
    u += u;
    u += u;
    u += u;
    var f = '\n\n\n\n\n\n';
    var c = window.performance;
    var a = c && (c.now || c.mozNow || c.msNow || c.oNow || c.webkitNow);
    t.log && typeof t.log === 'function' || (t.log = i);
    t.profile && typeof t.profile === 'function' || (t.profile = i);
    t.profileEnd && typeof t.profileEnd === 'function' || (t.profileEnd = i);
    t.timeStamp && typeof t.timeStamp === 'function' || (t.timeStamp = i);
    t.trace && typeof t.trace === 'function' || (t.trace = i);
    t.debug && typeof t.debug === 'function' || (t.debug = t.log);
    t.info && typeof t.info === 'function' || (t.info = t.log);
    t.warn && typeof t.warn === 'function' || (t.warn = t.log);
    t.error && typeof t.error === 'function' || (t.error = t.log);
    t.dir && typeof t.dir === 'function' || (t.dir = t.log);
    t.dirxml && typeof t.dirxml === 'function' || (t.dirxml = t.dir);
    var l = !1;
    (l || !t.group) && (t.group = function (nA) { o.push(nA); t.log(u + '\nBEGIN GROUP: ' + nA); });
    (l || !t.groupCollapsed) && (t.groupCollapsed = t.group);
    (l || !t.groupEnd) && (t.groupEnd = function () { t.log('END GROUP: ' + o.pop() + '\n' + u); });
    (l || !t.time) && (t.time = function (t2) { e[t2] = n(); });
    (l || !t.timeEnd) && (t.timeEnd = function (o2) { t.log(o2 + ': ' + (n() - e[o2]).toFixed(3) + 'ms'); delete e[o2]; });
    (l || !t.assert) && (t.assert = function (n2, o3) { n2 || t.error('Assertion failed: ' + o3); });
    (l || !t.count) && (t.count = function (n3) { r[n3] || (r[n3] = 0); r[n3]++; t.log(n3 + ': ' + r[n3]); });
    (l || !t.clear) && (t.clear = function () { t.log(f); });
  }(window.console = window.console || {}));
  (function () {
    // eslint-disable-next-line
    function t(t, n) { n = n || { bubbles: !1, cancelable: !1, detail: void 0 }; var o = document.createEvent('CustomEvent'); return o.initCustomEvent(t, n.bubbles, n.cancelable, n.detail), o; }
    // eslint-disable-next-line
    return typeof window.CustomEvent === 'function' ? !1 : (t.prototype = window.Event.prototype, void (window.CustomEvent = t));
  }());
  !window.addEventListener && (function (t, n, o, e, r, i, u) {
    // eslint-disable-next-line
    t[e] = n[e] = o[e] = function (t, n) {
      // eslint-disable-next-line
      var o = this;
      // eslint-disable-next-line
      u.unshift([o, t, n, function (t) { t.currentTarget = o, t.preventDefault = function () { t.returnValue = !1; }, t.stopPropagation = function () { t.cancelBubble = !0; }, t.target = t.srcElement || o, n.call(o, t); }]), this.attachEvent('on' + t, u[0][3]);
    };
    // eslint-disable-next-line
    t[r] = n[r] = o[r] = function (t, n) {
      // eslint-disable-next-line
      for (var o, e = 0; o = u[e]; ++e) {if (o[0] == this && o[1] == t && o[2] == n) return this.detachEvent('on' + t, u.splice(e, 1)[0][3]);}
    };
    // eslint-disable-next-line
    t[i] = n[i] = o[i] = function (t) { return this.fireEvent('on' + t.type, t); };
  }(window.prototype, document.prototype, Element.prototype, 'addEventListener', 'removeEventListener', 'dispatchEvent', []));
  // eslint-disable-next-line
  Array.prototype.indexOf || (Array.prototype.indexOf = function (t, n) {
    var o;
    if (this === null) throw new TypeError('"this" is null or not defined');
    var e = Object(this);
    var r = e.length >>> 0;
    if (r === 0) return -1;
    var i = +n || 0;
    // eslint-disable-next-line
    if (Math.abs(i) === 1 / 0 && (i = 0), i >= r) return -1;
    for (o = Math.max(i >= 0 ? i : r - Math.abs(i), 0); r > o;) {
      if (o in e && e[o] === t) return o;
      o++;
    }
    return -1;
  });
  Array.isArray || (Array.isArray = function (t) { return Object.prototype.toString.call(t) === '[object Array]'; });

  // Fetch Polyfill
  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob()
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  window.Headers = function(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue + ', ' + value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) {
      items.push(name)
    })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) {
      items.push(value)
    })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) {
      items.push([name, value])
    })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        this._bodyText = body = Object.prototype.toString.call(body)
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  window.Request = function(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      this.signal = input.signal
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'same-origin'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.signal = options.signal || this.signal
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  }

  function decode(body) {
    var form = new FormData()
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=')
          var name = split.shift().replace(/\+/g, ' ')
          var value = split.join('=').replace(/\+/g, ' ')
          form.append(decodeURIComponent(name), decodeURIComponent(value))
        }
      })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  window.Response = function(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = options.status === undefined ? 200 : options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  var DOMException = window.DOMException
  try {
    new DOMException()
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message
      this.name = name
      var error = Error(message)
      this.stack = error.stack
    }
    DOMException.prototype = Object.create(Error.prototype)
    DOMException.prototype.constructor = DOMException
  }

  window.fetch = function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)

      if (request.signal && request.signal.aborted) {
        return reject(new DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest()

      function abortXhr() {
        xhr.abort()
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.onabort = function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr)

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr)
          }
        }
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }

  fetch.polyfill = true

  var isFunction = function _isFunction(object) {
    return toString.call(object) === '[object Function]';
  };

  var isObject = function _isObject(object) {
    var type = typeof object;
    return type === 'function' || type === 'object' && !!object;
  };

  var getURLParam = function _getURLParam(name) {
    var nameParam = name.replace(/[\[]/, '\\\[').replace(/[\]]/, '\\\]');
    var regexS = '[\\?&]' + nameParam + '=([^&#]*)';
    var regex = new RegExp(regexS);
    if (document.location.search) {
      var results = regex.exec(document.location.search);
      if (results) {
        return results[1];
      }
      return '';
    }
    return '';
  };

  var hasCookie = function _hasCookie(name) {
    logger.log('looking for cookie with name of: ', name);
    if (typeof window === 'undefined') return false;
    if (document.cookie) {
      logger.log('found?', document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0)
      return document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0;
    }
    return false;
  };

  var getUMTOCookies = function _getUMTOCookies() {
    logger.log('getting UMTO cookies');

    return '_fw_vcid2=48804:' + readCookie('bea4') +
            '&krux_user=' + readCookie('kxuser') +
            '&zwmc=' + readCookie('zwmc') +
            '&ifyr=' + readCookie('ifyr') +
            '&hkgc=' + readCookie('hkgc') +
            '&goiz=' + readCookie('goiz');
  };

  var getViewport = function _getViewport() {
    var viewportWidth;
    var viewportHeight;
    if (typeof window.innerWidth !== 'undefined') {
      viewportWidth = window.innerWidth;
      viewportHeight = window.innerHeight;
    } else if (typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth !== 0) {
      viewportWidth = document.documentElement.clientWidth;
      viewportHeight = document.documentElement.clientHeight;
    } else {
      viewportWidth = document.getElementsByTagName('body')[0].clientWidth;
      viewportHeight = document.getElementsByTagName('body')[0].clientHeight;
    }
    return [viewportWidth, viewportHeight];
  };

  var getBrowser = function _getBrowser() {
    logger.time('Getting Browser Information');
    var ua = navigator.userAgent;
    var tem;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
      tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
      if (tem !== null) return tem.slice(1).join(' ').replace('OPR', 'Opera');
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    // eslint-disable-next-line
    if ((tem = ua.match(/version\/(\d+)/i)) !== null) M.splice(1, 1, tem[1]);
    logger.timeEnd('Getting Browser Information');
    return M.join(' ');
  };

  var readCookie = function _readCookie(name) {
    var readTheCookie = function readTheCookie(key) {
      if (!document.cookie) {
        // there is no cookie, so go no further
        return null;
      }  // there is a cookie
      var ca = document.cookie.split(';');
      var nameEQ = key + '=';
      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
          // delete spaces
          c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) {
          return c.substring(nameEQ.length, c.length);
        }
      }
      return null;
    };

    var lsSupport = false;
    var data = null;
    // Check for native support
    if (localStorage) {
      lsSupport = true;
    }

    // No value supplied, return value
    if (typeof value === 'undefined') {
      // Get value
      if (lsSupport) { // Native support
        data = localStorage.getItem(name);
      }
      if (!lsSupport || data === null) { // Use cookie
        data = readTheCookie(name);
      }

      // Try to parse JSON...
      try {
        data = JSON.parse(data);
      } catch (e) {
        // Do Nothing
      }
    }
    return data;
  };

  var emptyTarget = function(value){ return Array.isArray(value) ? [] : {} }

  function deepmerge(target, source, optionsArgument) {
      var array = Array.isArray(source);
      var options = optionsArgument || { arrayMerge: combineMerge }
      var arrayMerge = options.arrayMerge || combineMerge

      if (array) {
          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
      } else {
          return mergeObject(target, source, optionsArgument)
      }
  }

  function combineMerge(target, source, options) {
      var destination = target.slice()

      source.forEach(function(e, i) {
          if (typeof destination[i] === 'undefined') {
              var cloneRequested = clone !== false
              var shouldClone = cloneRequested && isMergeableObject(e)
              destination[i] = shouldClone ? deepmerge(emptyTarget(e), e, options) : e
          } else if (isMergeableObject(e)) {
              destination[i] = merge(target[i], e, options)
          } else if (target.indexOf(e) === -1) {
              destination.push(e)
          }
      })
      return destination
  }


  function isMergeableObject(val) {
      var nonNullObject = val && typeof val === 'object'

      return nonNullObject
          && Object.prototype.toString.call(val) !== '[object RegExp]'
          && Object.prototype.toString.call(val) !== '[object Date]'
  }

  function cloneIfNecessary(value, optionsArgument) {
      var clone = optionsArgument && optionsArgument.clone === true
      return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
  }

  function defaultArrayMerge(target, source, optionsArgument) {
      var destination = target.slice()
      source.forEach(function(e, i) {
          if (typeof destination[i] === 'undefined') {
              destination[i] = cloneIfNecessary(e, optionsArgument)
          } else if (isMergeableObject(e)) {
              destination[i] = deepmerge(target[i], e, optionsArgument)
          } else if (target.indexOf(e) === -1) {
              destination.push(cloneIfNecessary(e, optionsArgument))
          }
      })
      return destination
  }

  function mergeObject(target, source, optionsArgument) {
      var destination = {}
      if (isMergeableObject(target)) {
          Object.keys(target).forEach(function (key) {
              destination[key] = cloneIfNecessary(target[key], optionsArgument)
          })
      }
      Object.keys(source).forEach(function (key) {
          if (!isMergeableObject(source[key]) || !target[key]) {
              destination[key] = cloneIfNecessary(source[key], optionsArgument)
          } else {
              destination[key] = deepmerge(target[key], source[key], optionsArgument)
          }
      })
      return destination
  }

  deepmerge.all = function deepmergeAll(array, optionsArgument) {
      if (!Array.isArray(array) || array.length < 2) {
          throw new Error('first argument should be an array with at least two elements')
      }

      // we are sure there are at least 2 values, so it is safe to have no initial value
      return array.reduce(function(prev, next) {
          return deepmerge(prev, next, optionsArgument)
      })
  }

  var mergeDeep = function(target, source) { return deepmerge(target, source); }

  var countryCode = readCookie('countryCode') || (readCookie('CG') ? readCookie('CG').substr(0, 2) : '');
  var appId = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwbGF0Zm9ybSI6IndlYiIsInByb2R1Y3QiOiJhZGZ1ZWwiLCJuZXR3b3JrIjoiY25uIiwiYXBwSWQiOiJjbm4tYWRmdWVsLXdlYi14bWQ2dTkifQ.N-lYZh_mvCV2gChDusNhd85B2BD7AiCIcNY2Gr5Rc6c';
  var locationServiceURL = 'https://geo.ngtv.io/locate?appId='+appId;

  function getLocation() {
    return new Promise(function(resolve, reject){
      fetch(locationServiceURL).then(function(resp){
          resolve(resp.json());
      }).catch(function(err){
          reject('Could not get user location: ', err);
      });
    });
  }

  var selectedEdition = readCookie('SelectedEdition') ? readCookie('SelectedEdition') : 'www';

  var monetizedSizes = [ '160x600', '300x250', '300x600', '320x50', '728x90', '970x90', '970x250' ];
  var invalidMappings = [ '_ns_', '_nfs_' ];
  var invalidAdUnitSegments = [ 'super-ad-zone', 'super_ad_zone' ];
  var invalidAdUnits = [ 'CNN/health', 'CNN/health/healthgrades', 'CNN/health/leaf', 'CNN/health/list', 'CNN/health/photos', 'CNN/health/specials', 'CNN/health/video', 'CNN/student-news' ];

  var getLogger = function _getLogger(moduleName, moduleVersion, logKey, style) {
    var log = noop;
    var info = noop;
    var warn = noop;
    var time = noop;
    var timeEnd = noop;
    var group = noop;
    var groupEnd = noop;
    var error = noop;
    var inGroup = false;
    var args;
    var styleFinal = style || '';
    var logKeyFinal = logKey || moduleName.toLowerCase();
    var debug = getURLParam('debug').split(',');
    var debugTest = isObject(window.console) && isFunction(window.console.log) && (debug[0] === "true"|| debug.indexOf(logKeyFinal.toLowerCase()) >= 0);

    if (debugTest) {
      log = function _logFunc(/* arguments */) {
        if (!inGroup) {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.log.apply(window.console, args);
        } else {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.log.apply(window.console, args);
        }
      };

      info = function _infoFunc(/* arguments */) {
        if (!inGroup) {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.info.apply(window.console, args);
        } else {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.info.apply(window.console, args);
        }
      };

      warn = function _warnFunc(/* arguments */) {
        if (!inGroup) {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.warn.apply(window.console, args);
        } else {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.warn.apply(window.console, args);
        }
      };

      error = function _errorFunc(/* arguments */) {
        if (!inGroup) {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.error.apply(window.console, args);
        } else {
          args = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal]
          args.push.apply(args, arguments);
          window.console.error.apply(window.console, args);
        }

      };

      group = function _groupFunc(groupName) {
        if (!inGroup){
          var args = ['%c[' + moduleName + ' ' + moduleVersion + ']', styleFinal, groupName];
          inGroup = true;
          window.console.groupCollapsed.apply(window.console, args);
        }
      };

      groupEnd = function _groupEndFunc(groupName) {
        var args = ['%c[' + moduleName + ' ' + moduleVersion + ']', styleFinal, groupName];
        inGroup = false;
        try{ window.console.groupEnd.apply(window.console, args); }
        catch(err) {
          // Do Nothing
        }
      };

      time = function _timeFunc(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        group(timeTag);
        addMark(timeKey + '-Start');
        window.console.time(timeKey);
      };

      timeEnd = function _timeEndFunc(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        addMark(timeKey + '-End');
        addMeasure(timeKey, timeKey + '-Start', timeKey + '-End');
        groupEnd(timeTag);
        window.console.timeEnd(timeKey);
      };

    }

    var logger = {
      log: log,
      info: info,
      warn: warn,
      error: error,
      time: time,
      timeEnd: timeEnd,
      group: group,
      groupEnd: groupEnd
    };
    return logger;
  };

  var objectProto = Object.prototype;
  var toString = objectProto.toString;
  var noop = function noop() {};
  var isIntl = false;

  var parser = document.createElement('a');
  parser.href = document.location.href;

  var hostname = parser.hostname;
  var pathname = parser.pathname;

  var logger = getLogger(MODULE_NAME, MODULE_VERSION, 'utils', 'color: coral; padding: 2px');

  var addEvent = function _addEvent(element, event, fn) {
    if (element.addEventListener) {
      element.addEventListener(event, fn, true);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, fn);
    }
  };

  var bind = function _bind(fn, context /* , function arguments */) {
    if (!isFunction(fn)) {
      throw new TypeError('Bind must be called on a function');
    }

    var args = Array.prototype.slice.call(arguments, 2);

    return function bound() {
      return fn.apply(context, args.concat(Array.prototype.slice.call(arguments)));
    };
  };

  var re = /(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()\[\]\.,;:\s@\"]+\.)+[^<>()\[\]\.,;:\s@\"]{2,})/i;

  var piiIsPresentInQueryString = function _piiIsPresentInQueryString() {
    if (document.location.search) {
      var dirtyResults = document.location.search.search(re) + 1;
      var cleanResults;
      try {
        cleanResults = decodeURIComponent(document.location.search).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }
      return dirtyResults === 1 || cleanResults === 1;
    }
    return false;
  };

  var piiIsPresentInHash = function _piiIsPresentInHash() {
    if (document.location.hash) {
      var dirtyResults = document.location.hash.search(re) + 1;
      var cleanResults;
      try {
        cleanResults = decodeURIComponent(document.location.hash).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }
      return dirtyResults || cleanResults;
    }
    return false;
  };

  var piiIsPresentInReferrer = function _piiIsPresentInReferrer() {
    if (document.referrer) {
      var dirtyResults = document.referrer.search(re) + 1;
      var cleanResults;
      try {
        cleanResults = decodeURIComponent(document.location.referrer).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }
      return dirtyResults || cleanResults;
    }
    return false;
  };

  var filterDFPRequest = function _filterDFPRequest() {
    if (piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer()) {
      if (window.AdFuel) {
          logger.log('Filtering DFP Request due to PII in query string.');
          var AdFuelMethods = Object.getOwnPropertyNames(window.AdFuel);
          for (var x = 0; x < AdFuelMethods.length; x++) {
            window.AdFuel[AdFuelMethods[x]] = function filteredAdFuelMethod() { };
          }
          window.googletag = null;
      }
      return true;
    }
    return false;
  };

  var piiFilter = {
    qs: piiIsPresentInQueryString,
    hash: piiIsPresentInHash,
    ref: piiIsPresentInReferrer,
    filter: filterDFPRequest
  };

  var base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}

  var versionNumBits = 6;
  var vendorVersionMap = {
    /**
     * Version 1
     */
    1: {
      version: 1,
      metadataFields: ['version', 'created', 'lastUpdated', 'cmpId',
        'cmpVersion', 'consentScreen', 'vendorListVersion'],
      fields: [
        { name: 'version', type: 'int', numBits: 6 },
        { name: 'created', type: 'date', numBits: 36 },
        { name: 'lastUpdated', type: 'date', numBits: 36 },
        { name: 'cmpId', type: 'int', numBits: 12 },
        { name: 'cmpVersion', type: 'int', numBits: 12 },
        { name: 'consentScreen', type: 'int', numBits: 6 },
        { name: 'consentLanguage', type: 'language', numBits: 12 },
        { name: 'vendorListVersion', type: 'int', numBits: 12 },
        { name: 'purposeIdBitString', type: 'bits', numBits: 24 },
        { name: 'maxVendorId', type: 'int', numBits: 16 },
        { name: 'isRange', type: 'bool', numBits: 1 },
        {
          name: 'vendorIdBitString',
          type: 'bits',
          numBits: function(decodedObject){ return decodedObject.maxVendorId },
          validator: function(decodedObject){ return !decodedObject.isRange }
        },
        {
          name: 'defaultConsent',
          type: 'bool',
          numBits: 1,
          validator: function(decodedObject){ return decodedObject.isRange }
        },
        {
          name: 'numEntries',
          numBits: 12,
          type: 'int',
          validator: function(decodedObject){ return decodedObject.isRange }
        },
        {
          name: 'vendorRangeList',
          type: 'list',
          listCount: function(decodedObject){ return decodedObject.numEntries},
          validator: function(decodedObject){ return decodedObject.isRange },
          fields: [
            {
              name: 'isRange',
              type: 'bool',
              numBits: 1,
            },
            {
              name: 'startVendorId',
              type: 'int',
              numBits: 16,
            },
            {
              name: 'endVendorId',
              type: 'int',
              numBits: 16,
              validator: function(decodedObject){ return decodedObject.isRange },
            },
          ],
        },
      ],
    }
  };

  function repeat(count, string) {
    string = string || '0';
    var padString = '';

    for (var i = 0; i < count; i += 1) {
      padString += string;
    }

    return padString;
  }

  function padLeft(string, padding) {
    return repeat(Math.max(0, padding)) + string;
  }

  function decodeBitsToInt(bitString, start, length) {
    return parseInt(bitString.substr(start, length), 2);
  }

  function decodeBitsToDate(bitString, start, length) {
    return new Date(decodeBitsToInt(bitString, start, length) * 100);
  }

  function decodeBitsToBool(bitString, start) {
    return parseInt(bitString.substr(start, 1), 2) === 1;
  }

  function decodeBitsToLetter(bitString) {
    var letterCode = decodeBitsToInt(bitString);
    return String.fromCharCode(letterCode + 65).toLowerCase();
  }

  function decodeBitsToLanguage(bitString, start, length) {
    var languageBitString = bitString.substr(start, length);

    return decodeBitsToLetter(languageBitString.slice(0, length / 2))
      + decodeBitsToLetter(languageBitString.slice(length / 2));
  }

  function decodeField(data) {
    var input = data.input;
    var output = data.output;
    var startPosition = data.startPosition;
    var field = data.field;
    var type = field.type;
    var numBits = field.numBits;
    var decoder = field.decoder;
    var validator = field.validator;
    var listCount = field.listCount;

    if (typeof validator === 'function') {
      if (!validator(output)) {
        // Not decoding this field so make sure we start parsing the next field at
        // the same point
        return { newPosition: startPosition };
      }
    }

    if (typeof decoder === 'function') {
      return decoder(input, output, startPosition);
    }

    var bitCount = typeof numBits === 'function' ? numBits(output) : numBits;

    switch (type) {
      case 'int':
        return { fieldValue: decodeBitsToInt(input, startPosition, bitCount) };
      case 'bool':
        return { fieldValue: decodeBitsToBool(input, startPosition) };
      case 'date':
        return { fieldValue: decodeBitsToDate(input, startPosition, bitCount) };
      case 'bits':
        return { fieldValue: input.substr(startPosition, bitCount) };
      case 'list':
        return decodeList(input, output, startPosition, field, listCount);
      case 'language':
        return { fieldValue: decodeBitsToLanguage(input, startPosition, bitCount) };
      default:
        throw new Error('ConsentString - Unknown field type ' + type + ' for decoding');
    }
  }

  function decodeList(input, output, startPosition, field, listCount) {
    var listEntryCount = 0;

    if (typeof listCount === 'function') {
      listEntryCount = listCount(output);
    } else if (typeof listCount === 'number') {
      listEntryCount = listCount;
    }

    var newPosition = startPosition;
    var fieldValue = [];

    for (var i = 0; i < listEntryCount; i += 1) {
      var decodedFields = decodeFields({
        input: input,
        fields: field.fields,
        startPosition: newPosition,
      });

      newPosition = decodedFields.newPosition;
      fieldValue.push(decodedFields.decodedObject);
    }

    return { fieldValue: fieldValue, newPosition: newPosition };
  }

  function decodeFields(data) {
    var input = data.input;
    var fields = data.fields;
    var startPosition = data.startPosition || 0;
    var position = startPosition;

    var decodedObject = fields.reduce(function(acc, field){
      var name = field.name;
      var numBits = field.numBits;
      var decodedField = decodeField({
        input: input,
        output: acc,
        startPosition: position,
        field: field,
      });
      var fieldValue = decodedField.fieldValue;
      var newPosition = decodedField.newPosition;

      if (fieldValue !== undefined) {
        acc[name] = fieldValue;
      }

      if (newPosition !== undefined) {
        position = newPosition;
      } else if (typeof numBits === 'number') {
        position += numBits;
      }

      return acc;
    }, {});

    return {
      decodedObject: decodedObject,
      newPosition: position,
    };
  }

  function decodeConsentStringBitValue(bitString, definitionMap) {
    definitionMap = definitionMap || vendorVersionMap
    var version = decodeBitsToInt(bitString, 0, versionNumBits);

    if (typeof version !== 'number') {
      throw new Error('ConsentString - Unknown version number in the string to decode');
    } else if (!vendorVersionMap[version]) {
      throw new Error('ConsentString - Unsupported version ' + version + ' in the string to decode');
    }

    var fields = definitionMap[version].fields;
    var decodedFields = decodeFields({ input: bitString, fields: fields });
    var decodedObject = decodedFields.decodedObject;

    return decodedObject;
  }

  function decodeFromBase64(consentString, definitionMap) {
    // Add padding
    var unsafe = consentString;
    while (unsafe.length % 4 !== 0) {
      unsafe += '=';
    }

    // Replace safe characters
    unsafe = unsafe
      .replace(/-/g, '+')
      .replace(/_/g, '/');

    var bytes = base64.decode(unsafe);

    var inputBits = '';
    for (var i = 0; i < bytes.length; i += 1) {
      var bitString = bytes.charCodeAt(i).toString(2);
      inputBits += padLeft(bitString, 8 - bitString.length);
    }

    return decodeConsentStringBitValue(inputBits, definitionMap);
  }

  var location = null;
  var consentStatus = false;
  var consentChecked = false;
  var gdprApplies = false;
  var EU_EEA_COUNTRY_CODES = [
    // EU
    'AT', // Austria
    'BE', // Belgium
    'BG', // Bulgaria
    'HR', // Croatia
    'CY', // Republic of Cypress
    'CZ', // Czech Republic
    'DK', // Denmark
    'EE', // Estonia
    'FI', // Finland
    'FR', // France
    'DE', // Germany
    'GR', // Greece
    'HU', // Hungary
    'IE', // Ireland
    'IT', // Italy
    'LV', // Latvia
    'LT', // Lithuania
    'LU', // Luxembourg
    'MT', // Malta
    'NL', // Netherlands
    'PL', // Poland
    'PT', // Portugal
    'RO', // Romania
    'SK', // Slovakia
    'SI', // Slovenia
    'ES', // Spain
    'SE', // Sweden
    'GB', // United Kingdom
    'UK', // United Kingdom Alias
    //EEA
    'IS', // Iceland
    'LI', // Liechtenstein
    'NO' // Norway
  ];

  // var getConsentObject = function _getConsentObject() {
  //   if (hasCookie('eupubconsent') ){
  //     logger.log('Getting Consent Object...');
  //     var consentString = readCookie('eupubconsent');
  //     var consentObject = decodeFromBase64(consentString)
  //     return consentObject
  //   }else{
  //     logger.error('No Consent String Cookie.');
  //     consentStatus = false;
  //     return {purposeIdBitString: '000000000000000000000000'}
  //   }
  // }

  var getConsentString = function _getConsentString() {
    if (hasCookie('eupubconsent') ){
      logger.log('Getting Consent Object...');
      return readCookie('eupubconsent');
    }else{
      var consentString = '';
      if (window.__cmp && typeof window.__cmp === 'function'){
        window.__cmp('getVendorConsents', null, function(result) {
          consentString = result.metadata;
        });
      }
      return consentString;
    }
  }

  // var getConsentPurposes = function _getConsentPurposes() {
  //   logger.log('Getting Consent Purposes...');
  //   var consentObject = getConsentObject();
  //   var consentPurposeBits = Array.apply(null, {length: 24}).map(Function.call, function(){ return "0" });
  //   if (consentObject && consentObject.purposeIdBitString){
  //     consentPurposeBits = consentObject.purposeIdBitString.split('');
  //   }
  //   var consentPurposes = consentPurposeBits.map(function(bit){
  //     if (parseInt(bit, 10) > 0) return true;
  //     return false;
  //   });
  //   return consentPurposes;
  // };

  var getConsent = function _getConsent() {
    if (consentChecked){
      logger.log("Consent already determined: ", consentStatus);
      return consentStatus;
    }
    if (window.CNN && window.CNN.UserConsent){
      logger.log('Getting Consent from UserConsent object...');
      consentStatus = window.CNN.UserConsent.isEnabled() ? window.CNN.UserConsent.getUserConsentAdvertisingState() : true;
      logger.log("Consent Granted: ", consentStatus);
      consentChecked = true;
      return consentStatus;
    }else{
      if (window.OptanonActiveGroups){
        logger.log('Inspecting Optanon Active Groups...')
        var activeGroupArray = window.OptanonActiveGroups.split(',');
        consentStatus = activeGroupArray.indexOf('4') >= 0;
        logger.log('Consent Granted: ', consentStatus);
        consentChecked = true;
      } else {
        if (window.__cmp && typeof window.__cmp === 'function'){
          logger.log('Getting Consent from CMP API...');
          window.__cmp('getVendorConsents', null, function(consentData) {
            Object.keys(consentData.purposeConsents).forEach(function(index){
              if (!consentStatus) consentStatus = consentData.purposeConsents[index]
            });
            return consentStatus;
          });
          logger.log("Consent Granted: ", consentStatus);
          consentChecked = true;
          return consentStatus;
        }else{
          logger.warn("No CMP API... GDPR consent is implied to be false.");
          logger.log("Consent Granted: ", false);
          consentChecked = true;
          return false;
        }
      }
    }
  };

  var getGDPRApplies = function _getGDPRApplies(appId) {
    return new Promise(function(resolve) {
      var countryCode;
      if (hasCookie('countryCode')){
        countryCode = readCookie('countryCode');
        logger.log("GDPR Applies: ", EU_EEA_COUNTRY_CODES.indexOf(countryCode) >= 0)
        gdprApplies = EU_EEA_COUNTRY_CODES.indexOf(countryCode) >= 0;
        resolve(EU_EEA_COUNTRY_CODES.indexOf(countryCode) >= 0);
      }else{
        if (location === null){
          var locationServiceURL = 'https://geo.ngtv.io/locate';
          if (appId){
            locationServiceURL += '?appId='+appId;
          }
          fetch(locationServiceURL).then(function(resp){
            return resp.json();
          }).then(function(loc){
            location = loc;
            logger.log("GDPR Applies: ", EU_EEA_COUNTRY_CODES.indexOf(loc.country) >= 0)
            gdprApplies = loc.country && EU_EEA_COUNTRY_CODES.indexOf(loc.country) >= 0;
            countryCode = loc.country;
            resolve(loc.country && EU_EEA_COUNTRY_CODES.indexOf(loc.country) >= 0)
          }).catch(function(err){
            logger.err("Could Not Get User Location: ", err);
            gdprApplies = false;
            resolve(false);
          });
        }else{
          logger.log("GDPR Applies: ", EU_EEA_COUNTRY_CODES.indexOf(location.country) >= 0)
          gdprApplies = location.country && EU_EEA_COUNTRY_CODES.indexOf(location.country) >= 0;
          resolve(location.country && EU_EEA_COUNTRY_CODES.indexOf(location.country) >= 0)
        }
      }
    });
  };

  var monetizedSlots = {};

  var isMonetized = function _isMonetized(slot) {
    var rktrSlotId = slot.rktr_slot_id;
    logger.group('Checking Monetization for: ' + rktrSlotId);
    var rktrAdId = slot.rktr_ad_id;
    var responsive = slot.responsive;
    var sizes = slot.sizes;
    if (typeof monetizedSlots[rktrSlotId] !== 'undefined') {
      logger.log('Slot already monetized.', monetizedSlots[rktrSlotId]);
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      return monetizedSlots[rktrSlotId];
    }
    var slotId = rktrSlotId;
    if (slotId === 'page') {
      logger.log('Skipping Page-Level Object.');
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      monetizedSlots[slotId] = { isMonetized: false, filteredSizes: [] };
      return { isMonetized: false, filteredSizes: [] };
    }
    var monetized = true;
    var viewportChecked = false;
    var browser = getViewport();
    var responsiveSizes = [];
    var filteredSizes = [];
    invalidMappings.forEach(function forEachMap(invalidMapping) {
      if (slotId.indexOf(invalidMapping) > 0) {
        logger.log('Slot includes invalid mapping: ', invalidMapping);
        monetizedSlots[slotId] = false;
        monetized = false;
      }
    });
    invalidAdUnitSegments.forEach(function forEachSegment(invalidAdUnitSegment) {
      if (rktrAdId && rktrAdId.indexOf(invalidAdUnitSegment) >= 0) {
        logger.log('Slot contains an invalid Ad Unit segment: ', invalidAdUnitSegment);
        monetized = false;
      }
    });
    invalidAdUnits.forEach(function forEachAdUnit(invalidAdUnit) {
      if (rktrAdId === invalidAdUnit) {
        logger.log('Slot uses an invalid Ad Unit: ', invalidAdUnit);
        monetized = false;
      }
    });
    if (responsive && responsive.length > 0) {
      responsive.map(function (viewport) {
        if (!viewportChecked && parseInt(viewport[0][0], 10) < browser[0] && parseInt(viewport[0][1], 10) < browser[1]) {
          viewportChecked = true;
          logger.log('Checking Responsive Sizes: ', viewport, browser);
          responsiveSizes = viewport[1];
          if (viewport[1][0] === 'suppress' || responsiveSizes === 'suppress') {
            logger.log('Slot is suppressed: ', viewport[1][0], responsiveSizes);
            monetized = false;
          }
        }
        return viewport;
      });
    }

    filteredSizes = (monetized && responsiveSizes.length > 0) ? responsiveSizes : sizes;
    if (monetized) {
      filteredSizes = filteredSizes.filter(function sizeFilter(size) {
        var retSize = size;
        if (retSize !== 'suppress') {
          retSize = retSize.join('x');
        }
        return (monetizedSizes.indexOf(retSize) !== -1);
      });
    }
    if (filteredSizes.length === 0) {
      logger.log('Slot contains no monetized sizes.', filteredSizes);
      monetizedSlots[slotId] = false;
      monetized = false;
    }
    logger.log('Slot is Monetized: ', monetized);
    logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
    monetizedSlots[slotId] = {isMonetized: monetized, filteredSizes: filteredSizes};

    return {isMonetized: monetized, filteredSizes: filteredSizes};
  };

  var hasOwn = function _hasOwn(object, key) {
    return object !== null && Object.prototype.hasOwnProperty.call(object, key);
  };

  var once = function _once(fn) {
    return function () {
      if (fn) {
        fn.apply(this, arguments);
        // eslint-disable-next-line
        fn = null;
      }
    };
  };

  var keyMap = (function _keyMap() {
    var map = {};

    var has = function has(id) { return id in map; };

    var addKey = function addKey(id, key) {
      if (!has(id)) {
        map[id] = [];
      }
      map[id].push(key);
    };

    var getKeys = function getKeys(id) { return has(id) ? Array.prototype.slice.call(map[id]) : []; };

    var clearKeys = function clearKeys(id) {
      if (has(id)) {
        map[id].length = 0;
        return true;
      }
      return false;
    };

    return {
      has: has,
      clearKeys: clearKeys,
      getKeys: getKeys,
      addKey: addKey
    };
  })();

  var roundFloat = function _roundFloat(value, toNearest, fixed) {
    return (Math.ceil(value / toNearest) * toNearest).toFixed(fixed);
  };

  var generateCacheBuster = function _generateCacheBuster() {
    // return_<9-digit-random-hex>
    var cb = '';
    for (var i = 0; i < 10; i++) {
      cb += Math.floor(Math.random() * 9).toString();
    }
    return cb;
  };

  var debounce = function _debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this;
      var args = arguments;
      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };

  var clone = function _clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (obj === null || typeof obj !== 'object') return obj;

    // Handle Date
    if (obj instanceof Date) {
      var copyDate = new Date();
      copyDate.setTime(obj.getTime());
      return copyDate;
    }

    // Handle Array
    if (obj instanceof Array) {
      var copyArray = [];
      for (var i = 0, len = obj.length; i < len; i++) {
        copyArray[i] = clone(obj[i]);
      }
      return copyArray;
    }

    // Handle Object
    if (obj instanceof Object) {
      var copyObject = {};
      for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) {
          copyObject[attr] = clone(obj[attr]);
        }
      }
      return copyObject;
    }

    throw new Error('Unable to copy obj! Its type isn\'t supported.');
  };

  logger.log('Hostname: ', hostname);
  logger.log('CountryCode: ', countryCode);
  if (getURLParam('isIntl') === 'true') {
    logger.log('Faking international site. Using International PubIds.');
    isIntl = true;
  } else if (hostname.search(/^.*(edition|edition\-m|arabic)\./) >= 0) {
    logger.log('Full international site. Using International PubIds.');
    isIntl = true;
  } else if (countryCode === '' || countryCode === null) {
    var locationMeta = document.querySelectorAll("meta#geo-location-data");
    if (locationMeta.length > 0) {
      if (["US", "CA"].indexOf(locationMeta[0].dataset.geoCountryCode) >= 0){
        countryCode = locationMeta[0].dataset.geoCountryCode;
        isIntl = false
      }else{
        isIntl = true;
      }
    }else{
      logger.log('No country code. Domestic Site.');
    }
  } else if (countryCode !== 'US' && countryCode !== 'CA') {
    if (hostname.search(/^.*(money|cnnespanol|cnne\-test|\.cnn)\./) >= 0) {
      logger.log('International country code. Using International PubIds.');
      isIntl = true;
    } else {
      logger.log('International country code but domestic site.');
    }
  } else {
    logger.log('Domestic site or country code.');
  }

  var merge = function merge(source, mods) {
    var dest = {};
    var attrname;
    for (attrname in source) {
      if (source.hasOwnProperty(attrname)) {
        dest[attrname] = source[attrname];
      }
    }
    for (attrname in mods) {
      if (mods.hasOwnProperty(attrname)) {
        dest[attrname] = mods[attrname];
      }
    }
    return dest;
  };

  var getTrackPerformance = function () {
    return new Promise(function(resolve, reject) {
      if (!window.CNN || !window.jQuery) {
        reject(new Error('trackPerformance not needed'));
      } else if (window.CNN.Analytics && window.CNN.Analytics.segment && typeof window.CNN.Analytics.segment.trackPerformance === 'function') {
        resolve();
      } else if (typeof window.jQuery.fn.onSegmentReady === 'function') {
        jQuery(document).onSegmentReady(function _handleSegmentReady() {
          resolve();
        });
      } else {
        reject(new Error('trackPerformance not available'));
      }
    });
  }

  var adfuelEntries = [];
  var queueEntry = function(eventName) {
    var entries = window.performance.getEntriesByName('[ADFUEL] ' + eventName);

    for (var i = 0; i < entries.length;  i++) {
        adfuelEntries.push(entries[i]);
    }
  }

  var addMark = function _addMark(name){
    window.performance.mark('[ADFUEL] ' + name);
  }

  var addMeasure = function _addMeasure(name, start, end) {
    window.performance.measure('[ADFUEL] ' + name, '[ADFUEL] ' + start, '[ADFUEL] ' + end);
  }

  var getMarks = function _getMarks(){
    return window.performance.getEntriesByType('mark').filter(function(mark){ return mark.name.indexOf('[ADFUEL]') });
  }

  var getMeasures = function _getMeasures() {
    return window.performance.getEntriesByType('measure').filter(function(mark){ return mark.name.indexOf('[ADFUEL]') });
  }

  var metrics = {};

  var getMetricTypes = function _getMetricTypes() {
    return Object.getOwnPropertyNames(metrics);
  };

  var getMetricsByType = function getMetricsByType(type) {
    return metrics[type] || {};
  };

  var getMetricById = function getMetricById(type, id) {
    if (type === 'counts' && !metrics[type][id]) {
      return 0;
    } else if (type === 'timeline' && id === 'request_to_dfp') {
      if (!metrics[type][id]) {
        return [];
      }
    }
    return metrics[type][id] || {};
  };

  var addMetric = function addMetric(metricObject) {
    /*
            Sample Metric Object
            {
            type: timeline|counts|configuration|requests|page|registries|modules|slots
            id: <STRING>
            data: <ANY> For type=counts this should be '+' or '-' to increment or decrement current count.
                For timeline metrics, data should be an object with an index property to use for updates.
                ie: { index: 1, options: { <some options> }, slots: [ 'ad_bnr_atf_01' ], start: <timestamp> }
                On update, the indexes should match:
                ie: { index: 1, end: <timestamp> }
            }
            */
    // logger.log('Adding Metric: ', JSON.parse(JSON.stringify(metricObject)));

    var metric;
    var newMetric = false;
    var data;

    if (!metrics[metricObject.type]) {
      // Metric type doesn't exist... create it.
      metrics[metricObject.type] = {};
    }
    if (!metrics[metricObject.type][metricObject.id]) {
      metrics[metricObject.type][metricObject.id] = [];
      newMetric = true;
    }

    if (!newMetric) {
      metric = getMetricById(metricObject.type, metricObject.id);
    } else {
      metric = [];
    }

    var currentCount = parseInt(metric, 10);
    var metricIndex = metricObject.data.id || 1;
    switch (metricObject.type) {
    case 'counts':
      if (metric.length === 0) { metric = 0; }
      if (metricObject.data === '+') {
        currentCount = currentCount + 1;
      } else if (metricObject.data === '-') {
        currentCount = currentCount - 1;
      } else {
        logger.log('Metric data contains no operator for counting metrics.', metricObject);
        return false;
      }
      metrics[metricObject.type][metricObject.id] = currentCount;
      // logger.log('Metrics updated with: ', metricObject, metrics);
      break;
    case 'modules':
      if (metricObject.data.callback) {
        var module = window.AdFuel.registeredModules.filter(function filterFunc(mod) {
          return mod.name === metricObject.id;
        });
        if (Array.isArray(module)) {
          module = module[0];
        }
        if (metric.length === 0) {
          metric = {};
        }
        var callbackNames = Object.getOwnPropertyNames(module.callbacks);
        var callbackNameFromData = metricObject.data.callback + 'Callback';
        if (callbackNames.indexOf(callbackNameFromData) !== -1) {
          for (var name = 0; name < callbackNames.length; name++) {
            if (!metric[callbackNames[name]]) {
              metric[callbackNames[name]] = {};
            }
            delete metricObject.data.callback;
            metric[callbackNames[name]] = merge(
              metric[callbackNames[name]], metricObject.data
            );
          }
        }
        metrics[metricObject.type][metricObject.id] = metric;
      } else {
        data = merge(metric, metricObject.data);
        metrics[metricObject.type][metricObject.id] = data;
        // logger.log('Metrics updated with: ', metricObject, metrics);
      }
      break;
    case 'requests':
    case 'timeline':
      data = {};
      if (metric.length > 0) {
        data = metric[metricIndex - 1];
      }
      data = merge(data, metricObject.data);
      metrics[metricObject.type][metricObject.id][metricIndex - 1] = data;
      // logger.log('Metrics updated with: ', metricObject, metrics);
      break;
    case 'slots':
    default:
      data = merge(metric, metricObject.data);
      metrics[metricObject.type][metricObject.id] = data;
      // logger.log('Metrics updated with: ', metricObject, metrics);
      break;
    }
    return true;
  };

  // return this API object to modules when they register.
  var metricApi = {
      metrics: metrics,
      getMetricTypes: getMetricTypes,
      getMetricsByType: getMetricsByType,
      getMetricById: getMetricById,
      addMetric: addMetric
  };

  /**
     * isMobile.js v0.4.1
     *
     * A simple library to detect Apple phones and tablets,
     * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),
     * and any kind of seven inch device, via user agent sniffing.
     *
     * @author: Kai Mallea (kmallea@gmail.com)
     *
     * @license: http://creativecommons.org/publicdomain/zero/1.0/
     */
  var applePhone = /iPhone/i; // Case-insensitive matching

  var appleIpod = /iPod/i;
  var appleTablet = /iPad/i;

  // Match 'Android' AND 'Mobile'
  var androidPhone = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i;

  var androidTablet = /Android/i;
  var amazonPhone = /(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i;
  var amazonTablet = /(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i;
  var windowsPhone = /Windows Phone/i;

  // Match 'Windows' AND 'ARM'
  var windowsTablet = /(?=.*\bWindows\b)(?=.*\bARM\b)/i;

  var otherBlackberry = /BlackBerry/i;
  var otherBlackberry10 = /BB10/i;
  var otherOpera = /Opera Mini/i;
  var otherChrome = /(CriOS|Chrome)(?=.*\bMobile\b)/i;

  // Match 'Firefox' AND 'Mobile'
  var otherFirefox = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i;

  var sevenInch = new RegExp(
    '(?:' + // Non-capturing group
        'Nexus 7' + // Nexus 7
        '|' + // OR
        'BNTV250' + // B&N Nook Tablet 7 inch
        '|' + // OR
        'Kindle Fire' + // Kindle Fire
        '|' + // OR
        'Silk' + // Kindle Fire, Silk Accelerated
        '|' + // OR
        'GT-P1000' + // Galaxy Tab 7 inch
        ')', // End non-capturing group
    'i');

  var match = function match(regex, userAgent) { return regex.test(userAgent); };

  var IsMobileClass = function IsMobileClass(userAgent) {
    var ua = userAgent || navigator.userAgent;

    // Facebook mobile app's integrated browser adds a bunch of strings that
    // match everything. Strip it out if it exists.
    var tmp = ua.split('[FBAN');
    if (typeof tmp[1] !== 'undefined') {
      ua = tmp[0];
    }

    // Twitter mobile app's integrated browser on iPad adds a "Twitter for
    // iPhone" string. Same probable happens on other tablet platforms.
    // This will confuse detection so strip it out if it exists.
    tmp = ua.split('Twitter');
    if (typeof tmp[1] !== 'undefined') {
      ua = tmp[0];
    }

    this.apple = {
      phone: match(applePhone, ua),
      ipod: match(appleIpod, ua),
      tablet: !match(applePhone, ua) && match(appleTablet, ua),
      device: match(applePhone, ua) || match(appleIpod, ua) || match(appleTablet, ua)
    };
    this.amazon = {
      phone: match(amazonPhone, ua),
      tablet: !match(amazonPhone, ua) && match(amazonTablet, ua),
      device: match(amazonPhone, ua) || match(amazonTablet, ua)
    };
    this.android = {
      phone: match(amazonPhone, ua) || match(androidPhone, ua),
      tablet: !match(amazonPhone, ua) &&
                !match(androidPhone, ua) &&
                (match(amazonTablet, ua) || match(androidTablet, ua)),
      device: match(amazonPhone, ua) ||
                match(amazonTablet, ua) || match(androidPhone, ua) ||
                match(androidTablet, ua)
    };
    this.windows = {
      phone: match(windowsPhone, ua),
      tablet: match(windowsTablet, ua),
      device: match(windowsPhone, ua) || match(windowsTablet, ua)
    };
    this.other = {
      blackberry: match(otherBlackberry, ua),
      blackberry10: match(otherBlackberry10, ua),
      opera: match(otherOpera, ua),
      firefox: match(otherFirefox, ua),
      chrome: match(otherChrome, ua),
      device: match(otherBlackberry, ua) ||
                match(otherBlackberry10, ua) || match(otherOpera, ua) ||
                match(otherFirefox, ua) || match(otherChrome, ua)
    };
    this.seven_inch = match(sevenInch, ua);
    this.any = this.apple.device || this.android.device ||
            this.windows.device || this.other.device || this.seven_inch;

    // excludes 'other' devices and ipods, targeting touchscreen phones
    this.phone = this.apple.phone || this.android.phone || this.windows.phone;

    // excludes 7 inch devices, classifying as phone or tablet is left to the user
    this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;

    if (typeof window === 'undefined') {
      return this;
    }
  };

  var instantiate = function instantiate() {
    var IM = new IsMobileClass();
    IM.Class = IsMobileClass;
    return IM;
  };

  var isMobile = instantiate();

  addEvent(document, 'AdFuelCreated', filterDFPRequest);

  var _hasUserConsent = (
    window.CNN
    && window.CNN.UserConsent
    && window.CNN.UserConsent.isEnabled()
    && window.CNN.UserConsent.isInGdprRegion()
  ) || false;

  var AdFuelUtils = {
    addEvent: addEvent,
    bind: bind,
    cdnRoot: cdnRoot,
    clone: clone,
    countryCode: countryCode,
    debounce: debounce,
    decodeFromBase64: decodeFromBase64,
    gdprApplies: gdprApplies,
    getConsent: getConsent,
    getConsentString: getConsentString,
    getGDPRApplies: getGDPRApplies,
    getLocation: getLocation,
    generateCacheBuster: generateCacheBuster,
    getBrowser: getBrowser,
    getLogger: getLogger,
    getURLParam: getURLParam,
    getUMTOCookies: getUMTOCookies,
    getViewport: getViewport,
    hasCookie: hasCookie,
    hasOwn: hasOwn,
    hasUserConsent: _hasUserConsent,
    isFunction: isFunction,
    isIntl: isIntl,
    isMobile: isMobile,
    isMonetized: isMonetized,
    isObject: isObject,
    keyMap: keyMap,
    merge: merge,
    mergeDeep: mergeDeep,
    metricApi: metricApi,
    noop: noop,
    once: once,
    performance: {
      adfuelEntries: adfuelEntries,
      getTrackPerformance: getTrackPerformance,
      mark: addMark,
      measure: addMeasure,
      marks: getMarks,
      measures: getMeasures,
      queueEntry: queueEntry
    },
    piiFilter: piiFilter,
    readCookie: readCookie,
    roundFloat: roundFloat,
    selectedEdition: selectedEdition,

    __VERSION__: MODULE_VERSION
  };

  window.AdFuelUtils = AdFuelUtils;
})();


////////////////////////////////////////////
// CORE OPTIONS 
////////////////////////////////////////////

//TODO Add arguments to this for Rocketeer support.
//TODO Use Rocketeer to build this file based on modules included and scrap site-specific files.
window.AdFuelOptions = {

    OPTIONS_VERSION: 1.2,

    ADFUEL: {
        AUTO_DISPATCH: true,                         //{{ADFUEL_AUTO_DISPATCH}}
        DEFAULT_TIMEOUT: 800,                        //{{ADFUEL_DEFAULT_TIMEOUT}}
        DEFAULT_DESKTOP_TIMEOUT: 800,               //{{ADFUEL_DEFAULT_DESKTOP_TIMEOUT}}
        DEFAULT_MOBILE_TIMEOUT: 800,                 //{{ADFUEL_DEFAULT_MOBILE_TIMEOUT}}
        IFRAME_TITLE: 'advertisement',               //{{ADFUEL_IFRAME_TITLE}}
        NETWORK_ID: '8663477',                       //{{ADFUEL_NETWORK_ID}}
        REFRESH_ON_FOCUS_ONLY: false,                //{{ADFUEL_REFRESH_ON_FOCUS_ONLY}}
        LAZY_LOAD_FETCH_PERCENT: 500,                //{{ADFUEL_LAZY_LOAD_FETCH_PERCENT}}  Fetch Slots within 5 Viewports
        LAZY_LOAD_RENDER_PERCENT: 200,               //{{ADFUEL_LAZY_LOAD_RENDER_PERCENT}} Render Slots within 2 Viewports
        LAZY_LOAD_MOBILE_SCALING: 2.0,               //{{ADFUEL_LAZY_LOAD_MOBILE_SCALING}} Scale the above values for mobile by 2

    },

    A9: {
        DOM_PUB_ID: '3159',                         //{{A9_DOM_PUB_ID}}
        INTL_PUB_ID: '3288',                        //{{A9_INTL_PUB_ID}}
        DISPLAY_TIMEOUT: 750,                       //{{A9_DISPLAY_TIMEOUT}}
        DISPLAY_REFRESH_TIMEOUT: 750,               //{{A9_DISPLAY_REFRESH_TIMEOUT}}
        VIDEO_TIMEOUT: 500,                         //{{A9_VIDEO_TIMEOUT}}
        VIDEO_REFRESH_TIMEOUT: 750,                 //{{A9_VIDEO_REFRESH_TIMEOUT}}
        DESKTOP_DISPLAY_TIMEOUT: 750,               //{{A9_DESKTOP_DISPLAY_TIMEOUT}}
        DESKTOP_DISPLAY_REFRESH_TIMEOUT: 750,       //{{A9_DESKTOP_DISPLAY_REFRESH_TIMEOUT}}
        DESKTOP_VIDEO_TIMEOUT: 500,                 //{{A9_DESKTOP_VIDEO_TIMEOUT}}
        DESKTOP_VIDEO_REFRESH_TIMEOUT: 750,         //{{A9_DESKTOP_VIDEO_REFRESH_TIMEOUT}}
        MOBILE_DISPLAY_TIMEOUT: 750,                //{{A9_MOBILE_DISPLAY_TIMEOUT}}
        MOBILE_DISPLAY_REFRESH_TIMEOUT: 750,        //{{A9_MOBILE_DISPLAY_REFRESH_TIMEOUT}}
        MOBILE_VIDEO_TIMEOUT: 500,                  //{{A9_MOBILE_VIDEO_TIMEOUT}}
        MOBILE_VIDEO_REFRESH_TIMEOUT: 750,          //{{A9_MOBILE_VIDEO_REFRESH_TIMEOUT}}
    },

    BEEMRAY: {
        CUSTOMER_ID: '',                            //{{BEEMRAY_CUSTOMER_ID}}
        API_KEY: '',                                //{{BEEMRAY_API_KEY}}
    },

    CEP: {
    },

    CONSOLE_TOOL: {
        HOTKEY: ['Control', 'Shift', 'Z'],          //{{CONSOLE_TOOL_HOTKEY}}
    },

    CREATIVE_REVIEW: {
        HOTKEY: '^ d o h $'                         //{{CREATIVE_REVIEW_HOTKEY}}
    },

    CRITEO: {
        MULTISIZE_FIRST: 'F',
        MULTISIZE_LARGEST: 'L',
        MULTISIZE_ALL: 'A',
        MULTISIZE_METHOD: 'L',                      //{{CRITEO_MULTISIZE_METHOD}}
        DESKTOP_ZONES: {},                          //{{CRITEO_DESKTOP_ZONES}}
        MOBILE_ZONES: {},                           //{{CRITEO_MOBILE_ZONES}}
        TIMEOUT: 750,                               //{{CRITEO_TIMEOUT}}
        DESKTOP_TIMEOUT: 750,                       //{{CRITEO_DESKTOP_TIMEOUT}}
        MOBILE_TIMEOUT: 750,                        //{{CRITEO_MOBILE_TIMEOUT}}
    },

    FASTLANE: {
        DOM_ACCOUNT_ID: 11078,                      //{{FASTLANE_DOM_ACCOUNT_ID}}
        INTL_ACCOUNT_ID: 11016,                     //{{FASTLANE_INTL_ACCOUNT_ID}}
        TIMEOUT: 750,                               //{{FASTLANE_TIMEOUT}}
        DESKTOP_TIMEOUT: 750,                       //{{FASTLANE_DESKTOP_TIMEOUT}}
        MOBILE_TIMEOUT: 750,                        //{{FASTLANE_MOBILE_TIMEOUT}}
    },

    GDPR: {
        ENABLED: false
    },

    GUID: {
    },

    IAS: {
        DOM_PUB_ID: 925660,                         //{{IAS_DOM_PUB_ID}}
        INTL_PUB_ID: 925660,                        //{{IAS_INTL_PUB_ID}}
    },

    IX: {
        SCRIPT_KEY: null,                         //{{IX_SCRIPT_KEY}}
        SCRIPT_MAP: {}
    },

    IVR: {
        DEFAULT_DISPLAY_MILLISECONDS: 35 * 1000,    //{{IVR_DISPLAY_MILLISECONDS}}
        DEFAULT_DISPLAY_PERCENT: 50,                //{{IVR_DISPLAY_PERCENT}}}
    },

    KRUX: {
        DOM_CONTROLTAG: '',                         //{{KRUX_DOM_CONTROLTAG}}
        INTL_CONTROLTAG: '',                        //{{KRUX_INTL_CONTROLTAG}}
    },

    PREBID: {
        DOM_BIDDERS: ['rubicon', 'appnexus'],               //{{PREBID_DOM_BIDDERS}}
        INTL_BIDDERS: ['appnexus', 'pangaea', 'rubicon', 'ix', 'openx'],   //{{PREBID_INTL_BIDDERS}}
        NATIVE_BIDDERS: [],                                 //{{PREBID_NATIVE_BIDDERS}}
        S2S_BIDDERS: [],

        DOM_ACCOUNT_IDS: {
            rubicon: '11078',                       //{{PREBID_RUBICON_DOM_ACCOUNT_ID}}
            appnexus: '7745'                        //{{PREBID_APPNEXUS_DOM_ACCOUNT_ID}}
        },

        INTL_ACCOUNT_IDS: {
            rubicon: '11016',                       //{{PREBID_RUBICON_INTL_ACCOUNT_ID}}
            appnexus: '8353',                       //{{PREBID_APPNEXUS_INTL_ACCOUNT_ID}}
            pangaea: '8613',                        //{{PREBID_PANGAEA_INTL_ACCOUNT_ID}}
        },

        RUBICON_DOM_DESKTOP_SITE_ID: 0,                 //{{PREBID_RUBICON_DESKTOP_SITE_ID}}
        RUBICON_INTL_DESKTOP_SITE_ID: 0,                //{{PREBID_RUBICON_DESKTOP_SITE_ID}}
        RUBICON_DOM_MOBILE_SITE_ID: 0,                  //{{PREBID_RUBICON_MOBILE_SITE_ID}}
        RUBICON_INTL_MOBILE_SITE_ID: 0,                 //{{PREBID_RUBICON_MOBILE_SITE_ID}}

        RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING: {      //{{PREBID_RUBICON_DOM_DESKTOP_HP_ZONE_MAP}}
        },

        RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING: {     //{{PREBID_RUBICON_DOM_DESKTOP_ROS_ZONE_MAP}}
        },

        RUBICON_DOM_MOBILE_ZONE_MAPPING: {          //{{PREBID_RUBICON_DOM_MOBILE_ZONE_MAP}}
        },

        RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING: {     //{{PREBID_RUBICON_INTL_DESKTOP_HP_ZONE_MAP}}
        },

        RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING: {    //{{PREBID_RUBICON_INTL_DESKTOP_ROS_ZONE_MAP}}
        },

        RUBICON_INTL_MOBILE_ZONE_MAPPING: {         //{{PREBID_RUBICON_INTL_MOBILE_ZONE_MAP}}
        },

        IX_DESKTOP_SITE_ID_MAPPING: {
        },

        IX_MOBILE_SITE_ID_MAPPING: {
        },

        OPENX_DESKTOP_UNIT_MAPPING: {
        },

        OPENX_MOBILE_UNIT_MAPPING: {
        },

        TIMEOUT: 750,                               //{{PREBID_TIMEOUT}}
        DESKTOP_TIMEOUT: 750,                       //{{PREBID_DESKTOP_TIMEOUT}}
        MOBILE_TIMEOUT: 750,                        //{{PREBID_MOBILE_TIMEOUT}}
    },

    PROXIMIC: {
    },

    SSAI: {
        VENDORS: [],
        URLS: {
            'AppNexus': function(protocol, domain) {
                return 'https://ib.adnxs.com/getuid?'
                    + protocol
                    + '://umto.'
                    + domain
                    + '/user-sync?zwmc=$UID%26domain='
                    + domain
            },
            'Freewheel': function(protocol, domain) {
                return 'https://bea4.v.fwmrm.net/ad/u?mode=echo&cr='
                    + protocol
                    + '%3A%2F%2Fumto.'
                    + domain
                    + '%2Fuser-sync%3Fbea4%3D%23%7Buser.id%7D%26domain%3D'
                    + domain;
            },
            'Rubicon': function(protocol, domain) {
                var brandRegex = /(.*?)\..*?$/;
                var brand = brandRegex.exec(domain);
                return 'https://pixel-us-east.rubiconproject.com/exchange/sync.php?p='
                    + brand;
            },
            'SpotX': function(protocol, domain) {
                return 'https://sync.search.spotxchange.com/partner?adv_id=8662&redir='
                    + protocol
                    + '%3A%2F%2Fumto.'
                    + domain
                    + '%2Fuser-sync%3Fhkgc%3D%24SPOTX_USER_ID%26domain%3D'
                    + domain
            },
            'Telaria': function(protocol, domain) {
                return 'https://eq97f.publishers.tremorhub.com/pubsync?redir='
                    + protocol
                    + '://umto.'
                    + domain
                    + '/user-sync?goiz=%5Btvid%5D%26domain='
                    + domain
            }
        }
    },

    SOURCEPOINT: {
    },

    TRANSACTION_ID: {
    },
};

////////////////////////////////////////////
// SITE OPTIONS 
////////////////////////////////////////////

window.CNN_OPTIONS = {
    OPTIONS_VERSION: 1.2,

    ADFUEL: {
        DEFAULT_DESKTOP_TIMEOUT: 1200,              //{{ADFUEL_DEFAULT_DESKTOP_TIMEOUT}}
        DEFAULT_MOBILE_TIMEOUT: 800,                //{{ADFUEL_DEFAULT_MOBILE_TIMEOUT}}
        SITE_OBJECT: 'CNN'                          //{{ADFUEL_SITE_OBJECT}}
    },

    A9: {
        DISPLAY_TIMEOUT: 1150,                      //{{A9_DISPLAY_TIMEOUT}}
        DISPLAY_REFRESH_TIMEOUT: 1150,              //{{A9_DISPLAY_REFRESH_TIMEOUT}}
        VIDEO_TIMEOUT: 500,                         //{{A9_VIDEO_TIMEOUT}}
        VIDEO_REFRESH_TIMEOUT: 750,                //{{A9_VIDEO_REFRESH_TIMEOUT}}
        DESKTOP_DISPLAY_TIMEOUT: 1150,              //{{A9_DESKTOP_DISPLAY_TIMEOUT}}
        DESKTOP_DISPLAY_REFRESH_TIMEOUT: 1150,      //{{A9_DESKTOP_DISPLAY_REFRESH_TIMEOUT}}
        DESKTOP_VIDEO_TIMEOUT: 500,                 //{{A9_DESKTOP_VIDEO_TIMEOUT}}
        DESKTOP_VIDEO_REFRESH_TIMEOUT: 1150,        //{{A9_DESKTOP_VIDEO_REFRESH_TIMEOUT}}
        MOBILE_DISPLAY_TIMEOUT: 750,                //{{A9_MOBILE_DISPLAY_TIMEOUT}}
        MOBILE_DISPLAY_REFRESH_TIMEOUT: 750,        //{{A9_MOBILE_DISPLAY_REFRESH_TIMEOUT}}
        MOBILE_VIDEO_TIMEOUT: 500,                  //{{A9_MOBILE_VIDEO_TIMEOUT}}
        MOBILE_VIDEO_REFRESH_TIMEOUT: 750,          //{{A9_MOBILE_VIDEO_REFRESH_TIMEOUT}}
        PREROLL_SLOTNAME: 'aps-preroll'
    },

    BEEMRAY: {
        CUSTOMER_ID: 'cnn',
        API_KEY: '39a34d8d-dd1d-4fbf-aa96-fdc5f0329451'
    },

    CRITEO: {
        DESKTOP_ZONES: {
            '160x600': 1047134,
            '300x250': 1047135,
            '300x600': 1047136,
            '728x90': 1047137,
            'HP_970x90': 1128528,
            'HP_970x250': 1128527,
            'ROS_970x90': 1047140,
            'ROS_970x250': 1047139,
            '320x50': 1047138
        },
        MOBILE_ZONES: {
            '300x250': 1090825,
            '320x50': 1090883
        },
        MULTISIZE_METHOD: 'L',
        TIMEOUT: 750,
        DESKTOP_TIMEOUT: 1150,
        MOBILE_TIMEOUT: 750
    },

    GDPR: {
        APP_ID: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwbGF0Zm9ybSI6IndlYiIsInByb2R1Y3QiOiJhZGZ1ZWwiLCJuZXR3b3JrIjoiY25uIiwiYXBwSWQiOiJjbm4tYWRmdWVsLXdlYi14bWQ2dTkifQ.N-lYZh_mvCV2gChDusNhd85B2BD7AiCIcNY2Gr5Rc6c',
        APPLIES: window.AdFuelUtils.getGDPRApplies('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwbGF0Zm9ybSI6IndlYiIsInByb2R1Y3QiOiJhZGZ1ZWwiLCJuZXR3b3JrIjoiY25uIiwiYXBwSWQiOiJjbm4tYWRmdWVsLXdlYi14bWQ2dTkifQ.N-lYZh_mvCV2gChDusNhd85B2BD7AiCIcNY2Gr5Rc6c'),
        ENABLED: true
    },

    IAS: {
        DOM_PUB_ID: 925660,                         //{{IAS_DOM_PUB_ID}}
        INTL_PUB_ID: 925660                         //{{IAS_INTL_PUB_ID}}
    },

    IX: {
        SCRIPT_MAP: {
            '^(ads\\.|stage\\.)?(www|us|next)(-m)?\\.cnn\\.com': {
                intl: '186370-96070407099023',
                dom: '186948-60896576130421'
            },
            '^(stage\\.)?edition(-m)?(\\.(ads|stage)\\.next)?\\.cnn\\.com': '186370-129055748395673'
        }
    },

    KRUX: {
        DOM_CONTROLTAG: 'ITb_4eqO',
        INTL_CONTROLTAG: 'teff71jyu'
    },

    PREBID: {
        DOM_BIDDERS: ['rubicon', 'appnexus'],
        INTL_BIDDERS: ['appnexus', 'pangaea', 'rubicon', 'ix', 'openx'],
        NATIVE_BIDDERS: [],
        S2S_BIDDERS: ['openx','pangaea'],

        DOM_ACCOUNT_IDS: {
            rubicon: '11078',
            appnexus: '7745'
        },

        INTL_ACCOUNT_IDS: {
            rubicon: '11016',
            appnexus: '8353',
            pangaea: '8613'
        },

        RUBICON_DOM_DESKTOP_SITE_ID: 26792,
        RUBICON_INTL_DESKTOP_SITE_ID: 78582,
        RUBICON_DOM_MOBILE_SITE_ID: 42244,
        RUBICON_INTL_MOBILE_SITE_ID: 78584,

        RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING: {
            'atf': 106536,
            'btf': 154308,
            'politics': 761276,
            'style': 0,
        },

        RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING: {
            'atf': 106830,
            'btf': 107752,
            'politics': 761276,
            'style': 0,
        },

        RUBICON_DOM_MOBILE_ZONE_MAPPING: {
            'atf': 185914,
            'btf': 185914,
            'politics': 761278,
            'style': 0,
        },

        RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING: {
            'atf': 650178,
            'btf': 650178,
            'politics': 761276,
            'style': 650180,
        },

        RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING: {
            'atf': 369850,
            'btf': 369850,
            'politics': 761276,
            'style': 650180,
        },

        RUBICON_INTL_MOBILE_ZONE_MAPPING: {
            'atf': 369856,
            'btf': 369856,
            'politics': 369856,
            'style': 369856,
        },

        IX_DESKTOP_SITE_ID_MAPPING: {
            atf: {
                '728x90': '341959',
                '970x250': '341960',
                '970x90': '341961',
                '300x600': '341962',
                '300x250': '341963'
            },
            btf: {
                '300x600': '341965',
                '300x250': '341966',
                '728x90': '341967',
                '970x250': '341968',
                '970x90': '341969'
            }
        },

        IX_MOBILE_SITE_ID_MAPPING: {
            atf: {
                '320x50': '341964',
                '300x250': '341970'
            },
            btf: {
                '300x250': '341971'
            }
        },

        OPENX_DESKTOP_UNIT_MAPPING: {
            '300x250': 540615750,
            '300x600': 540615753,
            '320x50': 540615751,
            '728x90': 540615752,
            '970x90': 540615752,
            '970x250': 540615754
        },

        OPENX_MOBILE_UNIT_MAPPING: {
            '320x50': 540615756,
            '300x250': 540615755
        },

        TIMEOUT: 750,                               //{{PREBID_TIMEOUT}}
        DESKTOP_TIMEOUT: 1150,                      //{{PREBID_DESKTOP_TIMEOUT}}
        MOBILE_TIMEOUT: 750                         //{{PREBID_MOBILE_TIMEOUT}}
    }
};
window.AdFuelOptions = window.AdFuelUtils.mergeDeep(window.AdFuelOptions, window.CNN_OPTIONS);


////////////////////////////////////////////
//AA Prebid 3.5
////////////////////////////////////////////


  /*
        Prebid Module - Version 3.5.8
        @3.5.0: - Initialization Update for GDPR
        @3.5.1: - Configuration cleanup and removal of key suppression
        @3.5.2: - Native Ad Units
                - Prebid Update to 2.18.0
        @3.5.3: - Addition of Criteo
        @3.5.4: - Fix for REQUESTED_AD_UNITS bug
        @3.5.5: - Fix for Native Ad Units
                - Fix for additional targeting call
                - Prebid Update to 2.22.0 Native Fork
                - Fix for key suppression
        @3.5.6: - Fix for dual calls for setTargetingForGPTAsync
                - Removal of fallback targeting call
        @3.5.7: - Fix for custom price buckets on Domestic
        @3.5.8: - Dynamic Prebid Version Update
                - Wrap of setTargetingForGPTAsync in function to push to googletag.cmd
  */

 (function createPrebidAdFuelModule() {``

 'use strict';
 var MODULE_NAME = 'Prebid Module';
 var MODULE_VERSION = 'v3.5.8';

 var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'prebid', 'color: #58f53f; padding: 2px');
 var isIntl = window.AdFuelUtils.isIntl || false;
 var cdnRoot = window.AdFuelUtils.cdnRoot || 'i.cdn.turner.com';
 var libraryConfigured = false;

 var PREBID_TIMEOUT = window.AdFuelUtils.isMobile.any
     ? (window.AdFuelOptions.PREBID.MOBILE_TIMEOUT || window.AdFuelOptions.PREBID.TIMEOUT)
     : (window.AdFuelOptions.PREBID.DESKTOP_TIMEOUT || window.AdFuelOptions.PREBID.TIMEOUT)
 var PREBID_VIDEO_TIMEOUT = 500;
 var PREBID_VIDEO_REFRESH_TIMEOUT = 1000;
 var PREBID_MIDROLL_VIDEO_TIMEOUT = 750;

 var DOM_BIDDERS = window.AdFuelOptions.PREBID.DOM_BIDDERS || [];
 var INTL_BIDDERS = window.AdFuelOptions.PREBID.INTL_BIDDERS || [];
 var NATIVE_BIDDERS = window.AdFuelOptions.PREBID.NATIVE_BIDDERS || [];

 var DOM_ACCOUNT_IDS = window.AdFuelOptions.PREBID.DOM_ACCOUNT_IDS;

 var INTL_ACCOUNT_IDS = window.AdFuelOptions.PREBID.INTL_ACCOUNT_IDS;

 var RUBICON_ACCOUNT_ID = isIntl ? INTL_ACCOUNT_IDS.rubicon : DOM_ACCOUNT_IDS.rubicon;
 var APPNEXUS_ACCOUNT_ID = isIntl ? INTL_ACCOUNT_IDS.appnexus : DOM_ACCOUNT_IDS.appnexus;
 var PANGAEA_ACCOUNT_ID = isIntl ? INTL_ACCOUNT_IDS.pangaea : '';

 var RUBICON_DOM_DESKTOP_SITE_ID = window.AdFuelOptions.PREBID.RUBICON_DOM_DESKTOP_SITE_ID;
 var RUBICON_INTL_DESKTOP_SITE_ID = window.AdFuelOptions.PREBID.RUBICON_INTL_DESKTOP_SITE_ID;
 var RUBICON_DOM_MOBILE_SITE_ID = window.AdFuelOptions.PREBID.RUBICON_DOM_MOBILE_SITE_ID;
 var RUBICON_INTL_MOBILE_SITE_ID = window.AdFuelOptions.PREBID.RUBICON_INTL_MOBILE_SITE_ID;

 var RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING = window.AdFuelOptions.PREBID.RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING;
 var RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING = window.AdFuelOptions.PREBID.RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING;
 var RUBICON_DOM_MOBILE_ZONE_MAPPING = window.AdFuelOptions.PREBID.RUBICON_DOM_MOBILE_ZONE_MAPPING;

 var RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING = window.AdFuelOptions.PREBID.RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING;
 var RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING = window.AdFuelOptions.PREBID.RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING;
 var RUBICON_INTL_MOBILE_ZONE_MAPPING = window.AdFuelOptions.PREBID.RUBICON_INTL_MOBILE_ZONE_MAPPING;

 var RUBICON_SIZE_MAPPING = {
     '728x90': 2,
     '160x600': 9,
     '300x600': 10,
     '300x250': 15,
     '320x50': 43,
     '970x90': 55,
     '970x250': 57,
 };

 var PREBID_VIDEO_TARGETING = { hb_uuid: '', hb_bidder: '', hb_adid: '', hb_pb: '', hb_size: '', hb_source: '' };
 var PREBID_VIDEO_REFRESHED_TARGETING = { hb_uuid: '', hb_bidder: '', hb_adid: '', hb_pb: '', hb_size: '', hb_source: '' };
 var PREBID_MIDROLL_VIDEO_TARGETING = { hb_pb_cat_dur: '', hb_cache_id: '' };

 window.pbjs = window.pbjs || {};
 window.pbjs.que = window.pbjs.que || [];

 var REQUESTED_AD_UNITS = { banner: [], native: [] };

 var bidMocks = {
     criteo: {
         bidder: "criteo",
         params: {
             networkId: 4157
         }
     },
     rubicon:{
         bidder: 'rubicon',                          // Fastlane (US and EU) and AppNexus (EU ONLY)
         params: {
             accountId: RUBICON_ACCOUNT_ID,          // Toggle based on location
             siteId: 26792,                          // Get From Mapping
             zoneId: 231942,                         // Get From Mapping
             position: "btf",                        // Parse from Div Id
         }
     },
     appnexus: {
         bidder: 'appnexus',
         params: {
             invCode: '',                          // Optional - Supplied from AppNexus
             member: APPNEXUS_ACCOUNT_ID,               // Optional - Supplied from AppNexus
             reserve: 0.01
         }
     },
     pangaea: {
         bidder: 'pangaea',
         params: {
             invCode: '',
             member: PANGAEA_ACCOUNT_ID,
             reserve: 0.01
         }
     },
     ix: {
         bidder: 'ix',
         params: {
             siteId: '',
             size: []
         }
     },
     openx: {
         bidder: 'openx',
         params: {
             unit: '',
             delDomain: 'turnereu1-d.openx.net',
             customParams: {},
         }
     },
     sharethrough: {
       bidder: 'sharethrough',
       params: {
         pkey: ''
       }
     }
 };

 function getVideoBids(slotName, timeout){
     return new Promise(function(resolve) {
         logger.log("Building Video AdUnit...");
         slotName = slotName || 'cnn_homepage_video1';
         timeout = timeout || PREBID_VIDEO_TIMEOUT;
         var videoBid = {
             code: 'video1',
             mediaTypes: {
                 video: {
                     context: 'instream',
                     playerSize: [640,480]
                 }
             },
             bids: [{
                 bidder: 'appnexus',
                 params: {
                     invCode: slotName,
                     member: APPNEXUS_ACCOUNT_ID,
                     video: {
                         skippable: true,
                         playback_methods: ['auto_play_sound_off']
                     }
                 }
             }]
         };
         logger.log("Adding Video AdUnit: ", videoBid);
         window.pbjs.que.push(function(){
             window.pbjs.addAdUnits(videoBid);
             logger.log('Requesting Video Bids...', videoBid);
             var videoBidsBackHandler = function(bids){
                 try{
                     var highestCmpBids = window.pbjs.getHighestCpmBids(['video1']);
                     var uuid = '';
                     if (highestCmpBids.length > 0){
                         logger.log('Found highest cmp bid for \'video\'...');
                         var targetBid = highestCmpBids[0];
                         if (targetBid.videoCacheKey){
                             logger.log('Returning Video Cache Key...');
                             uuid = targetBid.videoCacheKey;
                         }
                     }
                 }catch(err){
                     logger.warn('Could not get highest cmp bid for \'video1\'...', err);
                 }
                 if (Object.keys(bids).length > 0) {
                     logger.log('Received Bids...');
                     PREBID_VIDEO_TARGETING = window.pbjs.getAdserverTargeting().video1;
                     PREBID_VIDEO_TARGETING.hb_uuid = uuid;
                 }
                 resolve(PREBID_VIDEO_TARGETING);
             }
             window.pbjs.requestBids({
                 adUnitCodes: ['video1'],
                 bidsBackHandler: videoBidsBackHandler,
                 timeout: timeout
             });
             logger.log('Removing Video Ad Unit: ', videoBid);
         });
     });
 }

 function getRefreshedVideoBids(slotName, timeout){
     return new Promise(function(resolve) {
         slotName = slotName || 'cnn_homepage_video1';
         timeout = timeout || PREBID_VIDEO_REFRESH_TIMEOUT;
         logger.log("Building Video AdUnit...");
         var videoBid = {
             code: 'video1',
             mediaTypes: {
                 video: {
                     context: 'instream',
                     playerSize: [640,480]
                 }
             },
             bids: [{
                 bidder: 'appnexus',
                 params: {
                     invCode: slotName,
                     member: APPNEXUS_ACCOUNT_ID,
                     video: {
                         skippable: true,
                         playback_methods: ['auto_play_sound_off']
                     }
                 }
             }]
         };
         window.pbjs.que.push(function(){
             logger.log('Requesting Video Bids...', videoBid);
             var videoBidsBackHandler = function(bids){
                 try{
                     var highestCmpBids = window.pbjs.getHighestCpmBids(['video1']);
                     var uuid = '';
                     if (highestCmpBids.length > 0){
                         logger.log('Found highest cmp bid for \'video\'...');
                         var targetBid = highestCmpBids[0];
                         if (targetBid.videoCacheKey){
                             logger.log('Returning Video Cache Key...');
                             uuid = targetBid.videoCacheKey;
                         }
                     }
                 }catch(err){
                     logger.warn('Could not get highest cmp bid for \'video1\'...', err);
                 }
                 if (Object.keys(bids).length > 0) {
                     logger.log('Received Bids...');
                     PREBID_VIDEO_REFRESHED_TARGETING = window.pbjs.getAdserverTargeting().video1;
                     PREBID_VIDEO_REFRESHED_TARGETING.hb_uuid = uuid;
                 }
                 resolve(PREBID_VIDEO_REFRESHED_TARGETING);
             }
             window.pbjs.requestBids({
                 adUnitCodes: ['video1'],
                 bidsBackHandler: videoBidsBackHandler,
                 timeout: timeout
             });
             logger.log('Removing Video Ad Unit: ', videoBid);
             window.pbjs.removeAdUnit('video1');
         });
     });
 }

 function getMidRollVideoBids(slotName, timeout, duration, durationRange, playerSize){
     return new Promise(function(resolve, reject) {
         logger.log("Building Video AdUnit...");
         duration = duration || 240;
         durationRange = durationRange || [15, 30];
         playerSize = playerSize || [640,480];
         timeout = timeout || PREBID_MIDROLL_VIDEO_TIMEOUT;
         slotName = slotName || 'cnn_homepage_midroll';
         var videoBid = {
             code: 'video1',
             mediaTypes: {
                 video: {
                     context: 'adpod',
                     playerSize: playerSize,
                     adPodDurationSec: duration,
                     durationRangeSec: durationRange
                 }
             },
             bids: [{
                 bidder: 'appnexus',
                 params: {
                     invCode: slotName,
                     member: APPNEXUS_ACCOUNT_ID,
                     video: {
                         skippable: true,
                         playback_methods: ['auto_play_sound_off']
                     }
                 }
             }]
         };
         logger.log("Adding Video AdUnit: ", videoBid);
         var innerFunc = function(){
             window.pbjs.addAdUnits(videoBid);
             logger.log('Requesting Video Bids...', videoBid);
             var videoBidsBackHandler = function(){
                 logger.log('Calling pbjs.adServers.freewheel.getTargeting...');
                 window.pbjs.adServers.freewheel.getTargeting({
                     codes: ['video1'],
                     callback: function(err, targeting) {
                         if (err) {
                             logger.error("Freewheel Targeting Error: ", err);
                             reject(err);
                         }
                         logger.log("FreewheelTargeting: ", targeting);
                         var response = { hb_cache_id: '' };
                         if (Array.isArray(targeting.video1)) {
                             targeting.video1.forEach(function(target) {
                               Object.keys(target).forEach(function(key){
                                   if (key === 'hb_pb_cat_dur'){
                                       response[target[key]] = key;
                                   }else if (typeof response[key] !== 'undefined') {
                                       response[key] = target[key];
                                   }
                               });
                             });
                         }
                         PREBID_MIDROLL_VIDEO_TARGETING = response;
                         resolve(PREBID_MIDROLL_VIDEO_TARGETING);
                     }
                 });
             }
             window.pbjs.requestBids({
                 adUnitCodes: ['video1'],
                 bidsBackHandler: videoBidsBackHandler,
                 timeout: PREBID_MIDROLL_VIDEO_TIMEOUT
             });
         }
         logger.log('LibraryConfigured: ', libraryConfigured);
         if (libraryConfigured){
             window.pbjs.que.push(innerFunc);
         }
     });
 }

 function buildPrebidAdUnits(asset) {
   var adUnits = [];
   var nativeAdUnits = [];
   for (var x = 0; x < asset.length; x++) {
       var invCodeArray = asset[x].rktr_ad_id.split('/');
       var pos = asset[x].targeting[0][1][0];
       logger.log('Pos: ', pos);
       var invCode = invCodeArray[0].toLowerCase() + (invCodeArray[1] ? '_' + invCodeArray[1].toLowerCase() : '');
       var comboAdUnitMock = {
           code: '',
           mediaTypes: {
             native: {
                 title: {
                   required: true,
                   len: 80
                 },
                 body: {
                   required: true
                 },
                 image: {
                   required: true
                 },
                 sponsoredBy: {
                   required: true
                 },
                 clickUrl: {
                   required: true
                 },
                 icon: {
                   required: true
                 },
                 cta: {
                   required: false
                 }
               },
           },
           bids: []
       };
       var bannerAdUnitMock = {
         code: '',
         mediaTypes: {
           banner: {
             sizes: []
           },
         },
         bids: []
     };
     if (asset[x].monetization.isMonetized) {
           var sizeMapArray = [];

           for (var sIndex = 0; sIndex < asset[x].monetization.filteredSizes.length; sIndex++){
               sizeMapArray.push(RUBICON_SIZE_MAPPING[asset[x].monetization.filteredSizes[sIndex].join('x')]);
           }
           var posValue = '';
           var position = 'atf';

           var slotTargets = asset[x].targeting || [];

           for (var tIndex = 0; tIndex < slotTargets.length; tIndex++) {
               var target = slotTargets[tIndex];
               if (target[0] === 'pos') {
                   if (Array.isArray(target[1])) {
                       posValue = target[1][0];
                       position = target[1][0].split('_')[1];
                   } else {
                       posValue = target[1];
                       position = target[1].split('_')[1];
                   }
               }
           }

           var isHomepage = asset[x].rktr_ad_id.indexOf('/homepage') >= 0 || asset[x].rktr_ad_id.indexOf('/business/landing') >= 0;
           bannerAdUnitMock.code = asset[x].originalElementId || asset[x].rktr_slot_id;
           comboAdUnitMock.code = asset[x].originalElementId || asset[x].rktr_slot_id;
           bannerAdUnitMock.mediaTypes.banner.sizes = asset[x].monetization.filteredSizes.map(function(fSize){
               return fSize.map(function(size){
                   return parseInt(size, 10);
               });
           });
           console.log("Filtered Sizes: ", asset[x].monetization.filteredSizes);
           console.log("Banner Sizes: ", bannerAdUnitMock.mediaTypes.banner.sizes);
           var adUnitMock = bannerAdUnitMock;
           var buildBidsForAdUnitMock = function buildBidsForAdUnitMock() {
               var BIDDERS = isIntl ? INTL_BIDDERS : DOM_BIDDERS;
               for (var bIndex = 0; bIndex < BIDDERS.length; bIndex++){
                   var bidder = BIDDERS[bIndex];
                   var bannerBidMock = Object.assign({}, bidMocks[bidder]);
                   if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                     comboAdUnitMock.code = asset[x].originalElementId || asset[x].rktr_slot_id;
                     comboAdUnitMock.code = asset[x].originalElementId || asset[x].rktr_slot_id;
                   }
                   adUnitMock.code = asset[x].originalElementId || asset[x].rktr_slot_id;
                   adUnitMock.code = asset[x].originalElementId || asset[x].rktr_slot_id;
                   switch(bidder) {
                       case "criteo":
                           adUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                             comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           }
                           break;
                       case 'appnexus':
                           bannerBidMock.params.invCode = invCode + '_' + posValue;
                           adUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                             comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           }
                           break;
                       case 'pangaea':
                           bannerBidMock.params.invCode = invCode + '_' + posValue;
                           adUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                             comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           }
                           break;
                       case 'rubicon':
                           bannerBidMock.params.siteId = isIntl
                               ? (window.AdFuelUtils.isMobile.any
                                   ? RUBICON_INTL_MOBILE_SITE_ID
                                   : RUBICON_INTL_DESKTOP_SITE_ID)
                               : (window.AdFuelUtils.isMobile.any
                                   ? RUBICON_DOM_MOBILE_SITE_ID
                                   : RUBICON_DOM_DESKTOP_SITE_ID);

                           if (window.AdFuelUtils.isMobile.any) {
                               bannerBidMock.params.zoneId = isIntl
                                   ? (RUBICON_INTL_MOBILE_ZONE_MAPPING[position]
                                       ? RUBICON_INTL_MOBILE_ZONE_MAPPING[position]
                                       : RUBICON_INTL_MOBILE_ZONE_MAPPING)
                                   : (RUBICON_DOM_MOBILE_ZONE_MAPPING[position]
                                       ? RUBICON_DOM_MOBILE_ZONE_MAPPING[position]
                                       : RUBICON_DOM_MOBILE_ZONE_MAPPING);

                           } else {
                               if (isHomepage) {
                                   bannerBidMock.params.zoneId = isIntl
                                       ? (RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING[position]
                                           ? RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING[position]
                                           : RUBICON_INTL_DESKTOP_HP_ZONE_MAPPING)
                                       : (RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING[position]
                                           ? RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING[position]
                                           : RUBICON_DOM_DESKTOP_HP_ZONE_MAPPING);
                               } else {
                                   bannerBidMock.params.zoneId = isIntl
                                       ? (RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING[position]
                                           ? RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING[position]
                                           : RUBICON_INTL_DESKTOP_ROS_ZONE_MAPPING)
                                       : (RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING[position]
                                           ? RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING[position]
                                           : RUBICON_DOM_DESKTOP_ROS_ZONE_MAPPING);
                               }
                           }
                           bannerBidMock.params.position = position;
                           adUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                             comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                           }
                           break;
                       case 'ix':
                           asset[x].monetization.filteredSizes.forEach(function(fSize){
                               var ixBidMock = {
                                   bidder: 'ix',
                                   params: {
                                       siteId: '',
                                       size: []
                                   }
                               };
                               var formattedSize = fSize.join('x');
                               fSize = fSize.map(function(size){
                                   return parseInt(size, 10);
                               });
                               ixBidMock.params.siteId = window.AdFuelUtils.isMobile.any
                                 ? (
                                   window.AdFuelOptions.PREBID.IX_MOBILE_SITE_ID_MAPPING[position][formattedSize] || ''
                                 )
                                 : (
                                     window.AdFuelOptions.PREBID.IX_DESKTOP_SITE_ID_MAPPING[position][formattedSize] || ''
                                 );
                               ixBidMock.params.size = JSON.parse(JSON.stringify(fSize));
                               if (ixBidMock.params.siteId !== '') {
                                 adUnitMock.bids.push(JSON.parse(JSON.stringify(ixBidMock)));
                                 if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                                     comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(ixBidMock)));
                                 }
                               }
                           });
                           break;
                       case 'openx':
                           adUnitMock.mediaTypes.banner.sizes.forEach(function(filteredSize){
                               var openXBidMock = {
                                   bidder: 'openx',
                                   params: {
                                       unit: '',
                                       delDomain: 'turnereu1-d.openx.net',
                                       customParams: {},
                                   }
                               };
                               var formattedSize = filteredSize.join('x');
                               openXBidMock.params.unit = window.AdFuelUtils.isMobile.any ? window.AdFuelOptions.PREBID.OPENX_MOBILE_UNIT_MAPPING[formattedSize] : window.AdFuelOptions.PREBID.OPENX_DESKTOP_UNIT_MAPPING[formattedSize];
                               var exists = false;
                               adUnitMock.bids.forEach(function(bid) {
                                   if (bid.bidder === 'openx') {
                                       if (bid.params.unit === openXBidMock.params.unit) exists = true;
                                       exists = true;
                                   }
                               })
                               if (!exists && openXBidMock.params.unit !== '' && typeof openXBidMock.params.unit !== 'undefined' && openXBidMock.params.unit !== null){
                                   adUnitMock.bids.push(JSON.parse(JSON.stringify(openXBidMock)));
                                   if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                                     comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(openXBidMock)));
                                   }
                               }
                           });
                           break;
                       case 'sharethrough':
                           adUnitMock.mediaTypes.banner.sizes.forEach(function(filteredSize){
                               var sharethroughBidMock = bannerBidMock;
                               var formattedSize = filteredSize.join('x');
                               sharethroughBidMock.params.pkey = window.AdFuelOptions.PREBID.SHARETHROUGH_UNIT_MAPPING[formattedSize] || ''
                               var exists = false;
                               adUnitMock.bids.forEach(function(bid) {
                                 if (bid.bidder === 'sharethrough') {
                                     if (bid.params.pkey === sharethroughBidMock.params.pkey) exists = true;
                                 }
                               })
                               if (!exists && sharethroughBidMock.params.pkey !== ''){
                                   adUnitMock.bids.push(JSON.parse(JSON.stringify(sharethroughBidMock)));
                                   if (NATIVE_BIDDERS.indexOf(bidder) >= 0) {
                                     comboAdUnitMock.bids.push(JSON.parse(JSON.stringify(sharethroughBidMock)));
                                   }
                               }
                           });
                           break;
                       default:
                           break;
                   }
               }
           }

           buildBidsForAdUnitMock(isIntl);
           logger.log("Ad Unit: ", adUnitMock);
           adUnits.push(adUnitMock);
           nativeAdUnits.push(comboAdUnitMock);
       }
   }
   logger.log("Built Ad Units: ", JSON.parse(JSON.stringify({banner: adUnits, native: nativeAdUnits})));
   return {banner: adUnits, native: nativeAdUnits};
 }

 function preQueueCallback(asset, done) {
   var callbackExecuted = false;
   if (asset.length > 0){
       var adUnitObject = buildPrebidAdUnits(asset);
       var adUnits = adUnitObject.banner;
       var nativeAdUnits = adUnitObject.native;
       adUnits = adUnits.filter(function(adUnit) {
         return REQUESTED_AD_UNITS.banner.indexOf(adUnit) == -1 && adUnit.bids.length > 0;
       });
       nativeAdUnits = nativeAdUnits.filter(function(adUnit) {
         return REQUESTED_AD_UNITS.native.indexOf(adUnit) == -1 && adUnit.bids.length > 0;
       });
       var pbQueueFunction = function pbQueueFunction() {
             if (adUnits.length > 0){
                 logger.log("Adding Ad Units...", JSON.parse(JSON.stringify(adUnits)));
                 window.pbjs.addAdUnits(JSON.parse(JSON.stringify(adUnits)));
             }
             if (nativeAdUnits.length > 0){
               logger.log("Adding Ad Units...", JSON.parse(JSON.stringify(nativeAdUnits)));
               window.pbjs.addAdUnits(JSON.parse(JSON.stringify(nativeAdUnits)));
             }
             logger.log("Requesting Bids...");
             var slots = adUnits.map(function(adUnit){ return adUnit.code });
             var nativeSlots = nativeAdUnits.map(function(adUnit){ return adUnit.code });

             var pbjsInnerFunc = function() {
                 if (slots.length > 0) window.googletag.cmd.push(function(){ window.pbjs.setTargetingForGPTAsync(slots); } );
                 if (nativeSlots.length > 0) window.googletag.cmd.push(function(){ window.pbjs.setTargetingForGPTAsync(nativeSlots); });
             };
             var bidsBackHandlerFunc = function (bids) {
                 if (window.pbjs.cmd) {
                   window.pbjs.cmd.push(function(){
                       logger.log("cmd: Setting Targeting: ", bids);
                       pbjsInnerFunc();
                   });
                 }else{
                   window.pbjs.que.push(function() {
                       logger.log("que: Setting Targeting: ", bids);
                       pbjsInnerFunc();
                   });
                 }
                 clearTimeout(window.fallbackTimeout);
                 if (!callbackExecuted) {
                     callbackExecuted = true;
                     done();
                 }
             }
             if (adUnits.length > 0 || nativeAdUnits.length > 0) {
                 JSON.parse(JSON.stringify(adUnits)).forEach(function(adUnit) {
                   REQUESTED_AD_UNITS.banner.push(adUnit);
                 });
                 JSON.parse(JSON.stringify(nativeAdUnits)).forEach(function(adUnit) {
                   REQUESTED_AD_UNITS.native.push(adUnit);
                 });
                 logger.log("Set Requested Ad Units: ", REQUESTED_AD_UNITS);
                 logger.log("Ad Unit Codes: ", adUnits.map(function(adUnit){ return adUnit.code }));
                 logger.log("Native Ad Unit Codes: ", nativeAdUnits.map(function(adUnit){ return adUnit.code }));
                 window.pbjs.requestBids({
                     adUnitCodes: adUnits.map(function(adUnit){ return adUnit.code }),
                     timeout: PREBID_TIMEOUT,
                     bidsBackHandler: bidsBackHandlerFunc
                 });
                 window.fallbackTimeout = setTimeout(function() {
                     logger.log("Timed out...");
                     clearTimeout(window.fallbackTimeout);
                     if (!callbackExecuted) {
                         callbackExecuted = true;
                         done();
                     }
                 }, PREBID_TIMEOUT);
                 adUnits.length = 0;
             }
         }
         window.pbjs.que.push(pbQueueFunction);
       }else{
         if (!callbackExecuted) {
             callbackExecuted = true;
             done();
         }
       }
   }

 function preDispatchCallback(asset, done) {
   done();
 }

 function preRefreshCallback(asset, done) {
   var callbackExecuted = false;
   if (asset.length > 0){
       var adUnits = buildPrebidAdUnits(asset);
       var pbQueueFunction = function pbQueueFunction() {
           if (adUnits.length > 0){
               var adUnitCodes = adUnits.map(function(adUnit){ return adUnit.code });
               logger.log("Requesting Bids...", adUnitCodes);
               window.pbjs.requestBids({
                   adUnitCodes: adUnitCodes,
                   timeout: PREBID_TIMEOUT,
                   bidsBackHandler: function(bids){
                       clearTimeout(window.fallbackTimeout);
                       logger.log("GOT BIDS: ", bids, adUnitCodes);
                       window.pbjs.setTargetingForGPTAsync(adUnitCodes);
                       if (!callbackExecuted) {
                           callbackExecuted = true;
                           done();
                       }
                   }
               });
               window.fallbackTimeout = setTimeout(function() {
                   logger.log("Timed out...");
                   clearTimeout(window.fallbackTimeout);
                   if (!callbackExecuted) {
                       callbackExecuted = true;
                       done();
                   }
               }, PREBID_TIMEOUT);
           }
       }
       logger.log('Pre-Refresh Asset: ', asset);
       var refreshedPageSlots = asset.map(function(pageSlot){
           logger.log('Page Slot: ', pageSlot, pageSlot.rktr_slot_id);
           return pageSlot.rktr_slot_id;
       });
       logger.log('Refreshed Page Slots: ', refreshedPageSlots);
       window.pbjs.que.push(pbQueueFunction);
   }else{
       if (!callbackExecuted) {
           callbackExecuted = true;
           done();
       }
   }
 }

 function setGeoTargeting(forceIntl) {
   logger.log("Setting GeoTargeting... ", window.AdFuelUtils.isIntl);
   var setGeoTarget = function setGeoTarget() {
       if (window.AdFuelUtils.isIntl) {
           logger.log('Setting Geo Target: EU');
           window.AdFuel.addPageLevelTarget('hbg', 'EU')
       }else if(forceIntl) {
           logger.log('Setting Geo Target: EU');
           window.AdFuel.addPageLevelTarget('hbg', 'EU')
       }else{
           logger.log('Setting Geo Target: US');
           window.AdFuel.addPageLevelTarget('hbg', 'US')
       }
   }
   window.googletag.cmd.push(setGeoTarget)
 }

 function registerModuleWithAdFuel() {
   logger.log('Registering ' + MODULE_NAME + ' module with AdFuel');
   window.AdFuel.setOptions({
       queueCallbackTimeoutInMilliseconds: PREBID_TIMEOUT
   });
   window.AdFuel.registerModule(MODULE_NAME, {
       preQueueCallback: preQueueCallback,
       preDispatchCallback: preDispatchCallback,
       preRefreshCallback: preRefreshCallback
   }, MODULE_VERSION, window.AdFuelOptions.PREBID);
 }

 function configurePrebidLibrary() {
   if (!libraryConfigured) {
       libraryConfigured = true;
       var priceBuckets = {
           buckets: [{
               'precision': 2,
               'min': 0,
               'max': 5,
               'increment': 0.01
           },{
               'precision': 2,
               'min': 5,
               'max': 30,
               'increment': 0.05
           },{
               'precision': 2,
               'min': 30,
               'max': isIntl ? 50 : 115,
               'increment': 1.00
           }]
       };
       var sendAllBids = true; //isIntl ? false : true;
       var innerFunc = function(){
         var checkConsent = typeof window.AdFuelOptions.GDPR.ENABLED !== 'undefined' ? window.AdFuelOptions.GDPR.ENABLED : false;
         var prebidConfigObject = {
             priceGranularity: priceBuckets,
             enableSendAllBids: sendAllBids,
             sendNativeTargetingKeys: false,
             bidderTimeout: PREBID_TIMEOUT,
             cache: {
                 url: 'https://prebid.adnxs.com/pbc/v1/cache'
             },
             adpod: { brandCategoryExclusion: true },
             userSync: {
                 filterSettings: {
                     iframe: {
                         bidders: '*',   // '*' means all bidders
                         filter: 'include'
                     }
                 }
             }
         };
         if (window.AdFuelOptions.PREBID && window.AdFuelOptions.PREBID.S2S_BIDDERS && window.AdFuelOptions.PREBID.S2S_BIDDERS.length > 0) {
             prebidConfigObject.s2sConfig = {
                 accountId: 'f7c6e556-48f6-4b8c-9fb6-921c12c9362f',
                 enabled: true,
                 bidders: window.AdFuelOptions.PREBID.S2S_BIDDERS || ['openx', 'pangaea', 'sharethrough'],
                 timeout: 750,
                 adapter: 'prebidServer',
                 endpoint: 'https://prebid.adnxs.com/pbs/v1/openrtb2/auction',
                 syncEndpoint: 'https://prebid.adnxs.com/pbs/v1/cookie_sync'
             }
         }
         var bidderSettings = {
             appnexus: {
                 suppressEmptyKeys: true,
                 adserverTargeting: [{
                     key: 'hb_appnexus_tier',
                     val: function(bidResponse) {
                         if (bidResponse.appnexus.dealPriority != null){return bidResponse.appnexus.dealPriority;}
                     }
                 }]
             }
         };
         if (!isIntl) {
             bidderSettings.rubicon = {
               alwaysUseBid: true,
               suppressEmptyKeys: true,
               adserverTargeting: [{
                 key: "hb_db_rubicon",
                 val: function(bidResponse) {
                     var keyvalue;
                     if (bidResponse.adserverTargeting && bidResponse.adserverTargeting['rpfl_'+(isIntl ? INTL_ACCOUNT_IDS['rubicon'] : DOM_ACCOUNT_IDS['rubicon'])]) {
                         keyvalue=bidResponse.adserverTargeting['rpfl_'+(isIntl ? INTL_ACCOUNT_IDS['rubicon'] : DOM_ACCOUNT_IDS['rubicon'])];
                     } else if (bidResponse.rubiconTargeting && bidResponse.rubiconTargeting['rpfl_'+(isIntl ? INTL_ACCOUNT_IDS['rubicon'] : DOM_ACCOUNT_IDS['rubicon'])]) {
                         keyvalue=bidResponse.rubiconTargeting['rpfl_'+(isIntl ? INTL_ACCOUNT_IDS['rubicon'] : DOM_ACCOUNT_IDS['rubicon'])];
                     } else {
                         return;
                     }
                     var deal_tier=keyvalue.substring(keyvalue.indexOf('_')+1);
                     return deal_tier;
                 }
               }]
             };
         }
         Object.keys(bidMocks).forEach(function(bidder){
             bidderSettings[bidder] = bidderSettings[bidder] || {};
             bidderSettings[bidder].sendStandardTargeting = false;
         });
         if (checkConsent){
             logger.log("Checking for GDPR Consent...");
             window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
                 if (applies){
                     logger.log('Setting consentManagement config...')
                     prebidConfigObject.consentManagement = {
                         cmpApi: 'iab',
                         timeout: 1000,
                         allowAuctionWithoutConsent: false
                     }
                 };
                 logger.log("Setting config...", prebidConfigObject);
                 window.pbjs.setConfig(prebidConfigObject);
                 logger.log("Setting Bidder Settings...", bidderSettings);
                 window.pbjs.bidderSettings = bidderSettings;
                 logger.log("Adding alias for Pangaea...");
                 window.pbjs.aliasBidder('appnexus', 'pangaea');
                 setGeoTargeting();
             });
         }else{
             logger.log("Skipping GDPR Consent Check...");
             logger.log("Setting config...", prebidConfigObject);
             window.pbjs.setConfig(prebidConfigObject);
             logger.log("Setting Bidder Settings...", bidderSettings);
             window.pbjs.bidderSettings = bidderSettings;
             logger.log("Adding alias for Pangaea...");
             window.pbjs.aliasBidder('appnexus', 'pangaea');
             setGeoTargeting();
         }
       }
       window.pbjs.que.push(innerFunc);
       window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
       window.AdFuelVideoAPI.Prebid = window.PrebidVideoAPI = {
           getTargetingData: getVideoBids,
           getRefreshedTargetingData: getMidRollVideoBids,
           getPreRollTargetingData: getVideoBids,
           getMidRollTargetingData: getMidRollVideoBids,
           getRefreshedPreRollTargetingData: getRefreshedVideoBids,
           getRefreshedMidRollTargetingData: getMidRollVideoBids,
           __VERSION__: MODULE_VERSION
       };
       var prebidVersion = '2.29.0.min';
       if (window.AdFuelUtils.getURLParam('prebidVersion')){
           prebidVersion = window.AdFuelUtils.getURLParam('prebidVersion');
       }
       if (!document.getElementById('PrebidScript')){
           var a = document;
           var b = a.createElement('script');
           var c = a.getElementsByTagName('script')[0];
           b.type = 'text/javascript';
           b.id = "PrebidScript";
           b.src = '//' + cdnRoot + '/ads/adfuel/modules/prebid' + prebidVersion + '.js';
           c.parentNode.insertBefore(b, c);
       }
       var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
       if (timeoutOverride) {
           PREBID_TIMEOUT = timeoutOverride;
           logger.log('Overriding Max Duration Time: ', PREBID_TIMEOUT);
       }
   }
 }

 function init() {
     configurePrebidLibrary();
     if (window.AdFuel && window.AdFuel.cmd) {
         //AdFuel loaded first
         window.AdFuel.cmd.push(registerModuleWithAdFuel);
     }else if (window.AdFuel) {
         registerModuleWithAdFuel();
     } else {
         window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel)
     }
 }

 logger.log('Initializing Module...');
 init();
})();



////////////////////////////////////////////
//AB A9 3.3
////////////////////////////////////////////

/*
    Amazon A9 Module - Version 3.3.1
    - GDPR Updates (CSD-1944)
    - SlotName Updates (CSD-1961/CSD-1965)
*/

(function createA9AdFuelModule() {

    'use strict';

    var MODULE_NAME = 'Amazon A9 Module';
    var MODULE_VERSION = 'v3.3.1';

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'a9', 'color: #58f53f; padding: 2px');

    var blocked = false;

    var a9bids;                         // display a9 bid cache
    var bidSlots = [];                  // slots sent to a9 for auction
    var refreshSlots = [];              // slots sent to a9 on refresh
    var defaultTimeout = window.AdFuelUtils.isMobile.any ? (window.AdFuelOptions.A9.MOBILE_VIDEO_TIMEOUT || window.AdFuelOptions.A9.VIDEO_TIMEOUT) : (window.AdFuelOptions.A9.DESKTOP_VIDEO_TIMEOUT || window.AdFuelOptions.A9.VIDEO_TIMEOUT);
    var defaultRefreshTimeout = window.AdFuelUtils.isMobile.any ? (window.AdFuelOptions.A9.MOBILE_VIDEO_REFRESH_TIMEOUT || window.AdFuelOptions.A9.VIDEO_REFRESH_TIMEOUT) : (window.AdFuelOptions.A9.DESKTOP_VIDEO_REFRESH_TIMEOUT || window.AdFuelOptions.A9.VIDEO_REFRESH_TIMEOUT);

    function getTargetingData(timeout) {
        if (blocked) {
            logger.log("Blocked...");
            return new Promise().resolve({'amznbid': '', 'amzniid': ''});
        } else {
            timeout = timeout || defaultTimeout;
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            if (timeoutOverride) {
                timeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', timeout);
            }
            var timeoutFunction = function timeoutFunction(resolve, reject) {
                window.targetingTimeoutId = setTimeout(function() {
                    logger.log('getTargetingData timed out after ' + timeout + 'ms.');
                    clearTimeout(window.targetingTimeoutId);
                    reject('getTargetingData timed out after ' + timeout + 'ms.');
                }, timeout);
            };
            var wrappedFunction = function wrappedFunction(resolve) {
                logger.log('Getting Video targeting...');
                var innerFunction = function(bids) {
                    clearTimeout(window.targetingTimeoutId);
                    var targetBid = {};
                    logger.log('Pre-Roll Bids: ', bids);
                    bids.forEach(function(bid){
                        if (bid.slotID.indexOf('aps-preroll') >= 0) {
                            targetBid = bid;
                        }
                    })
                    var result = targetBid.targeting || { 'amznbid': '', 'amzniid': '' };
                    logger.log('Returning Targeting: ', result);
                    return result;
                }
                window.A9VideoAPI._targetingPromise.then(function(bids) { resolve(innerFunction(bids)) });
            };
            var wrappedCallback = new Promise(wrappedFunction);
            var timeoutCallback = new Promise(timeoutFunction);

            // Returns a race between the timeout and the passed in promise
            return Promise.race([timeoutCallback, wrappedCallback]);
        }
    }

    function getRefreshedTargetingData(slotName, timeout) {
        if (blocked) {
            return new Promise(function(resolve){resolve({'amznbid':'', 'amzniid': ''})});
        } else {
            timeout = timeout || defaultRefreshTimeout;
            slotName = slotName ? slotName + (window.AdFuelUtils.isMobile.phone ? '-mobile' :'') : (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' :'aps-midroll');
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
            if (timeoutOverride) {
                timeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', timeout);
            }
            if (slotNameOverride) {
                logger.log('Overriding Slot Name: ', slotName);
                slotName = slotNameOverride;
            }
            var timeoutFunction = function timeoutFunction(resolve, reject) {
                window.targetingTimeoutId = setTimeout(function() {
                    logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                    clearTimeout(window.targetingTimeoutId);
                    reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                }, timeout);
            };
            var wrappedFunction = function wrappedFunction(resolve) {
                window.A9VideoAPI._refreshedTargetingPromise = new Promise(function(resolve) {
                    window.apstag.fetchBids({
                        params: { si_section: 'video' },
                        slots: [{
                            slotID: slotName,
                            mediaType: 'video',
                        }],
                        timeout: timeout
                    }, resolve);
                });
                var innerFunction = function innerFunction(bids) {
                    clearTimeout(window.targetingTimeoutId);
                    var targetBid = {};
                    bids.forEach(function(bid) {
                        if (bid.slotID === slotName) {
                            targetBid = bid;
                        }
                    })
                    var result = targetBid.targeting || { 'amznbid': '', 'amzniid': '' };
                    logger.log('Returning Refreshed Targeting: ', result);
                    resolve(result);
                }
                logger.log('Refreshing Video targeting...');
                window.A9VideoAPI._refreshedTargetingPromise.then(innerFunction);
            };
            var wrappedCallback = new Promise(wrappedFunction);
            var timeoutCallback = new Promise(timeoutFunction);

            // Returns a race between the timeout and the passed in promise
            return Promise.race([timeoutCallback, wrappedCallback]);
        }
    }

    function getPreRollTargetingData(timeout) {
        if (blocked) {
            logger.log("Blocked...");
            return new Promise(function(resolve){resolve({'amznbid':'', 'amzniid': ''})});
        } else {
            timeout = timeout || defaultTimeout;
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
            var slotName = 'aps-preroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' :'');
            if (timeoutOverride) {
                timeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', timeout);
            }
            if (slotNameOverride) {
                logger.log('Overriding Slot Name: ', slotName);
                slotName = slotNameOverride;
            }
            var timeoutFunction = function timeoutFunction(resolve, reject) {
                window.targetingTimeoutId = setTimeout(function () {
                    logger.log('getTargetingData timed out after ' + timeout + 'ms.');
                    clearTimeout(window.targetingTimeoutId);
                    reject('getTargetingData timed out after ' + timeout + 'ms.');
                }, timeout);
            };
            var wrappedFunction = function wrappedFunction(resolve) {
                logger.log('Getting A9 Video targeting...');
                var innerFunction = function innerFunction(bids) {
                    clearTimeout(window.targetingTimeoutId);
                    var targetBid = {};
                    logger.log('Bids: ', bids);
                    bids.forEach(function forEachBid(bid) {
                        if (bid.slotID === (slotNameOverride ? slotNameOverride : (window.AdFuelUtils.isMobile.phone ? 'aps-preroll-mobile' :'aps-preroll'))) {
                            targetBid = bid;
                        }
                    })
                    var result = targetBid.targeting || { 'amznbid': '', 'amzniid': '' };
                    logger.log('Returning Targeting: ', result);
                    return result;
                }
                window.A9VideoAPI._preRollTargetingPromise.then(function(bids) { resolve(innerFunction(bids)) });
            };
            var wrappedCallback = new Promise(wrappedFunction);
            var timeoutCallback = new Promise(timeoutFunction);

            // Returns a race between the timeout and the passed in promise
            return Promise.race([timeoutCallback, wrappedCallback]);
        }
    }

    function getRefreshedPreRollTargetingData(slotName, timeout) {
        if (blocked) {
            logger.log("Blocked...");
            return new Promise(function(resolve){resolve({'amznbid':'', 'amzniid': ''})});
        } else {
            timeout = timeout || defaultRefreshTimeout;
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
            var slotName = 'aps-preroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' :'');
            if (timeoutOverride) {
                timeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', timeout);
            }
            if (slotNameOverride) {
                logger.log('Overriding Slot Name: ', slotNameOverride);
                slotName = slotNameOverride;
            }
            var timeoutFunction = function timeoutFunction(resolve, reject) {
                window.targetingTimeoutId = setTimeout(function () {
                    logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                    clearTimeout(window.targetingTimeoutId);
                    reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                }, timeout);
            };
            var wrappedFunction = function wrappedFunction(resolve) {
                window.A9VideoAPI._refreshedPreRollTargetingPromise = new Promise(function(resolve) {
                    window.apstag.fetchBids({
                        params: { si_section: 'video' },
                        slots: [{
                            slotID: slotName,
                            mediaType: 'video',
                        }],
                        timeout: defaultRefreshTimeout
                    }, resolve);
                });
                var innerFunction = function innerFunction(bids) {
                    clearTimeout(window.targetingTimeoutId);
                    var targetBid = {};
                    bids.forEach(function forEachBid(bid) {
                        if (bid.slotID === (slotNameOverride ? slotNameOverride : (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' :'aps-midroll'))) {
                            targetBid = bid;
                        }
                    })
                    var result = targetBid.targeting || { 'amznbid': '', 'amzniid': '' };
                    logger.log('Returning Targeting: ', result);
                    resolve(result);
                }
                logger.log('Refreshing Video targeting...');
                window.A9VideoAPI._refreshedPreRollTargetingPromise.then(innerFunction);
            };
            var wrappedCallback = new Promise(wrappedFunction);
            var timeoutCallback = new Promise(timeoutFunction);

            // Returns a race between the timeout and the passed in promise
            return Promise.race([timeoutCallback, wrappedCallback]);
        }
    }

    function getMidRollTargetingData(slotName, timeout) {
        if (blocked) {
            return new Promise(function(resolve){resolve({'amznbid':'', 'amzniid': ''})});
        } else {
            timeout = timeout || defaultRefreshTimeout;
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
            var slotName = 'aps-midroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' :'');
            if (timeoutOverride) {
                timeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', timeout);
            }
            if (slotNameOverride) {
                logger.log('Overriding Slot Name: ', slotNameOverride);
                slotName = slotNameOverride;
            }
            var timeoutFunction = function timeoutFunction(resolve, reject) {
                window.targetingTimeoutId = setTimeout(function () {
                    logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                    clearTimeout(window.targetingTimeoutId);
                    reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                }, timeout);
            };
            var wrappedFunction = function wrappedFunction(resolve) {
                window.A9VideoAPI._midRollTargetingPromise = new Promise(function(resolve) {
                    window.apstag.fetchBids({
                        params: { si_section: 'video' },
                        slots: [{
                            slotID: slotName,
                            mediaType: 'video',
                        }],
                        timeout: defaultRefreshTimeout
                    }, resolve);
                });
                var innerFunction = function innerFunction(bids) {
                    clearTimeout(window.targetingTimeoutId);
                    var targetBid = {};
                    bids.forEach(function forEachBid(bid) {
                        if (bid.slotID === (slotNameOverride ? slotNameOverride : (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' :'aps-midroll'))) {
                            targetBid = bid;
                        }
                    })
                    var result = targetBid.targeting || { 'amznbid': '', 'amzniid': '' };
                    logger.log('Returning Targeting: ', result);
                    resolve(result);
                }
                logger.log('Refreshing Video targeting...');
                window.A9VideoAPI._midRollTargetingPromise.then(innerFunction);
            };
            var wrappedCallback = new Promise(wrappedFunction);
            var timeoutCallback = new Promise(timeoutFunction);

            // Returns a race between the timeout and the passed in promise
            return Promise.race([timeoutCallback, wrappedCallback]);
        }
    }

    function getRefreshedMidRollTargetingData (slotName, timeout) {
        if (blocked) {
            return new Promise(function(resolve){resolve({'amznbid':'', 'amzniid': ''})});
        } else {
            timeout = timeout || defaultRefreshTimeout;
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
            var slotName = 'aps-midroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' :'');
            if (timeoutOverride) {
                timeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', timeout);
            }
            if (slotNameOverride) {
                logger.log('Overriding Slot Name: ', slotNameOverride);
                slotName = slotNameOverride;
            }
            var timeoutFunction = function timeoutFunction(resolve, reject) {
                window.targetingTimeoutId = setTimeout(function() {
                    logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                    clearTimeout(window.targetingTimeoutId);
                    reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
                }, timeout);
            };
            var wrappedFunction = function wrappedFunction(resolve) {
                window.A9VideoAPI._refreshedMidRollTargetingPromise = new Promise(function(resolve) {
                    window.apstag.fetchBids({
                        params: { si_section: 'video' },
                        slots: [{
                            slotID: slotName,
                            mediaType: 'video',
                        }],
                        timeout: defaultRefreshTimeout
                    }, resolve);
                });
                var innerFunction = function innerFunction(bids) {
                    clearTimeout(window.targetingTimeoutId);
                    var targetBid = {};
                    bids.forEach(function forEachBid(bid) {
                        if (bid.slotID === (slotNameOverride ? slotNameOverride : (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' :'aps-midroll'))) {
                            targetBid = bid;
                        }
                    })
                    var result = targetBid.targeting || { 'amznbid': '', 'amzniid': '' };
                    resolve(result);
                }
                logger.log('Refreshing Video targeting...');
                window.A9VideoAPI._refreshedMidRollTargetingPromise.then(innerFunction);
            };
            var wrappedCallback = new Promise(wrappedFunction);
            var timeoutCallback = new Promise(timeoutFunction);

            // Returns a race between the timeout and the passed in promise
            return Promise.race([timeoutCallback, wrappedCallback]);
        }
    }

    function handleA9Bids(bids, gptSlots, done) {
        logger.time('Handling Bids');
        window.googletag.cmd.push(function () {
            logger.log('Setting Display Bids:', bids);
            window.apstag.setDisplayBids();
        });
        logger.timeEnd('Handling Bids');
        done();
    }

    function preQueueCallback(asset, done) {
        if (asset && asset.length > 0) {
            logger.time('Slot Building');
            var si_section = '';
            for (var x = 0; x < asset.length; x++) {
                var slot = asset[x];
                if (slot.monetization.isMonetized) {
                    if (si_section === '') {
                        var adUnitArray = slot.rktr_ad_id.split('/');
                        if (adUnitArray.length > 1 && adUnitArray[1] !== 'homepage'){
                            si_section = adUnitArray[0] + (adUnitArray[1] ? '/'+ adUnitArray[1] : '');
                        }
                    }
                    var obj = {slotID: slot.rktr_slot_id, sizes: slot.monetization.filteredSizes};
                    logger.log('A9 Slot Object: ', obj);
                    bidSlots.push(obj);
                }
            }
            logger.timeEnd('Slot Building');
            function processBids(bids) {
                a9bids = bids;
                done();
            }
            if (bidSlots.length > 0) {
                var a9Slots = window.AdFuelUtils.clone(bidSlots);
                var fetchBidsConfig = {
                    slots: a9Slots,
                    timeout: window.AdFuelUtils.isMobile.any ? (window.AdFuelOptions.A9.MOBILE_DISPLAY_TIMEOUT || window.AdFuelOptions.A9.DISPLAY_TIMEOUT) : (window.AdFuelOptions.A9.DESKTOP_DISPLAY_TIMEOUT || window.AdFuelOptions.A9.DISPLAY_TIMEOUT)
                };
                if (si_section !== ''){
                    fetchBidsConfig.params = { si_section: si_section };
                }
                logger.log('Fetching Bids: ', fetchBidsConfig);
                window.apstag.fetchBids(fetchBidsConfig, processBids);
                refreshSlots = window.AdFuelUtils.clone(a9Slots);
                bidSlots.length = 0;
            }else{
                logger.log('No valid slots.');
            }
        }else{
            done();
        }
    }

    function preDispatchCallback(asset, done) {
        window.googletag.cmd.push(function () {
            var gptSlots = window.googletag.pubads().getSlots();
            if (a9bids) handleA9Bids(a9bids, gptSlots, done);
            if (!a9bids) {
                logger.log('No Bids.');
                done();
            }
        });
    }

    function preRefreshCallback(asset, done) {
        a9bids = null;
        logger.time('Refreshing Bids');
        var si_section = '';
        asset.forEach(function(slot){
            if (si_section === '') {
                var adUnitArray = slot.rktr_ad_id.split('/');
                si_section = adUnitArray[0] + (adUnitArray[1] ? '/'+ adUnitArray[1] : '');
            }
        })
        var assetIds = asset.map(function(assetPayload) {
            return assetPayload.rktr_slot_id;
        });
        logger.log('Refresh Slots: ', refreshSlots);
        var slotsToRefresh = refreshSlots.filter(function(slot) {
            return assetIds.indexOf(slot.slotID) >= 0;
        })
        var fetchBidsConfig = {
            slots: slotsToRefresh,
            timeout: window.AdFuelUtils.isMobile.any ? (window.AdFuelOptions.A9.MOBILE_DISPLAY_REFRESH_TIMEOUT || window.AdFuelOptions.A9.DISPLAY_REFRESH_TIMEOUT) : (window.AdFuelOptions.A9.DESKTOP_DISPLAY_REFRESH_TIMEOUT || window.AdFuelOptions.A9.DISPLAY_REFRESH_TIMEOUT)
        };
        if (si_section !== ''){
            fetchBidsConfig.params = { si_section: si_section };
        }
        if (refreshSlots.length > 0) {
            logger.log('Fetching Bids... ', fetchBidsConfig);
            window.apstag.fetchBids(fetchBidsConfig, function (bids) {
                a9bids = bids;
                logger.timeEnd('Refreshing Bids');
                var gptSlots = window.googletag.pubads().getSlots();
                handleA9Bids(a9bids, gptSlots, done)
            });
        } else {
            logger.log('No slots to refresh: ', asset, refreshSlots);
            logger.timeEnd('Refreshing Bids');
        }
    }

    function registerModuleWithAdFuel() {
        if (!blocked) {
            logger.log('Registering module with AdFuel');
            window.AdFuel.registerModule(MODULE_NAME, {
                preQueueCallback: preQueueCallback,
                preDispatchCallback: preDispatchCallback,
                preRefreshCallback: preRefreshCallback
            }, MODULE_VERSION, window.AdFuelOptions.A9);
        } else {
            logger.log('A9 Module Registration is Blocked!', blocked);
        }
    }

    function configureA9Library() {
        var checkConsent = typeof window.AdFuelOptions.GDPR.ENABLED !== 'undefined' ? window.AdFuelOptions.GDPR.ENABLED : false;
        if (checkConsent) {
            logger.log("Checking GDPR Consent...");
            window.AdFuelOptions.GDPR.APPLIES.then(function(gdprApplies){
                var consentGranted = window.AdFuelUtils.getConsent() || true;
                logger.log("GDPR Consent Granted: ", consentGranted);
                logger.log('Exposing AdFuelVideoAPI.A9 and A9VideoAPI');
                window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
                window.AdFuelVideoAPI.A9 = window.A9VideoAPI = {
                    getTargetingData: getTargetingData,
                    getRefreshedTargetingData: getRefreshedTargetingData,
                    getPreRollTargetingData: getPreRollTargetingData,
                    getMidRollTargetingData: getMidRollTargetingData,
                    getRefreshedPreRollTargetingData: getRefreshedPreRollTargetingData,
                    getRefreshedMidRollTargetingData: getRefreshedMidRollTargetingData,
                    __VERSION__: MODULE_VERSION
                };
                var pubId = window.AdFuelOptions.A9.DOM_PUB_ID;
                if (window.AdFuelUtils.isIntl){
                    pubId = window.AdFuelOptions.A9.INTL_PUB_ID;
                }
                logger.log('Final Pub ID: ', pubId);
                var bidTimeout = window.AdFuelUtils.isMobile.any ? (window.AdFuelOptions.A9.MOBILE_VIDEO_TIMEOUT || window.AdFuelOptions.A9.VIDEO_TIMEOUT) : (window.AdFuelOptions.A9.DESKTOP_VIDEO_TIMEOUT || window.AdFuelOptions.A9.VIDEO_TIMEOUT);
                var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
                if (timeoutOverride) {
                    bidTimeout = timeoutOverride;
                    logger.log('Overriding Max Duration Time: ', bidTimeout);
                }
                var slotName = (window.AdFuelUtils.isMobile.phone ? (window.AdFuelOptions.A9.PREROLL_SLOTNAME ? window.AdFuelOptions.A9.PREROLL_SLOTNAME : 'aps-preroll') + '-mobile' : (window.AdFuelOptions.A9.PREROLL_SLOTNAME ? window.AdFuelOptions.A9.PREROLL_SLOTNAME : 'aps-preroll'));
                var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
                if (slotNameOverride) {
                    slotName = slotNameOverride;
                    logger.log('Overriding Slot Name: ', slotName);
                }
                var a9Config = {
                    pubID: pubId,
                    adServer: 'googletag',
                    videoAdServer: 'freeWheel',
                    deals: true
                };
                if (consentGranted || !gdprApplies) {
                    if (gdprApplies){
                        logger.log('Enabling GDPR...');
                        var consent = window.AdFuelUtils.getConsentString();
                        a9Config.gdpr = {
                            enabled: true,
                            consent: consent
                        };
                    }
                    !function (a9, a, p, s, t, A, g) {
                        if(a[a9])return;function q(c, r) {a[a9]._Q.push([c, r])}a[a9] = {init:function () {q('i', arguments)}, fetchBids:function () {q('f', arguments)}, _Q:[]};A = p.createElement(s);A.async = !0;A.src = t;g = p.getElementsByTagName(s)[0];g.parentNode.insertBefore(A, g)
                    }('apstag', window, document, 'script', '//c.amazon-adsystem.com/aax2/apstag.js');
                    window.apstag.init(a9Config);
                    window.A9VideoAPI._preRollTargetingPromise = window.A9VideoAPI._targetingPromise = new Promise(function(resolve){
                        window.apstag.fetchBids({
                            params: { si_section: 'video' },
                            slots: [
                                {
                                    slotID: slotName,
                                    mediaType: 'video',
                                },
                            ],
                            timeout: bidTimeout
                        }, resolve);
                    });
                    if (window.AdFuel && window.AdFuel.cmd) {
                        //AdFuel loaded first
                        window.AdFuel.cmd.push(registerModuleWithAdFuel);
                    }else if (window.AdFuel) {
                        registerModuleWithAdFuel();
                    } else {
                        //wait for AdFuel to load
                        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                    }
                }else{
                    logger.log('A9 is blocked due to GDPR restrictions.')
                    blocked = true;
                }
            });
        }else{
            logger.log("Skipping GDPR Consent Check...");
            logger.log('Exposing AdFuelVideoAPI.A9 and A9VideoAPI');
            window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
            window.AdFuelVideoAPI.A9 = window.A9VideoAPI = {
                getTargetingData: getTargetingData,
                getRefreshedTargetingData: getRefreshedTargetingData,
                getPreRollTargetingData: getPreRollTargetingData,
                getMidRollTargetingData: getMidRollTargetingData,
                getRefreshedPreRollTargetingData: getRefreshedPreRollTargetingData,
                getRefreshedMidRollTargetingData: getRefreshedMidRollTargetingData,
                __VERSION__: MODULE_VERSION
            };
            var pubId = window.AdFuelOptions.A9.DOM_PUB_ID;
            if (window.AdFuelUtils.isIntl){
                pubId = window.AdFuelOptions.A9.INTL_PUB_ID;
            }
            logger.log('Final Pub ID: ', pubId);
            var bidTimeout = window.AdFuelUtils.isMobile.any ? (window.AdFuelOptions.A9.MOBILE_VIDEO_TIMEOUT || window.AdFuelOptions.A9.VIDEO_TIMEOUT) : (window.AdFuelOptions.A9.DESKTOP_VIDEO_TIMEOUT || window.AdFuelOptions.A9.VIDEO_TIMEOUT);
            var timeoutOverride = window.AdFuelUtils.getURLParam('mdt');
            if (timeoutOverride) {
                bidTimeout = timeoutOverride;
                logger.log('Overriding Max Duration Time: ', bidTimeout);
            }
            var slotName = (window.AdFuelUtils.isMobile.phone ? 'aps-preroll-mobile' : 'aps-preroll');
            var slotNameOverride = window.AdFuelUtils.getURLParam('slotname');
            if (slotNameOverride) {
                slotName = slotNameOverride;
                logger.log('Overriding Slot Name: ', slotName);
            }
            var a9Config = {
                pubID: pubId,
                adServer: 'googletag',
                videoAdServer: 'freeWheel',
                deals: true
            };
            !function (a9, a, p, s, t, A, g) {
                if(a[a9])return;function q(c, r) {a[a9]._Q.push([c, r])}a[a9] = {init:function () {q('i', arguments)}, fetchBids:function () {q('f', arguments)}, _Q:[]};A = p.createElement(s);A.async = !0;A.src = t;g = p.getElementsByTagName(s)[0];g.parentNode.insertBefore(A, g)
            }('apstag', window, document, 'script', '//c.amazon-adsystem.com/aax2/apstag.js');
            window.apstag.init(a9Config);
            window.A9VideoAPI._preRollTargetingPromise = window.A9VideoAPI._targetingPromise = new Promise(function(resolve){
                window.apstag.fetchBids({
                    params: { si_section: 'video' },
                    slots: [
                        {
                            slotID: slotName,
                            mediaType: 'video',
                        },
                    ],
                    timeout: bidTimeout
                }, resolve);
            });
            if (window.AdFuel && window.AdFuel.cmd) {
                //AdFuel loaded first
                window.AdFuel.cmd.push(registerModuleWithAdFuel);
            }else if (window.AdFuel) {
                registerModuleWithAdFuel();
            } else {
                //wait for AdFuel to load
                window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
            }
        }
    }

    function init() {
        logger.log('Initializing Module...');
        configureA9Library();
    }

    init();

})();


////////////////////////////////////////////
//AC Criteo 3.2
////////////////////////////////////////////

(function createCriteoModule() {

    var MODULE_NAME = 'Criteo Module';
    var MODULE_VERSION = 'v3.2.2';

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'criteo', 'color: #58f53f; padding: 2px');

    window.Criteo = window.Criteo || {};
    window.Criteo.events = window.Criteo.events || [];

    var scriptLoaded = false;
    var adapterLoaded = false;

    var MaxPlacements = 8;

    var MultisizeMethod = window.AdFuelOptions.CRITEO.MULTISIZE_METHOD;

    var zones_in_slot = {};
    var slot_max_area = {};

    var RequestedCriteoAdUnits = { placements: [] };
    var DesktopZones = window.AdFuelOptions.CRITEO.DESKTOP_ZONES;
    var MobileZones = window.AdFuelOptions.CRITEO.MOBILE_ZONES;

    function includeCriteoLibrary() {
        if (!scriptLoaded) {
            window.AdFuelOptions.GDPR ? window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
                if (applies && !window.AdFuelUtils.getConsent()) {
                    logger.log('Disabling Criteo due to GDPR restrictions.');
                }else{
                    logger.log('Including Criteo Library...');
                    scriptLoaded = true;

                    var a = document;
                    var b = a.createElement('script');
                    var c = a.getElementsByTagName('script')[0];
                    b.type = 'text/javascript';
                    b.async = true;
                    b.src = '//static.criteo.net/js/ld/publishertag.js';
                    c.parentNode.insertBefore(b, c);
                }
            }) : '';
        }
    }

    function includeYieldmoAdapter() {
        if (!adapterLoaded){
            logger.log('Including Yieldmo Adapter...');
            adapterLoaded = true;

            var a = document;
            var b = a.createElement('script');
            var c = a.getElementsByTagName('script')[0];
            b.type = 'text/javascript';
            b.async = true;
            b.src = '//static.yieldmo.com/ym-cdb-adapter.js'
            c.parentNode.insertBefore(b, c);
        }
    }

    function preQueueCallback(asset, callback) {
        logger.time('Building Criteo Placements');
        var CriteoAdUnits = { 'placements': [] },
            slotid,
            x;

        for (x = 0; x < asset.length; x++) {
            var slot = asset[x];
            if (slot.rktr_slot_id !== 'page' && (slot.monetization ? slot.monetization.isMonetized : false)) {
                var slot_sizes = slot.monetization.filteredSizes;
                var adUnit = slot.rktr_ad_id;
                slotid = slot.rktr_slot_id;
                zones_in_slot[slotid] = [];
                slot_max_area[slotid] = 0;
                var siteAdUnit = adUnit.split('/')[0];
                for (var y = 0; y < slot_sizes.length; y++) {
                    var sizeArray = slot_sizes[y];
                    var width = sizeArray[0] || null;
                    var height = sizeArray[1] || null;
                    var area = width !== null ? width * height : 0;
                    var size_name = width !== null ? width + 'x' + height : sizeArray.join('x');
                    var zoneid = DesktopZones[size_name] ? DesktopZones[size_name] : (DesktopZones['ROS_' + size_name] ? DesktopZones['ROS_' + size_name] : null);
                    if (siteAdUnit === 'CNN' && adUnit.indexOf('homepage') > 0) zoneid = DesktopZones['HP_' + size_name] || zoneid;
                    if (['300x250', '320x50'].indexOf(size_name) !== -1 && window.AdFuelUtils.isMobile.any) {
                        logger.log('Using Mobile zoneId for size: ', size_name);
                        zoneid = MobileZones[size_name] || null;
                    }
                    if (zoneid !== null) {
                        slot_max_area[slotid] = area > slot_max_area[slotid] ?
                            area : slot_max_area[slotid];
                            var data = {
                                'slotid' : slotid,
                                'zoneid' : zoneid,
                                'width' : width,
                                'height' : height,
                                'area' : area,
                            };
                        if (zones_in_slot[slotid].indexOf(data) === -1) {
                            logger.log('Pushing data...', data);
                            zones_in_slot[slotid].push(data);
                        } else {
                            logger.log('Skipping... Already exists...', data);
                        }
                    }
                }
            }
        }

        var count = 0;
        for (slotid in zones_in_slot) {
            if (zones_in_slot.hasOwnProperty(slotid)) {
                var zones = zones_in_slot[slotid];

                for (x = 0; x < zones.length; x++) {
                    var zone = zones[x];
                    if (count >= MaxPlacements) break;
                    if (MultisizeMethod === window.AdFuelOptions.CRITEO.MULTISIZE_LARGEST &&
                        zone.area !== slot_max_area[zone.slotid])
                        continue;
                    var placement = {'slotid' : slotid, 'zoneid' : zone.zoneid };
                    var exists = false;
                    CriteoAdUnits.placements.forEach(function forEachPlacementFunc(cPlacement) {
                        if (cPlacement.slotid === placement.slotid &&
                            cPlacement.zoneid === placement.zoneid)
                            exists = true;
                    })
                    RequestedCriteoAdUnits.placements.forEach(function forEachRequestedPlacementFunc(rPlacement) {
                        if (rPlacement.slotid === placement.slotid &&
                            rPlacement.zoneid === placement.zoneid)
                            exists = true;
                    })
                    if (!exists) {
                        if (adapterLoaded && placement.zoneid === 1302583) {
                            logger.log('Adding Yieldmo.criteoCallback as nativeCallback...');
                            placement['nativeCallback'] = function (json) {
                                window.Yieldmo.criteoCallback(json, slotid);
                            };
                        } else if (adapterLoaded) {
                            logger.log('Adding noop nativeCallback...');
                            placement['nativeCallback'] = function (){};
                        } else {
                            logger.log('Not adding nativeCallback...');
                        }
                        logger.log('Placement does not yet exist.  Adding to collection.', placement);
                        CriteoAdUnits.placements.push(placement);
                    }
                    count++;
                    if (MultisizeMethod === window.AdFuelOptions.CRITEO.MULTISIZE_FIRST) break;
                }
            }
        }
        function eventFunction(){
            logger.log('Setting LineItem Ranges...');
            window.Criteo.SetLineItemRanges('0..5:0.01;5..30:0.05;30..100:1.00');
            logger.log('Previously Requested: ', RequestedCriteoAdUnits)
            window.AdFuelUtils.metricApi.addMetric({type: 'vendor', id: 'Criteo', data:  zones_in_slot});
            CriteoAdUnits.placements.forEach(function(placement, index){
                var matched = false;
                RequestedCriteoAdUnits.placements.forEach(function(requested){
                    if (requested.slotid === placement.slotid){
                        matched = true;
                    }
                });
                if (matched){
                    CriteoAdUnits.placements.splice(index, 1);
                }
            });
            logger.log('Requesting Bids...', CriteoAdUnits);
            RequestedCriteoAdUnits.placements = RequestedCriteoAdUnits.placements.concat(
                CriteoAdUnits.placements
            );
            window.Criteo.RequestBids(CriteoAdUnits, function(bids){ callback(null, bids) },
                window.AdFuelUtils.isMobile.any ? ( window.AdFuelOptions.CRITEO.MOBILE_TIMEOUT || window.AdFuelOptions.CRITEO.TIMEOUT ) : ( window.AdFuelOptions.CRITEO.DESKTOP_TIMEOUT || window.AdFuelOptions.CRITEO.TIMEOUT )
            );
        }

        if (CriteoAdUnits.placements.length > 0) {
            window.Criteo.events.push(eventFunction);
        }
        else callback();
        logger.timeEnd('Building Criteo Placements');
    }

    function preDispatchCallback(asset, callback) {
        try {
            window.googletag.cmd.push(function() {
                logger.log('Setting DFP KeyValue Targeting...');
                if (window.Criteo && window.Criteo.SetDFPKeyValueTargeting) {
                    window.Criteo.SetDFPKeyValueTargeting();
                }
            });
        } catch(e) { logger.error(e) }
        callback();
    }

    function preRefreshCallback(asset, callback) {
        var internalCallback = preDispatchCallback.bind(null, asset, callback);
        var assetIds = asset.map(function(assetPayload) { return assetPayload.rktr_slot_id; });
        var bidsToRequest = { placements: [] };
        bidsToRequest.placements = RequestedCriteoAdUnits.placements.filter(function(placement) {
            return assetIds.indexOf(placement.slotid) >= 0;
        });
        function eventFunc() {
            if (bidsToRequest.placements.length > 0){
                logger.log('Setting LineItem Ranges...');
                window.Criteo.SetLineItemRanges('0..3:0.01;3..8:0.05;8..20:0.50;20..30:1.00');
                logger.log('Refreshing Bids...', bidsToRequest);
                window.AdFuelUtils.metricApi.addMetric({type: 'vendor', id: 'Criteo', data: zones_in_slot });
                window.Criteo.RequestBids(
                    bidsToRequest,
                    internalCallback,
                    window.AdFuelUtils.isMobile.any
                    ? (
                        window.AdFuelOptions.CRITEO.MOBILE_TIMEOUT
                        || window.AdFuelOptions.CRITEO.TIMEOUT
                    )
                    : (
                        window.AdFuelOptions.CRITEO.DESKTOP_TIMEOUT
                        || window.AdFuelOptions.CRITEO.TIMEOUT
                    )
                );
            }
        }
        window.Criteo.events.push(eventFunc);
    }

    function registerModuleWithAdFuel() {
        logger.log('Registering Module...');
        window.AdFuel.registerModule(MODULE_NAME, {
            //when dispatching or refreshing slots, set criteo targeting
            preQueueCallback: preQueueCallback,
            preDispatchCallback: preDispatchCallback,
            preRefreshCallback: preRefreshCallback
        }, MODULE_VERSION, window.AdFuelOptions.CRITEO);
    }

    function init() {
        logger.log('Initializing Module...');
        includeCriteoLibrary();
        if (window.AdFuelUtils.isMobile.any && window.AdFuelOptions.ADFUEL.SITE_OBJECT === 'CNN'){
            // if CNN and on a mobile device...
            // includeYieldmoAdapter();
        }
        if (window.AdFuel && window.AdFuel.cmd) {
            window.AdFuel.cmd.push(registerModuleWithAdFuel);
        } else if (window.AdFuel) {
            //AdFuel loaded first
            registerModuleWithAdFuel();
        } else {
            //wait for AdFuel to load
            window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
        }
    }

    init();
})();


////////////////////////////////////////////
//AD IndexExchange Wrapper 3.1
////////////////////////////////////////////

(function createIndexExchangeWrapperModule() {

    var MODULE_NAME = 'IndexExchange Wrapper Module';
    var MODULE_VERSION = 'v3.1.1';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getLogger: function() {},
    };

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {};
    window.AdFuelOptions.IX = window.AdFuelOptions.IX || { };

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'ix', 'color: #58f53f; padding: 2px');

    var scriptLoaded = false;

    function includeWrapper(scriptUrl) {
        logger.log('Script Loaded: ', scriptLoaded, scriptUrl);
        if (!scriptLoaded && scriptUrl !== '' && scriptUrl !== null && typeof scriptUrl !== 'undefined') {
            logger.log('Adding Script... ', scriptUrl);
            scriptLoaded = true;
            var a = document;
            var b = a.createElement('script');
            var c = a.getElementsByTagName('head')[0];
            var d = /^(complete|loaded)$/;
            var e = false;
            b.type = 'text/javascript';
            b.src = scriptUrl;
            b.onload = b.onreadystatechange = function () {
              if (!e && !(('readyState' in b) && d.test(b.readyState))) {
                b.onload = b.onreadystatechange = null;
                logger.timeEnd('Loading IndexExchangeWrapper...');
                e = true;
                logger.log('Script Loaded...');
              }
            };
            logger.time('Loading IndexExchangeWrapper...');
            c.appendChild(b);
        }
    }

    function setGeoTargeting(forceIntl) {
        function setGeoTarget() {
            if (window.AdFuelUtils.isIntl) {
                logger.log('Setting IX Geo Target: EU');
                window.AdFuel.addPageLevelTarget('iom_geo', 'EU')
            }else if(forceIntl) {
                logger.log('Setting IX Geo Target: EU');
                window.AdFuel.addPageLevelTarget('iom_geo', 'EU')
            }else{
                logger.log('Setting IX Geo Target: US');
                window.AdFuel.addPageLevelTarget('iom_geo', 'US')
            }
        }
        window.googletag.cmd.push(setGeoTarget)
    }

    function registerModuleWithAdFuel() {
        logger.log('Registering Module...');
        window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, window.AdFuelOptions.IX);
    }

    function init() {
        var scriptKey = window.AdFuelOptions.IX.SCRIPT_KEY || '';
        if (scriptKey === '') {
            var scriptMap = window.AdFuelOptions.IX.SCRIPT_MAP || {};
            Object.keys(scriptMap).forEach(function (regex) {
                var test = new RegExp(regex);
                if (window.location.hostname.search(test) === 0) {
                    if (typeof scriptMap[regex] === 'string') {
                        scriptKey = scriptMap[regex];
                    } else {
                        if (window.AdFuelUtils.isIntl) {
                            scriptKey = scriptMap[regex].intl;
                        } else {
                            scriptKey = scriptMap[regex].dom;
                        }
                    }
                }
            });
        }
        window.AdFuelOptions.GDPR ? window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
            if (applies && !window.AdFuelUtils.getConsent()) {
                logger.log('Disabling IndexExchange due to GDPR restrictions.');
            }else{
                logger.log('Script Key: ', scriptKey);
                var forceIntl = false;
                if (scriptKey !== '' && scriptKey !== null && typeof scriptKey !== 'undefined'){
                    var scriptUrl = '//js-sec.indexww.com/ht/p/'+scriptKey+'.js';
                    includeWrapper(scriptUrl);
                    setGeoTargeting(forceIntl);
                    if (window.AdFuel && window.AdFuel.cmd) {
                        window.AdFuel.cmd.push(registerModuleWithAdFuel);
                    }else if (window.AdFuel) {
                        registerModuleWithAdFuel();
                    } else {
                        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                    }
                } else {
                    logger.log('No Script Key.  Skipping initialization.')
                }
            }
        }) : '';
    }

    init();
})();

////////////////////////////////////////////
//Beemray 3.1
////////////////////////////////////////////


(function createBeemrayModule() {

    var MODULE_NAME = 'Beemray Module';
    var MODULE_VERSION = 'v3.1.0';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getURLParam: function() {},
        isIntl: false,
        getLogger: function() {},
        addMetric: function() {},
    };

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {};
    window.AdFuelOptions.BEEMRAY = window.AdFuelOptions.BEEMRAY || { CUSTOMER_ID: '', API_KEY: ''};

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'beemray', 'color: #d2b000; padding: 2px');

    var CUSTOMER_ID = window.AdFuelOptions.BEEMRAY.CUSTOMER_ID;
    var API_KEY = window.AdFuelOptions.BEEMRAY.API_KEY;

    var scriptLoaded = false;
    var eventFired = false;

    var includeBeemrayModule = function includeBeemrayModule() {
        if (!scriptLoaded) {
            logger.log('Including Library...');
            scriptLoaded = true;
            var source = 'https://' + CUSTOMER_ID + '.sdk.beemray.com/content/websdk/' + API_KEY + '?source=' + window.btoa(window.location.href);
            logger.log ('Script source: ', source);
            var script = document.createElement('script');
            script.src = source;
            document.head.appendChild(script);
        }
    }

    var preQueueCallback = function preQueueCallback(asset, callback) {
        if (scriptLoaded && window.beemray && window.beemray.EventApi) {
            var eventTitle = 'dfpEvent';
            var endPointUrl = '/rest/event/web/plain';
            var event = window.beemray.EventApi.create(eventTitle, endPointUrl);
            var timeout = 1000;
            var eventFunc = function eventFunc(response) {
                eventFired = true;
                logger.log('Response: ', response);
                if (null === response) {
                    callback();
                    return logger.log('Request Timeout or no Results.');
                }
                var targetIds = [];
                for (var i = 0; i < response.list.length; i++) {
                    logger.log('Adding Page-Level Target ID: ', response.list[i].id);
                    targetIds.push(response.list[i].id);
                }
                logger.log('Setting Page-Level Targets: ', targetIds);
                window.googletag.pubads().setTargeting('beemray', targetIds)
                callback();
            };
            logger.log('Sending WebAPI event...');
            if (!eventFired){
                event.send(eventFunc, timeout);
                eventFired = true;
            }
        }else{
            callback();
        }
    }

    var registerModuleWithAdFuel = function registerModuleWithAdFuel() {
        logger.log('Registering Module...');
        window.AdFuel.registerModule(MODULE_NAME, {
            preQueueCallback: preQueueCallback
        }, MODULE_VERSION, window.AdFuelOptions.BEEMRAY);
    }

    var init = function init() {
        logger.log('Initializing Module...');
        if (!window.AdFuelUtils.isIntl) {
            logger.log('Disabling Beemray due to user origin.  Not international.');
            return;
        }
        if (!CUSTOMER_ID || CUSTOMER_ID === '' || !API_KEY || API_KEY === '') {
            logger.log('Disabling Beemray due to no CUSTOMER_ID or API_KEY: ', { customer_id: CUSTOMER_ID, api_key: API_KEY });
            return;
        }
        if (window.AdFuelOptions.GDPR.ENABLED) {
            window.AdFuelOptions.GDPR.APPLIES.then(function(gdprApplies){
                var consentGranted = window.AdFuelUtils.getConsent();
                if (consentGranted || !gdprApplies) {
                    includeBeemrayModule();
                    if (window.AdFuel && window.AdFuel.cmd) {
                        window.AdFuel.cmd.push(registerModuleWithAdFuel);
                    }else if (window.AdFuel) {
                        //AdFuel loaded first
                        registerModuleWithAdFuel();
                    } else {
                        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                    }
                }
                return;
            });
        }else{
            includeBeemrayModule();
            if (window.AdFuel && window.AdFuel.cmd) {
                window.AdFuel.cmd.push(registerModuleWithAdFuel);
            }else if (window.AdFuel) {
                //AdFuel loaded first
                registerModuleWithAdFuel();
            } else {
                window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
            }
        }
    }

    init();
})();


////////////////////////////////////////////
//Creative Review 3.0
////////////////////////////////////////////

(function createCreativeReviewModule() {

    var MODULE_NAME = 'Creative Review Module';
    var MODULE_VERSION = 'v3.0.5';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getViewport: function() {},
        getBrowser: function() {},
        getURLParam: function() {},
        getLogger: function() {},
        metricApi: { addMetric: function() {} }
    };

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {};
    window.AdFuelOptions.CREATIVE_REVIEW = window.AdFuelOptions.CREATIVE_REVIEW || { HOTKEY: '^ d o h $' };

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'adreview', 'color: #00e1e1; padding: 2px');

    function checkHash() {
        if (location.hash.indexOf('doh') >= 0) {
            if (toolRendered) {
                _renderTool();
            }
            _renderTool();
        } else if (toolRendered) {
            _renderTool();
        }
    }

    var deviceInfo = null;
    var locationInfo = null;

    function setDevice() {
        if (deviceInfo !== null) {
            return deviceInfo
        }
        logger.time('Getting Device Information');
        var viewport = window.AdFuelUtils.getViewport();
        deviceInfo = {
            availHeight: screen.availHeight,
            availLeft: screen.availLeft,
            availTop: screen.availTop,
            availWidth: screen.availWidth,
            colorDepth: screen.colorDepth,
            height: screen.height,
            orientation: {
                angle: screen.orientation ? screen.orientation.angle : 0,
                onchange: screen.orientation ? screen.orientation.onchange : null,
                type: screen.orientation ? screen.orientation.type : null
            },
            pixelDepth: screen.pixelDepth,
            width: screen.width,
            os: window.navigator.platform ? window.navigator.platform : 'Unknown',
            browser: window.AdFuelUtils.getBrowser(),
            class: 'Desktop',
            viewport: viewport.join('x')
        };
        if (window.AdFuelUtils.isMobile.amazon.device) {
            deviceInfo.os = 'Amazon';
            if (window.AdFuelUtils.isMobile.amazon.phone) {
                deviceInfo.class = 'Phone';
            }
            if (window.AdFuelUtils.isMobile.amazon.tablet) {
                deviceInfo.class = 'Tablet';
            }
        }
        if (window.AdFuelUtils.isMobile.android.device) {
            deviceInfo.os = 'Android';
            if (window.AdFuelUtils.isMobile.android.phone) {
                deviceInfo.class = 'Phone';
            }
            if (window.AdFuelUtils.isMobile.android.tablet) {
                deviceInfo.class = 'Tablet';
            }
        }
        if (window.AdFuelUtils.isMobile.apple.device) {
            deviceInfo.os = 'iOS';
            if (window.AdFuelUtils.isMobile.apple.ipod) {
                deviceInfo.class = 'iPod';
            }
            if (window.AdFuelUtils.isMobile.apple.phone) {
                deviceInfo.class = 'Phone';
            }
            if (window.AdFuelUtils.isMobile.apple.tablet) {
                deviceInfo.class = 'Tablet';
            }
        }
        if (window.AdFuelUtils.isMobile.windows.device) {
            deviceInfo.os = 'Windows';
            if (window.AdFuelUtils.isMobile.windows.phone) {
                deviceInfo.class = 'Phone';
            }
            if (window.AdFuelUtils.isMobile.windows.tablet) {
                deviceInfo.class = 'Tablet';
            }
        }
        if (window.AdFuelUtils.isMobile.other.blackberry) {
            deviceInfo.os = 'Blackberry';
            deviceInfo.class = 'Phone';
        }
        if (window.AdFuelUtils.isMobile.other.blackberry10) {
            deviceInfo.os = 'Blackberry10';
            deviceInfo.class = 'Phone';
        }
        if (window.AdFuelUtils.isMobile.other.chrome) {
            deviceInfo.os = 'Chrome';
            deviceInfo.class = 'Phone';
        }
        if (window.AdFuelUtils.isMobile.other.firefox) {
            deviceInfo.os = 'Firefox';
            deviceInfo.class = 'Phone';
        }
        if (window.AdFuelUtils.isMobile.other.opera) {
            deviceInfo.os = 'Opera';
            deviceInfo.class = 'Phone';
        }

        window.AdFuelUtils.metricApi.addMetric({
            type: 'modules',
            id: 'User Sciences',
            data: deviceInfo
        });
        logger.timeEnd('Getting Device Information');
        return deviceInfo
    }

    // var hostname = document.location.hostname;
    var cdnRoot = /*hostname.indexOf('cnn.com') >= 0 ? 'www.i.cdn.cnn.com' : */ 'i.cdn.turner.com';
    var fileUploadOK = (window.File && window.FileReader && window.FileList && window.Blob);
    var toolRendered = false;
    var _appliedTargeting = [];
    var sites = [
        '',
        'Adult Swim',
        'Bleacher Report',
        'Cartoon Network',
        'CNN',
        'CNN Arabic',
        'CNN Espanol',
        'CNN International',
        'CNN Money',
        'ELEAGUE',
        'Great Big Story',
        'HLN',
        'NBA',
        'NBA International',
        'NCAA',
        'PGA',
        'Ryder Cup',
        'TBS',
        'TCM',
        'Team Coco',
        'TNT',
        'TruTV'
    ]

    var firstPanelElements = [
        {
            type: 'inputText',
            name: 'Name',
            value: '',
            label: 'Your Name',
            required: true
        },
        {
            type: 'inputEmail',
            name: 'Email',
            value: '',
            label: 'Your Email',
            required: true
        },
        {
            type: 'fileUpload',
            name: 'Screenshot',
            value: '',
            label: 'Upload Screenshot',
            required: false
        }
    ];

    var secondPanelElements = [
        {
            type: 'listLabel',
            name: 'Reason',
            label: 'Issue Being Reported',
            required: false
        },
        {
            type: 'list',
            name: 'Issue(s)',
            required: false,
            items: [{
                type: 'checkbox',
                name: 'Issue',
                value: 'block list violation',
                label: 'Ad violates block list',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'video plays in display ad',
                label: 'Video plays in ad',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'ad disrupts content',
                label: 'Ad disrupts content',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'ad incorrectly sized',
                label: 'Ad incorrectly sized',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'download initiated',
                label: 'Ad initiates download',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'blank ad',
                label: 'Blank ad',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'low quality',
                label: 'Low-quality ad',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'audio auto-starts',
                label: 'Audio auto-starts',
                required: false
            },
            {
                type: 'checkbox',
                name: 'Issue',
                value: 'broken ad',
                label: 'Broken ad',
                required: false
            }
            ]
        }
    ];

    var thirdPanelElements = [
        {
            type: 'select',
            name: 'Brand',
            label: 'Affected Brand',
            required: true,
            options: sites
        },
        {
            type: 'textarea',
            name: 'Comments',
            label: 'Issue Description',
            required: true
        }
    ];

    var head = document.getElementsByTagName('head')[0];
    var body = document.getElementsByTagName('body')[0];

    function checkbox(name, value, text) {
        var el = document.createElement('div');
        var cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.name = name;
        cb.id = name + '_' + value;
        cb.style['float'] = 'left';
        cb.style['margin-right'] = '2px';
        cb.style['position'] = 'relative';
        cb.style['top'] = '3px';
        cb.value = value;
        var lab = document.createElement('div');
        lab.style.width = 'calc(100% - 18px)';
        lab.appendChild(document.createTextNode(text));
        el.appendChild(cb);
        el.appendChild(lab);
        return el;
    }

    function element(name, text, className) {
        var el = document.createElement(name);
        el.innerHTML = text;
        el.className = className
        return el;
    }

    function button(item) {
        var el = document.createElement('button');
        el.onclick = item.action;
        el.id = item.name;
        el.appendChild(document.createTextNode(item.value));
        el.className = 'btn btn-sm btn-primary';
        return el;
    }

    function _renderTool() {
        var container,
            iconStylesheet,
            toolContainer,
            toolFiller,
            toolStylesheet;
        if (!toolRendered) {
            // Load stylesheets and add elements to page.
            body = document.getElementsByTagName('body')[0];
            var isSecure = 'https:' === document.location.protocol;

            iconStylesheet = document.createElement('link');
            iconStylesheet.type = 'text/css';
            iconStylesheet.rel = 'stylesheet';
            iconStylesheet.href = (isSecure ? 'https:' : 'http:') + '//fonts.googleapis.com/icon?family=Material+Icons';
            iconStylesheet.id = 'material-icons-font';

            toolStylesheet = document.createElement('link');
            toolStylesheet.rel = 'stylesheet';
            toolStylesheet.href = (isSecure ? 'https:' : 'http:') + '//'+cdnRoot+'/ads/adfuel/css/creativeReview-3.0.css';
            // toolStylesheet.href = '/css/creativeReview-3.0.css';
            toolStylesheet.id = 'adfuel-creative-review-stylesheet';

            container = document.createElement('div');
            container.className = 'adfuel-creative-review-button-container adfuel-open-creative-review-button-container';

            var actionButton = document.createElement('a');
            actionButton.className = 'adfuel-creative-review-button';

            var buttonIcon = document.createElement('i');
            buttonIcon.className = 'adfuel-creative-review-button-icon material-icons';
            buttonIcon.innerHTML = 'view_module';
            buttonIcon.innerText = 'view_module';

            toolFiller = document.createElement('div');
            toolFiller.className = 'adfuel-creative-review-filler';

            toolContainer = document.createElement('div');
            toolContainer.className = 'adfuel-creative-review';

            actionButton.appendChild(buttonIcon);
            container.appendChild(actionButton);
            head.appendChild(iconStylesheet);
            head.appendChild(toolStylesheet);
            body.appendChild(container);
            body.appendChild(toolFiller);
            body.appendChild(toolContainer);
            if (locationInfo === null) {
                (function (callback) {
                    'use strict';
                    var a = document,
                        b = a.createElement('script'),
                        c = a.getElementsByTagName('script')[0],
                        d = /^(complete|loaded)$/,
                        e = false,
                        f = 'https:' === document.location.protocol;
                    b.type = 'text/javascript';
                    b.async = true;
                    b.src = (f ? 'https:' : 'http:') + '//www.geoplugin.net/javascript.gp';
                    b.onload = b.onreadystatechange = function () {
                        if (!e && !(('readyState' in b) && d.test(b.readyState))) {
                            b.onload = b.onreadystatechange = null;
                            e = true;
                            callback();
                        }
                    };
                    c.parentNode.insertBefore(b, c);
                })(function () {
                    var geoCountry, geoCity, geoRegion, geoLat, geoLong;
                    var valueSet = false;
                    if (window.geoplugin_countryCode) {
                        geoCountry = window.geoplugin_countryCode();
                        valueSet = true;
                    }
                    if (window.geoplugin_city) {
                        geoCity = window.geoplugin_city();
                        valueSet = true;
                    }
                    if (window.geoplugin_region) {
                        geoRegion = window.geoplugin_region();
                        valueSet = true;
                    }
                    if (window.geoplugin_latitude) {
                        geoLat = window.geoplugin_latitude();
                        valueSet = true;
                    }
                    if (window.geoplugin_longitude) {
                        geoLong = window.geoplugin_longitude();
                        valueSet = true;
                    }
                    if (valueSet === true) {
                        locationInfo = {
                            city: geoCity,
                            region: geoRegion,
                            country: geoCountry,
                            latitude: geoLat,
                            longitude: geoLong
                        }
                        window.AdFuelUtils.metricApi.addMetric({
                            type: 'configuration',
                            id: 'actual_user_location',
                            data: {
                                city: geoCity,
                                region: geoRegion,
                                country: geoCountry,
                                latitude: geoLat,
                                longitude: geoLong
                            }
                        });
                    }
                });
            }
            _buildToolContainer(toolContainer);
            window.AdFuelUtils.addEvent(actionButton, 'click', _openTool);
            toolRendered = true;
        } else {
            // Remove stylesheets and elements from page.

            iconStylesheet = document.getElementById('material-icons-font');
            toolStylesheet = document.getElementById('adfuel-creative-review-stylesheet');

            container = document.querySelector('div.adfuel-creative-review-button-container');
            toolFiller = document.querySelector('div.adfuel-creative-review-filler');
            toolContainer = document.querySelector('div.adfuel-creative-review');

            head.removeChild(iconStylesheet);
            head.removeChild(toolStylesheet);

            body.removeChild(container);
            body.removeChild(toolFiller);
            body.removeChild(toolContainer);
            toolRendered = false;
        }
    }

    function _buildToolContainer(container) {

        var closeContainer = document.createElement('div');
        closeContainer.className = 'adfuel-creative-review-button-container';
        closeContainer.id = 'adfuel-close-creative-review-button-container';

        var actionButton = document.createElement('a');
        actionButton.className = 'adfuel-creative-review-button-plain';
        actionButton.id = 'adfuel-close-creative-review-button';

        var buttonIcon = document.createElement('i');
        buttonIcon.className = 'adfuel-creative-review-button-icon material-icons';
        buttonIcon.innerHTML = buttonIcon.innerText = 'close';

        var consoleBanner = document.createElement('div');
        consoleBanner.id = 'adfuel-creative-review-banner';

        var consoleTabContainer = document.createElement('div');
        consoleTabContainer.className = 'adfuel-creative-review-tab-link-container';

        actionButton.appendChild(buttonIcon);
        closeContainer.appendChild(actionButton);

        window.AdFuelUtils.addEvent(actionButton, 'click', _closeTool);

        consoleBanner.appendChild(closeContainer);

        var title = document.createElement('div');
        title.className = 'adfuel-creative-review-banner-title';
        var titleText = 'AdFuel Creative Review';
        var titleContainer = document.createElement('div');
        titleContainer.appendChild(document.createTextNode(titleText));
        var subtitle = document.createElement('div');
        subtitle.className = 'adfuel-creative-review-banner-subtitle';
        subtitle.innerHTML = 'Report an issue on this page by submitting the form below.&nbsp;&nbsp;&nbsp;A copy will be sent to the email address provided.';
        titleContainer.appendChild(subtitle);
        title.appendChild(titleContainer);

        consoleBanner.appendChild(title);
        consoleBanner.appendChild(consoleTabContainer);

        container.appendChild(consoleBanner);

        return;
    }

    function _openTool() {

        var toolFiller = document.querySelector('div.adfuel-creative-review-filler');
        var toolContainer = document.querySelector('div.adfuel-creative-review');

        var openContainer = document.querySelector('div.adfuel-creative-review-button-container');
        var closeContainer = document.querySelector('div#adfuel-close-creative-review-button-container');

        openContainer.style.display = 'none';
        closeContainer.style.display = 'inline-block';
        toolFiller.style.display = 'block';
        toolContainer.style.display = 'inline-block';
        _buildToolContent(toolContainer);
        _showToolContent();
        return;
    }

    function _closeTool() {
        logger.log('Closing Tool...');
        var openContainer = document.querySelector('div.adfuel-creative-review-button-container');
        var openButton = document.querySelector('body > div.adfuel-creative-review-button-container > a');

        var toolFiller = document.querySelector('div.adfuel-creative-review-filler');
        var toolContainer = document.querySelector('div.adfuel-creative-review');

        logger.log('Closing Tool...', toolFiller, toolContainer);

        toolFiller.style.display = 'none';
        toolContainer.style.display = 'none';

        if (openContainer && openButton) {
            openContainer.style.display = 'inline-block';
            openButton.style.display = 'inline-block';
            window.AdFuelUtils.addEvent(openButton, 'click', _openTool);
            window.AdFuel.openTool = _openTool;
        }
        return;
    }

    function _showToolContent() {
        var panel = document.createElement('div');
        var container = document.getElementsByClassName('adfuel-creative-review')[0];
        panel.id = 'adfuel-creative-review-content';
        panel.className = 'adfuel-creative-review-content';
        panel.style.width = '100%';
        panel.style.padding = '0';
        panel.style.margin = '0';
        panel.style.height = '80%';
        panel.style.minHeight = '250px';
        panel.style.overflowY = 'auto';
        panel.style.display = 'block';
        container.appendChild(panel);
    }

    function _buildToolContent(container) {
        if (!container) {
            container = document.getElementsByClassName('adfuel-creative-review')[0];
        }
        if (!container) {
            logger.log('Error: No AdFuel-Creative-Review container.');
            return false;
        }
        var panelContainer = document.createElement('div');
        panelContainer.id = 'adfuel-creative-review-content';
        panelContainer.className = 'adfuel-creative-review-content';

        _buildCreativeReviewForm(panelContainer);

        container.appendChild(panelContainer);
        var adXVendorData = { queryIds: {} }
        document.querySelectorAll('div[data-google-query-id]').forEach(function (node) {
            adXVendorData.queryIds[node.id] = node.dataset.googleQueryId;
        });
        window.AdFuelUtils.metricApi.addMetric({
            id: 'AdX',
            type: 'vendor',
            data: adXVendorData
        });
    }

    function setSubmitMessage(header, message) {
        // set the message
        var el = document.createElement('p');
        if (message !== '') {
            el.style.color = 'white';
            el.style.fontSize = '.95em';
            el.style.textAlign = 'center';
            el.innerHTML = message;
        }
        header.innerHTML = '';
        header.appendChild(el);
        header.style.display = 'block';
        //clear the message after 5 sec.
        window.setTimeout(function () {
            header.innerHTML = '';
            header.style.display = 'none';
        }, 5000);
    }

    function setSuccessMessage(header, message) {
        // set the message
        var el = document.createElement('p');
        header.style.backgroundColor = 'green';
        if (message !== '') {
            el.style.color = 'white';
            el.style.fontSize = '.95em';
            el.style.textAlign = 'center';
            el.style.fontWeight = 'normal';
            el.style.fontFamily = 'Helvetica';
            el.innerHTML = message;
        }
        header.innerHTML = '';
        header.appendChild(el);
        header.style.display = 'block';
        //clear the message after 5 sec.
        window.setTimeout(function () {
            header.innerHTML = '';
            header.style.display = 'none';
        }, 5000);
    }

    function validateEmail(email) {
        var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }

    function buildPanel(panel, container, elements) {
        for (var i = 0; i < elements.length; i++) {
            var item = elements[i];
            switch (item.type) {
            case 'textarea':
                var textareaContainer = element('div', '', 'adfuel-creative-review-textarea-container');
                var textareaLabel = element('div', ((item.required === true) ? '<span style=\'color: red;\'>*</span> ' : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-textarea-label');
                textareaContainer.appendChild(textareaLabel);
                textareaContainer.appendChild((item.element = document.createElement('textarea')));
                item.element.name = item.name || '';
                if (item.required === true) { item.element.attributes.required = 'required'; }
                panel.appendChild(textareaContainer);
                break;
            case 'inputText':
                var inputContainer = element('div', '', 'adfuel-creative-review-input-element-container');
                var inputLabel = element('div', ((item.required === true) ? '<span style=\'color: red;\'>*</span> ' : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-input-label');
                inputContainer.appendChild(inputLabel);
                item.element = document.createElement('input');
                item.element.name = item.name || '';
                item.element.type = 'text';
                if (item.required === true) { item.element.setAttribute('required', 'required'); }
                inputContainer.appendChild(item.element);
                panel.appendChild(inputContainer);
                break;
            case 'inputEmail':
                inputContainer = element('div', '', 'adfuel-creative-review-input-element-container');
                inputLabel = element('div', ((item.required === true) ? '<span style=\'color: red;\'>*</span> ' : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-input-label');
                inputContainer.appendChild(inputLabel);
                item.element = document.createElement('input');
                item.element.type = 'email';
                item.element.name = item.name || '';
                if (item.required === true) { item.element.setAttribute('required', 'required'); }
                inputContainer.appendChild(item.element);
                panel.appendChild(inputContainer);
                break;
            case 'listLabel':
                var listContainer = element('div', '', 'adfuel-creative-review-list-element-container');
                var listLabel = element('div', ((item.required === true) ? '<span style=\'color: red;\'>*</span> ' : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-list-label');
                listContainer.appendChild(listLabel);
                panel.append(listContainer);
                break;
            case 'list':
                listContainer = panel.querySelector('#cr_panel_2 > div.adfuel-creative-review-list-element-container');
                var listEl = element('div', '', 'adfuel-creative-review-checkbox-list');
                for (var x = 0; x < item.items.length; x++) {
                    var listItem = item.items[x];
                    var checkboxWrapper = checkbox(listItem.name, listItem.value, listItem.label);
                    var checkboxEl = checkboxWrapper.firstChild;
                    item.items[x].element = checkboxEl;
                    listEl.appendChild(checkboxWrapper);
                }
                listContainer.appendChild(listEl);
                break;
            case 'select':
                var selectContainer = element('div', '', 'adfuel-creative-review-select-container');
                var panelLabel = element('div', ((item.required === true) ? '<span style=\'color: red;\'>*</span> ' : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-select-label');
                selectContainer.appendChild(panelLabel);
                item.element = document.createElement('select');
                item.element.name = item.name;
                for (var optionIndex = 0; optionIndex < item.options.length; optionIndex++) {
                    var option = element('option', item.options[optionIndex]);
                    option.value = item.options[optionIndex];
                    item.element.appendChild(option);
                }
                selectContainer.appendChild(item.element);
                panel.appendChild(selectContainer);
                break;
            case 'button':
                panel.appendChild(button(item));
                break;
            case 'fileUpload':
                if (fileUploadOK) {
                    inputContainer = element('div', '', 'adfuel-creative-review-input-element-container');
                    inputLabel = element('div', item.label + ': ' + ((item.required === true) ? ' *' : ''), 'adfuel-creative-review-form-label adfuel-creative-review-file-label');
                    inputContainer.appendChild(inputLabel);
                    item.element = document.createElement('input');
                    item.element.name = item.name || '';
                    item.element.type = 'file';
                    item.element.accept = 'image/*';
                    inputContainer.appendChild(item.element);
                    panel.appendChild(inputContainer)
                }
                break;
            }
        }
        logger.log('Appending Panel to Container: ', panel, container);
        container.appendChild(panel);
    }

    function _buildCreativeReviewForm(panel) {
        if (!panel) return;

        panel.innerHTML = '';
        panel.style.padding = '0';

        var header = document.createElement('div');
        header.className = 'adfuel-creative-review-panel';
        header.id = 'cr_panel_header';
        var validationText = document.createElement('p');
        validationText.className = 'adfuel-creative-review-panel-header-text'
        header.appendChild(validationText);
        panel.appendChild(header);

        var formElement = document.createElement('form');

        panel.appendChild(formElement);

        var panel1 = document.createElement('div');
        panel1.className = 'adfuel-creative-review-panel';
        panel1.id = 'cr_panel_1';
        buildPanel(panel1, formElement, firstPanelElements);

        var panel2 = document.createElement('div');
        panel2.className = 'adfuel-creative-review-panel';
        panel2.id = 'cr_panel_2';
        buildPanel(panel2, formElement, secondPanelElements);

        var panel3 = document.createElement('div');
        panel3.className = 'adfuel-creative-review-panel';
        panel3.id = 'cr_panel_3';
        buildPanel(panel3, formElement, thirdPanelElements);

        var footer = document.createElement('div');
        footer.className = 'adfuel-creative-review-panel'
        footer.id = 'cr_panel_footer';

        var submitContainer = document.createElement('div');

        // submit confirmation alert box
        var confirmAlert = document.createElement('div');
        confirmAlert.className = 'cr-confirm-alert';
        confirmAlert.style.visibility = 'hidden';
        var confirmAlertText = document.createElement('div');
        confirmAlertText.className = 'cr-confirm-alert-text';

        var today = new Date();
        var dayOfWeek = today.getDay();
        var hour = today.getHours();
        var offHours = dayOfWeek === 0 || dayOfWeek === 6 || hour < 8 || hour > 17;
        var responseTime = offHours ? '2 hours outside of' : '1 hour during';

        confirmAlertText.innerHTML = 'Your report has been successfully submitted to Ad Operations. If you do not get a response within ' + responseTime + ' normal business hours (8am - 6pm Eastern), further contact information can be found in the confirmation email that has been sent to you.';
        confirmAlert.appendChild(confirmAlertText);
        confirmAlert.appendChild(document.createElement('br'));
        var confirmAlertBtn = document.createElement('button');
        confirmAlertBtn.className = 'btn btn-primary btn-sm';
        confirmAlertBtn.innerHTML = 'OK';
        confirmAlertBtn.onclick = function (e) {
            e.preventDefault();
            _closeTool();
            confirmAlert.style.visibility = 'hidden';
            // clear all inputs
            formElement.reset();
        };
        confirmAlert.appendChild(confirmAlertBtn);
        panel.appendChild(confirmAlert);

        var submitButton = document.createElement('button');
        submitButton.type = 'submit';
        submitButton.className = 'btn btn-primary btn-sm cr-confirm-alert-btn';
        submitButton.onclick = function (e) {
            e.preventDefault();

            // validate inputs
            if (formElement.elements['Name'].value === '' ||
                formElement.elements['Comments'].value === '' ||
                formElement.elements['Email'].value === '' ||
                formElement.elements['Brand'].value === '') {
                setSubmitMessage(header, 'Please fill out all required fields.');
                return;
            } else if (!validateEmail(formElement.elements['Email'].value)) {
                setSubmitMessage(header, 'Email address is not valid.');
                return;
            } else {
                submitCreativeReviewForm(formElement, function () {
                    setSuccessMessage(header, 'Your report has been successfully submitted to Ad Operations.<hr />If you do not get a response within 2 hours outside of normal business hours (8am - 6pm Eastern), further contact information can be found in the confirmation email that has been sent to you.')
                });
            }
        };
        submitButton.innerHTML = 'SUBMIT';

        submitContainer.appendChild(submitButton);

        footer.appendChild(submitContainer);

        panel.appendChild(footer);

        panel.appendChild(confirmAlert);
    }

    function setRenderCompleteListener() {
        window.googletag.cmd.push(function () {
            window.googletag.pubads().addEventListener('slotRenderEnded', function (event) {
                try {
                    var detail = {};
                    if (event.slot) {
                        detail.asset = event.slot;
                        if (event.slot.getTargeting('pos')) {
                            detail.pos = event.slot.getTargeting('pos');
                        }
                    }
                    if (event.isEmpty) {
                        detail.empty = true;
                    } else {
                        detail.empty = false;
                    }
                    if (event.size) {
                        detail.renderedSize = event.size;
                    }
                    if (event.creativeId) {
                        detail.creativeId = event.creativeId;
                    }
                    if (event.lineItemId) {
                        detail.lineItemId = event.lineItemId;
                    }
                    if (event.serviceName) {
                        detail.serviceName = event.serviceName;
                    }
                    if (event.slot && event.slot.getSlotElementId()) {
                        detail.divId = event.slot.getSlotElementId();
                    }
                    var info = window.AdFuel.pageSlots[detail.divId] ? window.AdFuel.pageSlots[detail.divId].getResponseInformation() : { campaignId: null, advertiserId: null};
                    detail.campaignId = info ? info.campaignId : null;
                    detail.advertiserId = info ? info.advertiserId : null;
                    window.AdFuelUtils.metricApi.addMetric({
                        type: 'slots',
                        id: detail.divId,
                        data: {
                            advertiserId: detail.advertiserId,
                            campaignId: detail.campaignId,
                            creativeId: detail.creativeId,
                            lineItemId: detail.lineItemId
                        }
                    });
                } catch (ex) {
                    console.warn('Warning: Error reading slotRenderEnded event', {
                        message: ex
                    });
                }
            });
        });
    }

    function _addTargetingForCreativeExtraction(slots, callback) {
        for (var slotIndex = 1; slotIndex < slots.length; slotIndex++) {
            var slot = slots[slotIndex];
            if (_appliedTargeting.indexOf(slot.rktr_slot_id) < 0) {
                window.AdFuel.addSlotLevelTarget(slot.rktr_slot_id, 'elemId', slot.rktr_slot_id);
                _appliedTargeting.push(slot.rktr_slot_id);
            }
        }
        window.AdFuelUtils.addEvent(document, 'SlotIdChange', function (e) {
            if (e.detail.newId !== e.detail.originalId) {
                if (_appliedTargeting.indexOf(e.detail.newId) < 0) {
                    window.AdFuel.addSlotLevelTarget(e.detail.newId, 'elemId', e.detail.newId);
                    _appliedTargeting.push(e.detail.newId);
                }
            }
        });
        callback();
    }

    function serialize(form) {
        if (!form || form.nodeName !== 'FORM') {
            return;
        }
        var i, j, q = [],
            t = {};
        for (i = form.elements.length - 1; i >= 0; i = i - 1) {
            if (form.elements[i].name === '') {
                continue;
            }
            switch (form.elements[i].nodeName) {
            case 'INPUT':
                switch (form.elements[i].type) {
                case 'email':
                case 'text':
                case 'hidden':
                case 'password':
                case 'button':
                case 'reset':
                case 'submit':
                    q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                    t[form.elements[i].name] = form.elements[i].value;
                    break;
                case 'file':
                    if (form.elements[i].files.length > 0) {
                        q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                        t[form.elements[i].name] = form.elements[i].files[0]; // FileList object
                        t[form.elements[i].name + 'FileName'] = t[form.elements[i].name].name;
                    }
                    break;
                case 'checkbox':
                    if (form.elements[i].checked) {
                        q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                        // to support multiple checkboxes in a group, store the values as an array
                        if (t[form.elements[i].name]) {
                            t[form.elements[i].name].push(form.elements[i].value);
                        } else {
                            t[form.elements[i].name] = [form.elements[i].value];
                        }
                    }
                    break;
                case 'radio':
                    if (form.elements[i].checked) {
                        q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                        t[form.elements[i].name] = form.elements[i].value;
                    }
                    break;
                }
                break;
            case 'TEXTAREA':
                q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                t[form.elements[i].name] = form.elements[i].value;
                break;
            case 'SELECT':
                switch (form.elements[i].type) {
                case 'select-one':
                    q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                    t[form.elements[i].name] = form.elements[i].value;
                    break;
                case 'select-multiple':
                    for (j = form.elements[i].options.length - 1; j >= 0; j = j - 1) {
                        if (form.elements[i].options[j].selected) {
                            q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].options[j].value));
                            t[form.elements[i].name] = form.elements[i].options[j].value;
                        }
                    }
                    break;
                }
                break;
            case 'BUTTON':
                switch (form.elements[i].type) {
                case 'reset':
                case 'submit':
                case 'button':
                    q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                    t[form.elements[i].name] = form.elements[i].value;
                    break;
                }
                break;
            }
        }
        return t;
    }

    function submitCreativeReviewForm(form, callback) {
        var data = serialize(form);
        var processData = function () {
            // callback(true);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    callback((xhr.status === 200));
                }
            };

            var formBlob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            var registryBlob = new Blob([JSON.stringify(window.AdFuel.registry, null, 2)], { type: 'application/json' });
            var browserData = {
                availHeight: screen.availHeight,
                availLeft: screen.availLeft,
                availTop: screen.availTop,
                availWidth: screen.availWidth,
                colorDepth: screen.colorDepth,
                height: screen.height,
                orientation: {
                    angle: screen.orientation.angle,
                    onchange: screen.orientation.onchange,
                    type: screen.orientation.type
                },
                pixelDepth: screen.pixelDepth,
                width: screen.width
            };
            var slotData = JSON.parse(JSON.stringify(window.AdFuelUtils.metricApi.metrics.slots));
            for (var x in slotData) {
                if (slotData.hasOwnProperty(x)) {
                    delete slotData[x].build_end;
                    delete slotData[x].build_start;
                    delete slotData[x].display;
                    delete slotData[x].queued;
                    delete slotData[x].render_start;
                    delete slotData[x].render_end;
                }
            }
            var slotsBlob = new Blob([JSON.stringify(slotData, null, 2)], { type: 'application/json' });
            var cookiesBlob = new Blob([JSON.stringify(document.cookie, null, 2)], { type: 'application/json' });
            var browserBlob = new Blob([JSON.stringify(browserData, null, 2)], { type: 'application/json' });
            var requestBlob = new Blob([JSON.stringify(window.AdFuel.requestScriptText, null, 2)], { type: 'application/json' });
            var timelineBlob = new Blob([JSON.stringify(window.AdFuelUtils.metricApi.metrics.timeline, null, 2)], { type: 'application/json' });
            var urlBlob = new Blob([JSON.stringify(window.location.href, null, 2)], { type: 'application/json' });
            var vendorBlob = new Blob([JSON.stringify(window.AdFuelUtils.metricApi.metrics.vendor || {}, null, 2)], {type: 'application/json' });

            var fdata = new FormData();
            fdata.append('formData', formBlob);
            fdata.append('registry', registryBlob);
            fdata.append('slots', slotsBlob);
            fdata.append('cookies', cookiesBlob);
            fdata.append('request', requestBlob);
            fdata.append('browser', browserBlob);
            fdata.append('vendor', vendorBlob);
            fdata.append('timeline', timelineBlob);
            fdata.append('url', urlBlob);

            var url = 'https://adfuel.turnerapps.com/api/v2/email';
            xhr.open('POST', url, true);
            xhr.send(fdata);
        };

        if (data.Screenshot) {
            // Only process image files.
            if (!data.Screenshot.type.match('image.*')) {
                processData();
            }

            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = (function (data) {
                return function (e) {
                    data.Screenshot = e.target.result;
                    processData();
                };
            })(data);

            // Read in the image file as a data URL.
            reader.readAsDataURL(data.Screenshot);
        } else {
            processData();
        }
    }

    function parseMessage(msg) {
        var data = {};
        if (msg.data && typeof msg.data.indexOf === 'function' && msg.data.indexOf('{') === 0 && msg.data.indexOf('googMsgType') < 0) {
            try {
                data = JSON.parse(msg.data);
            } catch (err) {
                return;
            }
        }
        if (data.divId) {
            if (Array.isArray(data.divId) && data.divId.length > 1) {
                data.divId = data.divId[0];
            }
            window.AdFuelUtils.metricApi.addMetric({ type: 'creatives', id: data.divId, data: data });
        }
    }

    function addKeypressModule() {
        var renderCreativeReviewConsole = function () {
            logger.log('Rendering Creative Review Console...');
            _renderTool();
        };
        var initializeKeypressListeners = function () {
            logger.log('Initializing Keypress Listener...');
            // d-o-h to open just Creative Review
            var defaults = {
                prevent_default: false,
                prevent_repeat: false,
                is_sequence: true,
                is_exclusive: true,
                is_solitary: true
            };
            var options = {
                keys: window.AdFuelOptions.CREATIVE_REVIEW.HOTKEY || '^ d o h $',
                on_keydown: renderCreativeReviewConsole
            };
            var feedbackListener = new window.keypress.Listener(window, defaults);
            feedbackListener.register_combo(options);
        };

        if (!window.keypress) {
            var a = document,
                b = a.createElement('script'),
                c = a.getElementsByTagName('script')[0],
                d = /^(complete|loaded)$/,
                e = false,
                f = 'https:' === document.location.protocol;
            b.type = 'text/javascript';
            b.async = true;
            b.src = (f ? 'https:' : 'http:') + '//'+cdnRoot+'/ads/adfuel/modules/keypress.js';
            b.onload = b.onreadystatechange = function () {
                if (!e && !(('readyState' in b) && d.test(b.readyState))) {
                    b.onload = b.onreadystatechange = null;
                    e = true;
                    initializeKeypressListeners();
                }
            };
            c.parentNode.insertBefore(b, c);
        } else {
            initializeKeypressListeners();
        }
    }

    function registerModuleWithAdFuel() {
        logger.log('Registering Module with AdFuel...');
        window.AdFuel.registerModule(MODULE_NAME, {
            postQueueCallback: _addTargetingForCreativeExtraction
        }, MODULE_VERSION, window.AdFuelOptions.CREATIVE_REVIEW);
        window.AdFuelUtils.addEvent(window, 'message', parseMessage);
        window.AdFuelUtils.addEvent(window, 'hashchange', checkHash);
        addKeypressModule();
        setRenderCompleteListener();
        checkHash();
    }

    function init() {
        setDevice();
        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
    }

    init();
})();


////////////////////////////////////////////
//GUID 3.3
////////////////////////////////////////////

/*
    GUID Module - Version 3.3.0
    @3.3.0: - Initialization Update for GDPR
*/

(function createGUIDModule() {

    var MODULE_NAME = 'Turner GUID Module';
    var MODULE_VERSION = 'v3.3.0';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getLogger: function() {},
        readCookie: function() {},
    };

    var t_getGuid;

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {};
    window.AdFuelOptions.GUID = window.AdFuelOptions.GUID || {  };

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'guid', 'color: #d2b000; padding: 2px');
    var enableGuid = true;

    if (window.AdFuelOptions.GDPR && window.AdFuelOptions.GDPR.ENABLED) {
        window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
            if (applies && !window.AdFuelUtils.getConsent()) {
                logger.log('Disabling GUID due to GDPR restrictions.');
                enableGuid = false;
            }
            if (enableGuid) {
                //used by freewheel helper
                t_getGuid = function t_getGuid(){ return window.AdFuelUtils.readCookie('ug'); }

                function gdprInit() {
                    logger.log('Initializing Module...');
                    var gdprProcessCookie = function gdprProcessCookie() {
                        if (window) {
                            window.turner_getGuid = t_getGuid;
                        }
    
                        function registerModuleWithAdFuel() {
                            //todo: remove AdFuel.readCookie("ug") once everyone is on new ais.js
                            window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, window.AdFuelOptions.GUID);
                            var guid = window.turner_getGuid();
    
                            logger.log('setting guid targeting', {
                                guid: guid,
                            });
    
                            window.AdFuel.addPageLevelTarget('guid', guid);
                        }
    
                        if (window.AdFuel) {
                            //AdFuel loaded first
                            registerModuleWithAdFuel();
                        } else {
                            //wait for AdFuel to load
                            window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                        }
                    }
    
                    if (window.AdFuelUtils.hasCookie('ugs')) {
                        gdprProcessCookie();
                    } else {
                        //execute script to set cookie
                        var guid_url = '//www.ugdturner.com/xd.sjs';

                        var a = document;
                        var b = a.createElement('script');
                        var c = a.getElementsByTagName('script')[0];
                        var d = /^(complete|loaded)$/;
                        var e = false;

                        b.type = 'text/javascript';
                        b.async = true;
                        b.src = guid_url;

                        b.onload = b.onreadystatechange = function(){
                            if (!e && !(('readyState' in b) && d.test(b.readyState))) {
                                b.onload = b.onreadystatechange = null;
                                e = true;
                                gdprProcessCookie();
                            }
                        };

                        c.parentNode.insertBefore(b, c);
                    }
                }

                if (window.__cmp) {
                    window.__cmp('getConsentData', null, function(result) {
                        if (!result && window.AdFuelUtils.hasUserConsent && !window.Optanon) {
                            document.addEventListener('optanonLoaded', gdprInit, false);
                        } else {
                            gdprInit();
                        }
                    });
                } else {
                    gdprInit();
                }
            }
        });
    }else{
        //used by freewheel helper
        t_getGuid = function t_getGuid(){ return window.AdFuelUtils.readCookie('ug'); }

        function processCookie() {
            if (window) {
                window.turner_getGuid = t_getGuid;
            }

            function registerModuleWithAdFuel() {
                //todo: remove AdFuel.readCookie("ug") once everyone is on new ais.js
                window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, window.AdFuelOptions.GUID);
                var guid = window.turner_getGuid();

                logger.log('setting guid targeting', {
                    guid: guid,
                });

                window.AdFuel.addPageLevelTarget('guid', guid);
            }

            if (window.AdFuel) {
                //AdFuel loaded first
                registerModuleWithAdFuel();
            } else {
                //wait for AdFuel to load
                window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
            }
        }

        function init() {
            logger.log('Initializing Module...');
            if (window.AdFuelUtils.hasCookie('ugs')) {
                processCookie();
            } else {
                //execute script to set cookie
                var guid_url = '//www.ugdturner.com/xd.sjs';

                var a = document;
                var b = a.createElement('script');
                var c = a.getElementsByTagName('script')[0];
                var d = /^(complete|loaded)$/;
                var e = false;

                b.type = 'text/javascript';
                b.async = true;
                b.src = guid_url;

                b.onload = b.onreadystatechange = function(){
                    if (!e && !(('readyState' in b) && d.test(b.readyState))) {
                        b.onload = b.onreadystatechange = null;
                        e = true;
                        processCookie();
                    }
                };

                c.parentNode.insertBefore(b, c);
            }
        }

        init();
    }
})();


////////////////////////////////////////////
//In View Refresh 3.0
////////////////////////////////////////////

(function createInViewRefreshModule() {

    var MODULE_NAME = 'In-View Refresh Module';
    var MODULE_VERSION = 'v3.0.12';

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'ivr', 'color: #00e1e1; padding: 2px');

    var _refreshableInViewSlots = {};
    var _focused = !document.hidden;
    var TARGET_DISPLAY_MILLISECONDS = window.AdFuelOptions.IVR.DEFAULT_DISPLAY_MILLISECONDS;
    var TARGET_DISPLAY_PERCENT = window.AdFuelOptions.IVR.DEFAULT_DISPLAY_PERCENT;
    var registeredSlots = [];
    var renderedCreativeIds = {};
    var renderedLineItemIds = {};
    var invalidSlotIds = [];

    var _viewabilityListenersStarted = false;

    var startViewabilityListeners = function _startViewabilityListeners() {
      if (!_viewabilityListenersStarted) {
          window.googletag.cmd.push(function startViewabilityListeners() {
              window.googletag.pubads().addEventListener('impressionViewable', function impressionViewableFunc(event) {
                  var detail = event;
                  var divId = detail.slot.getSlotElementId();
                  if (_refreshableInViewSlots[divId] && !_refreshableInViewSlots[divId].listenersSet) {
                    logger.log('Refreshable In View Slot listeners have not been set: ', divId, {object: _refreshableInViewSlots[divId]});
                    _createInViewRefreshObject(detail);
                  }else{
                    logger.log('Refreshable In View Slot listeners have already been set for: ', divId, {object: _refreshableInViewSlots[divId]});
                  }
              });
              window.googletag.pubads().addEventListener('slotVisibilityChanged', function slotVisibilityChangedFunc(event) {
                  var detail = event;
                  _visibilityChanged(detail);
              });
              window.googletag.pubads().addEventListener('slotRenderEnded', function slotRenderEndedFunc(event){
                var detail = event;
                var divId = detail.slot.getSlotElementId();
                var renderedSize = detail.size ? detail.size.join('x') : '0x0';
                var creativeId = event.creativeId || event.sourceAgnosticCreativeId;
                var lineItemId = event.lineItemId || event.sourceAgnosticLineItemId;
                var creativeIds = renderedCreativeIds[divId] || [];
                var lineItemIds = renderedLineItemIds[divId] || [];
                logger.log("----------Slot: [" + divId + "]----------");
                logger.log("Rendered Size: ", renderedSize);
                logger.log("Creative Ids: ", {selected: creativeId, native: event.creativeId, agnostic: event.sourceAgnosticCreativeId});
                if (creativeIds.indexOf(creativeId) >= 0) {
                    delete _refreshableInViewSlots[divId];
                    registeredSlots.splice(registeredSlots.indexOf(divId), 1);
                    invalidSlotIds.push(divId);
                    logger.log('Duplicate Creative [' + creativeId + '] returned for slot [' + divId + '].  Stopping refresh.', registeredSlots);
                } else if (['970x66','970x90','970x250'].indexOf(renderedSize) >= 0) {
                    delete _refreshableInViewSlots[divId];
                    registeredSlots.splice(registeredSlots.indexOf(divId), 1);
                    invalidSlotIds.push(divId);
                    logger.log('Rendered size [' + renderedSize + '] for slot [' + divId + '] is invalid for IVR.  Stopping refresh.', registeredSlots);
                } else {
                    if (creativeId && creativeIds.indexOf(creativeId) < 0) {
                        creativeIds.push(creativeId);
                    }
                    if (lineItemId && lineItemIds.indexOf(lineItemId) < 0) {
                        lineItemIds.push(lineItemId);
                    }
                    renderedCreativeIds[divId] = creativeIds;
                    renderedLineItemIds[divId] = lineItemIds;
                    logger.log("Rendered Creatives: ", renderedCreativeIds[divId]);
                    logger.log("Rendered LineItems: ", renderedLineItemIds[divId]);
                }
            });
        });
          window.AdFuelUtils.addEvent(document, 'visibilitychange', _visibilityChangeEvent);
          _viewabilityListenersStarted = true;
          logger.log('Listeners Started!');
      }
    }

    function _visibilityChangeEvent(event) {
        logger.log('Visibility Change Event: ', event);
        logger.log('Relaying to _focusChanged...');
        _focused = !document.hidden;
        event.target = event.target || {};
        event.target.hidden = event.target.hidden || document.hidden;
        _focusChanged(event);
    }

    function _focusChanged() {
        var hidden = document.hidden;
        if (hidden) {
            logger.log('Page is hidden.  Destroying all intervals...');
            destroyInterval();
        } else {
            logger.log('Page is not hidden. Checking Intervals...');
            for (var slotIndex in _refreshableInViewSlots) {
                if (_refreshableInViewSlots.hasOwnProperty(slotIndex)) {
                    logger.log({ index: slotIndex, slot:  _refreshableInViewSlots[slotIndex]});
                    var interval = getInterval(slotIndex);
                    if (interval) {
                        logger.log('Interval exists...', slotIndex);
                        // destroyInterval(slotIndex);
                    }else{
                        logger.log('Creating Interval...', slotIndex);
                        _detectInView(slotIndex);
                    }
                }
            }
        }
    }

    function _visibilityChanged(obj) {
        var percent = obj.inViewPercentage || 0;
        var elementId = obj.slot.getSlotElementId();
        var interval = getInterval(elementId);
        if (percent >= TARGET_DISPLAY_PERCENT) {
            logger.log('Element [' + elementId + '] Meets In-View Percentage Requirements', percent);
            if (_focused) {
                logger.log('... and page has focus');
                if (!interval) {
                    logger.log('... interval does not exist');
                    createInterval(elementId);
                }
            } else {
                logger.log('... but page does not have focus.  Not creating interval.');
            }
        }else{
            logger.log('Element [' + elementId + '] Does NOT Meet In-View Percentage Requirements', percent);
            if (interval) {
                logger.log('Found Interval for Element [' + elementId + ']... Destroying Interval.');
                destroyInterval(elementId);
            }
        }
    }

    function getInterval(elementId) {
        logger.log('Getting Interval for: ', elementId);
        return _refreshableInViewSlots[elementId] && _refreshableInViewSlots[elementId].timer === null ?
            false : _refreshableInViewSlots[elementId] ? _refreshableInViewSlots[elementId].timer : false;
    }

    function createInterval(elementId) {
        if (_refreshableInViewSlots.hasOwnProperty(elementId)) {
            var slot = _refreshableInViewSlots[elementId];
            slot.inViewRefreshCounter = _refreshableInViewSlots[elementId].inViewRefreshCounter || 0;
            logger.log('Creating Interval for: ', elementId);
            slot.timer = window.setInterval(function slotTimerFunc() {
                logger.log('Slot: ', slot);
                if (typeof slot !== 'undefined' && slot !== null){
                    if (slot.inViewRefreshCount > 0) {
                        slot.el = slot.el || document.getElementById(elementId);
                        var elId = slot.el.id;
                        slot.inViewRefreshCount--;
                        slot.inViewRefreshCounter++;
                        window.AdFuelUtils.metricApi.addMetric({type: 'viewability', id: elId, data: { refresh_count: slot.inViewRefreshCounter, last_refresh: Date.now()} });
                        if (slot.inViewRefreshCount >= 0) {
                            logger.log('Slot [' + elId + '] is in view and is being refreshed.');
                            logger.log('Starting Targeting Keys: ', window.googletag.pubads().getSlots().filter(function(slot){
                                return slot.getSlotElementId() === elId;
                            })[0].getTargetingKeys());
                            logger.log('Clearing targeting on slot [' + elId + ']...', slot);
                            window.AdFuel.removeSlotLevelTarget(elId);
                            logger.log('Cleared Targeting Keys: ', window.googletag.pubads().getSlots().filter(function(slot){
                                return slot.getSlotElementId() === elId;
                            })[0].getTargetingKeys());
                            logger.log('Setting rfv count targeting on slot [' + elId + ']: ', slot.inViewRefreshCounter);
                            window.AdFuel.addSlotLevelTarget(elId, 'rfv',slot.inViewRefreshCounter);
                            if (invalidSlotIds.indexOf(elId) < 0){
                                logger.log('Calling refresh On slot[' + elId + ']...', slot);
                                window.AdFuel.refresh([elId]);
                                logger.log('Slot [' + slot.el.id + '] is in view, was just refreshed, and still has ' + slot.inViewRefreshCount + ' refreshes remaining.');
                            }else{
                                logger.log('Slot [' + slot.el.id + '] is invalid for refresh.');
                            }
                        }
                    }else{
                        logger.log('Slot [' + elementId + '] is in view but has no refreshes remaining.', slot, slot.inViewRefreshCount);
                    }
                }else{
                    logger.log('Slot refresh prevented due to rendered size.');
                }
            }, TARGET_DISPLAY_MILLISECONDS);
            logger.log('Done.');
        }
    }

    function destroyInterval(elementId) {
        var slot;
        if (elementId) {
            logger.log('Destroying interval for: ', elementId);
            slot = _refreshableInViewSlots[elementId];
            window.clearInterval(slot.timer);
            slot.timer = null;
            slot.inView = false;
        }else{
            logger.log('Destroying All Intervals');
            for (var slotIndex in _refreshableInViewSlots) {
                if (_refreshableInViewSlots.hasOwnProperty(slotIndex)) {
                    logger.log('Destroying interval for: ', slotIndex);
                    slot = _refreshableInViewSlots[slotIndex];
                    window.clearInterval(slot.timer);
                    slot.timer = null;
                    slot.inView = false;
                }
            }
        }
    }

    function _createInViewRefreshObject(event) {
        logger.log('Checking Element: ', {event: event});

        var divId = event.slot.getSlotElementId();
        var el = document.getElementById(divId);

        logger.log('Creating In View Refresh Object: ', {divId: divId, el: el});
        var empty = event.slot ? (event.slot.l ? event.slot.l._empty_ : false) : false;
        logger.log('Is Slot Empty: ', empty);

        if (!empty) {

            if (registeredSlots.indexOf(divId) !== -1) {
                logger.log('Slot is registered with InView Refresh');
                _refreshableInViewSlots[divId].inView = false;
                _refreshableInViewSlots[divId].el = el;
                // _refreshableInViewSlots[divId].mouseover = _refreshableInViewSlots[divId].mouseover || addEvent(el, 'mouseover', _mouseoverFunction);
                // _refreshableInViewSlots[divId].mouseout = _refreshableInViewSlots[divId].mouseout || addEvent(el, 'mouseout', _mouseoutFunction);
                _refreshableInViewSlots[divId].refreshCount = 0;
                _refreshableInViewSlots[divId].listenersSet = true;
            }else{
                logger.log('Slot is NOT registered with InView Refresh');
            }
        } else {
            logger.log('Slot is empty.')
        }
    }

    function _isInsideBounds(clientX1, clientX2, clientY1, clientY2, elX1, elX2, elY1, elY2) {

        var a = Math.max(clientY1, elY1);   //287
        var b = Math.min(clientY2, elY2);   //377
        var c = Math.max(clientX1, elX1);   //587.5
        var d = Math.min(clientX2, elX2);   //1315.5

        var viewableArea = 0;

        var aCheck = a >= clientY1 && a <= clientY2;
        var bCheck = b >= clientY1 && b <= clientY2;
        var cCheck = c >= clientX1 && c <= clientX2;
        var dCheck = d >= clientX1 && d <= clientX2;

        if (aCheck && bCheck && cCheck && dCheck) {
            viewableArea = (b - a) * (d - c);
        }

        var elArea = (elX2 - elX1) * (elY2 - elY1);

        var ratioArea = 0;
        if (elArea > 0) {
            ratioArea = viewableArea / elArea;
        }
        return ratioArea;
    }

    function _getPercentInView(el) {
        var client_width = window.innerWidth ||
            document.documentElement.clientWidth ||
            document.body.clientWidth;
        var client_height = window.innerHeight ||
            document.documentElement.clientHeight ||
            document.body.clientHeight;
        var client_x1 = window.pageXOffset ||
            document.body.scrollLeft ||
            document.documentElement.scrollLeft;
        var client_y1 = window.pageYOffset ||
            document.body.scrollTop ||
            document.documentElement.scrollTop;

        client_width = parseInt(client_width);
        client_height = parseInt(client_height);
        client_x1 = parseInt(client_x1);
        client_y1 = parseInt(client_y1);

        var el_width = parseInt(el.clientWidth);
        var el_height = parseInt(el.clientHeight);

        var el_xy = el.getBoundingClientRect();

        var el_x1 = el_xy.left + document.body.scrollLeft;
        var el_y1 = el_xy.top + document.body.scrollTop;
        var el_x2 = el_x1 + el_width;
        var el_y2 = el_y1 + el_height;

        var client_x2 = client_x1 + client_width;
        var client_y2 = client_y1 + client_height;

        var viewable_percent = _isInsideBounds(
            client_x1, client_x2, client_y1, client_y2,
            el_x1, el_x2, el_y1, el_y2, el
        );
        return viewable_percent * 100;
    }

    function _detectInView() {
        logger.log('Detecting In View Slots.');
        if (_refreshableInViewSlots.length < 1) {
            logger.log('No registered slots have been rendered yet.');
        }
        for (var divId in _refreshableInViewSlots) {
            if (_refreshableInViewSlots.hasOwnProperty(divId)) {
                var slot = _refreshableInViewSlots[divId];
                var el = slot.el || document.getElementById(divId);
                var viewTest = false;
                if (el) {
                    viewTest = el &&
                        _focused &&
                        _getPercentInView(el) >= TARGET_DISPLAY_PERCENT &&
                        parseInt(_refreshableInViewSlots[divId].inViewRefreshCount) > 0;
                }
                var interval = getInterval(divId);
                if (viewTest && !interval) {
                    createInterval(divId)
                }
            }
        }
    }

    function preQueueCallbackForIVR(asset, callback) {

        var startListeners = false;
        logger.time('IVR Pre-Queue Process Start');
        for (var x = 0; x < asset.length; x++) {
            var slot = asset[x];
            slot.hasInViewRefresh = asset[0].hasInViewRefresh ? asset[0].hasInViewRefresh : (slot.hasInViewRefresh || 'false');
            if (slot.hasInViewRefresh === 'true') {
                logger.log('Slot has In-View Refresh...');
                slot.inViewRefreshCounter = 0;
                startListeners = true;
                registeredSlots.push(slot.rktr_slot_id);
            }
        }

        if (startListeners) {
            logger.log('Starting IVR Listeners...');
            startViewabilityListeners();
        }
        callback();
        logger.timeEnd('IVR Pre-Queue Process Start');
        return null;
    }

    function preDispatchCallbackForIVR(queue, callback) {
        for (var qId = 0; qId < queue.length; qId++) {
            var rocketeerSlot = queue[qId];
            if (rocketeerSlot.hasInViewRefresh === 'true') {
                logger.log('Slot is configured for in view refresh.  Creating refresh object for slot [' + rocketeerSlot.rktr_slot_id + ']');
                _refreshableInViewSlots[rocketeerSlot.rktr_slot_id] = rocketeerSlot;
            } else {
                logger.log('Slot is not configured for in view refresh. [' + rocketeerSlot.rktr_slot_id + ']');
            }
        }
        if (callback) callback();
    }

    function registerModuleWithAdFuel() {
        window.AdFuel.registerModule('In View Refresh', {
            preQueueCallback: preQueueCallbackForIVR,
            preDispatchCallback: preDispatchCallbackForIVR
        }, MODULE_VERSION, window.AdFuelOptions.IVR);
    }

    function init() {
        if (window.AdFuel) {
            //AdFuel loaded first
            registerModuleWithAdFuel();
        } else {
            //wait for AdFuel to load
            window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
        }
    }

    window.AdFuelUtils.startViewabilityListeners = startViewabilityListeners;
    init();

})();


////////////////////////////////////////////
//Integral Ad Science 3.2
////////////////////////////////////////////

(function createIASModule() {

    var MODULE_NAME = 'Integral Ad Science Module';
    var MODULE_VERSION = 'v3.2.1';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getURLParam: function() {},
        isMonetized: function() {},
        isIntl: false,
        getLogger: function() {},
        addMetric: function() {},
    };

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {};
    window.AdFuelOptions.IAS = window.AdFuelOptions.IAS || { DOM_PUB_ID: 925660, INTL_PUB_ID: 925660 };

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'ias', 'color: #d2b000; padding: 2px');

    var iasActive = false;
    var DOMESTIC_PUB_ID = window.AdFuelOptions.IAS.DOM_PUB_ID;
    var INTERNATIONAL_PUB_ID = window.AdFuelOptions.IAS.INTL_PUB_ID;

    window.__iasPET = window.__iasPET || {};
    window.__iasPET.queue = window.__iasPET.queue || [];

    function iasDataHandler(done) {
        logger.log('Adding IAS Targeting to slots...');
        window.__iasPET.setTargetingForGPT();
        if (done && typeof done === 'function') done();
    }

    function preQueueCallback(asset, done) {
        logger.log('Building slots for IAS...');
        var adSlots = [];
        for (var x = 0; x < asset.length; x++) {
            if (asset[x].rktr_slot_id !== 'page') {
                logger.log('Pushing Slot: ', {
                    adSlotId: asset[x].rktr_slot_id,
                    size: asset[x].sizes.map(function(size){
                        return size[0] === 'fluid' ? [1,1] : size;
                    }),
                    adUnitPath: '/8663477/' + asset[x].rktr_ad_id,
                });
                adSlots.push({
                    adSlotId: asset[x].rktr_slot_id,
                    size: asset[x].sizes.map(function(size){
                        return size[0] === 'fluid' ? [1,1] : size;
                    }),
                    adUnitPath: '/8663477/' + asset[x].rktr_ad_id,
                });
            }
        }
        window.__iasPET.queue.push({
            adSlots: adSlots,
            dataHandler: iasDataHandler.bind(null, [done]),
        });
    }

    function preDispatchCallback(asset, done) {
        setTimeout(function preDispatchTimeoutFunc() {
            try{
                logger.log('Adding IAS Targeting to slots...');
                window.__iasPET.setTargetingForGPT();
            }catch(err) {
                logger.warn('Could not set IAS targeting: ', err);
            }
            done();
        }, 900);
    }

    function registerModuleWithAdFuel() {
        if (iasActive) {
            logger.log('Registering module with AdFuel');
            window.AdFuel.setOptions({
                queueCallbackTimeoutInMilliseconds: 1000,
                dispatchCallbackTimeoutInMilliseconds: 1000,
            });
            window.AdFuel.registerModule(MODULE_NAME, {
                preQueueCallback: preQueueCallback,
                preDispatchCallback: preDispatchCallback,
            }, MODULE_VERSION, window.AdFuelOptions.IAS);
        }
    }

    function addIASJavascript() {
        logger.log('Adding IAS script to head...');
        var iasTag = document.createElement('script');
        iasTag.async = true;
        iasTag.src = '//cdn.adsafeprotected.com/iasPET.1.js';
        var targetNode = document.getElementsByTagName('head')[0];
        targetNode.insertBefore(iasTag, targetNode.firstChild);
        iasActive = true;
        var pubId = INTERNATIONAL_PUB_ID;
        logger.log('Pub Ids: ', DOMESTIC_PUB_ID, INTERNATIONAL_PUB_ID);
        logger.log('Setting iasPET.pubId: ', pubId);
        window.__iasPET.pubId = pubId; // Set IAS publisher ID before pushing to the queue
    }

    function init() {
        logger.log('Initializing Module...');
        if (window.AdFuelOptions.GDPR && window.AdFuelOptions.GDPR.ENABLED) {
            window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
                if (applies && !window.AdFuelUtils.getConsent()) {
                    logger.log('Disabling IAS due to GDPR restrictions.');
                }else{
                    addIASJavascript();
                    if (window.AdFuel && window.AdFuel.cmd) {
                        //AdFuel loaded first
                        window.AdFuel.cmd.push(registerModuleWithAdFuel);
                    }else if (window.AdFuel) {
                        registerModuleWithAdFuel();
                    } else {
                        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                    }
                }
            });
        }else{
            addIASJavascript();
            if (window.AdFuel && window.AdFuel.cmd) {
                //AdFuel loaded first
                window.AdFuel.cmd.push(registerModuleWithAdFuel);
            }else if (window.AdFuel) {
                registerModuleWithAdFuel();
            } else {
                window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
            }
        }
    }

    init();
})();

////////////////////////////////////////////
//Krux 3.2
////////////////////////////////////////////

(function createKruxModule() {

    var MODULE_NAME = 'Krux Module';
    var MODULE_VERSION = 'v3.2.0';

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'krux', 'color: #d2b000; padding: 2px');
    var enableKrux = true;

    var processCookie;
    var setControlTag;
    var registerModuleWithAdFuel;
    var init;

    function retrieve(n) {
        var k = 'kx'+n;

        var ls = ((function() {
            try {
                return window.localStorage;
            } catch(e) {
                return null;
            }
        }))();

        if (ls) {
            return ls[k] || '';
        } else if (navigator.cookieEnabled) {
            var m = document.cookie.match(k + '=([^;]*)');
            return (m && unescape(m[1])) || '';
        } else {
            return '';
        }
    }

    if (window.AdFuelOptions.GDPR && window.AdFuelOptions.GDPR.ENABLED) {
        window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
            if (applies && !window.AdFuelUtils.getConsent()) {
                logger.log('Disabling Krux due to GDPR restrictions.');
                enableKrux = false;
            }
            if (enableKrux) {
                window.Krux || ((window.Krux = function () {window.Krux.q.push([arguments]);}).q = []);

            }

            window.krux_getDESegments = enableKrux ? function krux_getDESegments() {
                var segmentString = '&kxid=';
                if (window.Krux.user) {
                    segmentString += window.Krux.user;
                }
                segmentString += '&kxseg=' + window.kvs.join(',');
                return segmentString;
            } : function () { };

            window.krux_getFWSegments = enableKrux ? function krux_getFWSegments(){
                window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
                return 'kxseg=' + window.Krux.segments.join(',kxseg=');
            } : function () { };

            window.krux_getUser = enableKrux ? function krux_getUser(){
                window.Krux.user = retrieve('user');
                return window.Krux.user;
            } : function () { };

            window.krux_getFWKeyValues = enableKrux ? function krux_getFWKeyValues(prefix, limit) {
                window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
                var segPrefix = prefix || '_fwu:386123:';
                var segLimit = limit || 35;
                var fwKVP = {};
                for (var x = 0; x < window.Krux.segments.length; x++) {
                    if (x < segLimit) fwKVP[segPrefix + window.Krux.segments[x]] = 1;
                }
                return fwKVP;
            } : function () { };

            processCookie = enableKrux ? function processCookie(asset, callback) {
                window.Krux.user = retrieve('user');
                window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
                logger.log("Adding Krux Targeting...");
                var kuid = window.Krux.user;
                var ksg = window.Krux.segments.filter(function filterFunc(segment, index){ return index < 35 });

                window.AdFuel.addPageLevelTarget('kuid', kuid);
                window.AdFuel.addPageLevelTarget('ksg', ksg);
                window.AdFuelUtils.metricApi.addMetric({type: 'modules', id: 'Krux', data: { targeting: { kuid: kuid, ksg: ksg } } });
                callback();
            } : function () { };

            registerModuleWithAdFuel = enableKrux ? function registerModuleWithAdFuel() {
                window.AdFuel.registerModule(MODULE_NAME, {preDispatchCallback: processCookie}, MODULE_VERSION, window.AdFuelOptions.KRUX);
            } : function () { };

            setControlTag = enableKrux ? function setControlTag(controlTagId) {
                logger.log("Setting Control Tag: ", controlTagId);
                //execute script to set cookie
                var a = document;

                var b = a.createElement('script');
                var c = a.getElementsByTagName('head')[0];
                var d = /^(complete|loaded)$/;
                var e = false;

                b.type = 'text/javascript';
                b.async = true;

                var m;
                var src = (m = a.location.href.match(/\bkxsrc=([^&]+)/)) && decodeURIComponent(m[1]);
                b.src = /^https?:\/\/([^\/]+\.)?krxd\.net(:\d{1,5})?\//i.test(src) ? src : src === 'disable' ? '' :
                    (a.location.protocol === 'https:' ? 'https:' : 'http:') + '//cdn.krxd.net/controltag?confid=' + controlTagId;

                if (!window.AdFuelUtils.piiFilter.hash() && !window.AdFuelUtils.piiFilter.qs() && !window.AdFuelUtils.piiFilter.ref()) {
                    logger.log("Adding Krux Script To Head of Page...", b.src);
                    c.appendChild(b);
                }
            } : function () { };

            init = function init() {
                if (window.AdFuelOptions.KRUX) {
                    //set based on site
                    var controlTag = window.AdFuelUtils.isIntl ? window.AdFuelOptions.KRUX.INTL_CONTROLTAG : window.AdFuelOptions.KRUX.DOM_CONTROLTAG;
                    if (enableKrux) {
                        setControlTag(controlTag);
                        if (window.AdFuel) {
                            //AdFuel loaded first
                            registerModuleWithAdFuel();
                        } else {
                            window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                        }
                    }
                }
            }
            init();
        });
    }else{
        window.Krux || ((window.Krux = function () {window.Krux.q.push([arguments]);}).q = []);

        window.krux_getDESegments = function krux_getDESegments() {
            var segmentString = '&kxid=';
            if (window.Krux.user) {
                segmentString += window.Krux.user;
            }
            segmentString += '&kxseg=' + window.kvs.join(',');
            return segmentString;
        };

        window.krux_getFWSegments = function krux_getFWSegments(){
            window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
            return 'kxseg=' + window.Krux.segments.join(',kxseg=');
        };

        window.krux_getUser = function krux_getUser(){
            window.Krux.user = retrieve('user');
            return window.Krux.user;
        };

        window.krux_getFWKeyValues = function krux_getFWKeyValues(prefix, limit) {
            window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
            var segPrefix = prefix || '_fwu:386123:';
            var segLimit = limit || 35;
            var fwKVP = {};
            for (var x = 0; x < window.Krux.segments.length; x++) {
                if (x < segLimit) fwKVP[segPrefix + window.Krux.segments[x]] = 1;
            }
            return fwKVP;
        };

        processCookie = function processCookie(asset, callback) {
            window.Krux.user = retrieve('user');
            window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
            logger.log("Adding Krux Targeting...");
            var kuid = window.Krux.user;
            var ksg = window.Krux.segments.filter(function filterFunc(segment, index){ return index < 35 });

            window.AdFuel.addPageLevelTarget('kuid', kuid);
            window.AdFuel.addPageLevelTarget('ksg', ksg);
            window.AdFuelUtils.metricApi.addMetric({type: 'modules', id: 'Krux', data: { targeting: { kuid: kuid, ksg: ksg } } });
            callback();
        };

        registerModuleWithAdFuel = function registerModuleWithAdFuel() {
            window.AdFuel.registerModule(MODULE_NAME, {preDispatchCallback: processCookie}, MODULE_VERSION, window.AdFuelOptions.KRUX);
        };

        setControlTag = function setControlTag(controlTagId) {
            logger.log("Setting Control Tag: ", controlTagId);
            //execute script to set cookie
            var a = document;

            var b = a.createElement('script');
            var c = a.getElementsByTagName('head')[0];
            var d = /^(complete|loaded)$/;
            var e = false;

            b.type = 'text/javascript';
            b.async = true;

            var m;
            var src = (m = a.location.href.match(/\bkxsrc=([^&]+)/)) && decodeURIComponent(m[1]);
            b.src = /^https?:\/\/([^\/]+\.)?krxd\.net(:\d{1,5})?\//i.test(src) ? src : src === 'disable' ? '' :
                (a.location.protocol === 'https:' ? 'https:' : 'http:') + '//cdn.krxd.net/controltag?confid=' + controlTagId;

            if (!window.AdFuelUtils.piiFilter.hash() && !window.AdFuelUtils.piiFilter.qs() && !window.AdFuelUtils.piiFilter.ref()) {
                logger.log("Adding Krux Script To Head of Page...", b.src);
                c.appendChild(b);
            }
        };

        init = function init() {
            if (window.AdFuelOptions.KRUX) {
                //set based on site
                var controlTag = window.AdFuelUtils.isIntl ? window.AdFuelOptions.KRUX.INTL_CONTROLTAG : window.AdFuelOptions.KRUX.DOM_CONTROLTAG;
                if (enableKrux) {
                    setControlTag(controlTag);
                    if (window.AdFuel) {
                        //AdFuel loaded first
                        registerModuleWithAdFuel();
                    } else {
                        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
                    }
                }
            }
        }
        init();
    }

})();

////////////////////////////////////////////
//Proximic 3.2
////////////////////////////////////////////

/*
    Proximic Module - Version 3.2.2
    @3.2.2: - CSD-1989 - Update to error reporting logic
            - CSD-1989 - Update to prx_to targeting
*/
(function createProximicModule() {

    var MODULE_NAME = 'Proximic Module';
    var MODULE_VERSION = 'v3.2.2';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getLogger: function() {},
    };

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {
        DEFAULT_MODULE_TIMEOUT: 750
    };
    window.AdFuelOptions.PROXIMIC = window.AdFuelOptions.PROXIMIC || { };

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'proximic', 'color: #d2b000; padding: 2px');

    var loop_count = 0;
    var iteration_time =  50;
    var timeout = 750;
    var location_url = document.location.href;
    var dataSent = false;
    if (window.location.hostname.toLowerCase().match(/^train\.next\.cnn\.com/)) {
        location_url.replace('train.next.', 'www');
    }
    var parser = document.createElement('a');
    parser.href = location_url;
    logger.log("Parser: ", {parser: Object(parser) });
    var script_url = '//segment-data-us-east.zqtk.net/turner-47fcf6?url=';
    var final_url = parser.origin + (parser.pathname.indexOf('/') !== 0 ? ('/' + parser.pathname) : parser.pathname);
    var script_url = script_url + encodeURIComponent(final_url);
    logger.log("Final Document URL", final_url);
    logger.log("Proximic Url: ", script_url);
    // var script_url = "//segment-data-us-east.zqtk.net/turner-47fcf6?url=" + encodeURIComponent('http://www.cnn.com/2016/02/17/entertainment/prince-passport-photo-feat/index.html');
    var scriptAdded = false;

    // sample response from js and format can be easily changed:
    window.gotSegmentData = function gotSegmentData(data) {
        if (data.data) {
            logger.log('Proximic returned with segment data: ', data.data);
            window.proximicData = data.data;
        }
        if (data.errors){
            logger.error('Proximic returned with errors: ', data.errors);
            window.proximicData = data.errors;
        }
    };

    function recallProximic(url) {
        window.proximicData = [];
        dataSent = false;
        window.AdFuel.removePageLevelTarget('pconid');
        var location_url = url || document.location.href;
        if (window.location.hostname.toLowerCase().match(/^train\.next\.cnn\.com/)) {
            location_url.replace('train.next.', 'www');
        }
        var parser = document.createElement('a');
        parser.href = location_url;
        logger.log("Parser: ", {parser: Object(parser) });
        var final_url = parser.origin + (parser.pathname.indexOf('/') !== 0 ? ('/' + parser.pathname) : parser.pathname);
        script_url = '//segment-data-us-east.zqtk.net/turner-47fcf6?url=' + encodeURIComponent(final_url);
        logger.log("Final Document URL", final_url);
        logger.log("Proximic Url: ", script_url);
        delete document.getElementById('proximic-script');
        scriptAdded = false;
        addProximicScriptToHead();
        loop_count = 0;
        logger.log('Waiting for Proximic Data...');
        wait_for_data();
    }

    window.recallProximic = recallProximic;

    function addProximicScriptToHead() {
        if (!scriptAdded) {
            logger.log("Adding Script?");
            if (window.AdFuelOptions.GDPR && window.AdFuelOptions.GDPR.ENABLED) {
                window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
                    if (applies && !window.AdFuelUtils.getConsent()) {
                        logger.log('Disabling Proximic due to GDPR restrictions.');
                    }else{
                        var prox = document.createElement('script');
                        prox.id = 'proximic-script'
                        prox.type = 'text/javascript';
                        prox.async = true;
                        prox.src = (document.location.protocol === 'https:' ? 'https:' : 'http:') + script_url;
                        var node = document.getElementsByTagName('script')[0];
                        node.parentNode.appendChild(prox);
                        logger.log('Added Proximic script to head of page.', script_url);
                        scriptAdded = true;
                    }
                });
            }else{
                var prox = document.createElement('script');
                prox.id = 'proximic-script'
                prox.type = 'text/javascript';
                prox.async = true;
                prox.src = (document.location.protocol === 'https:' ? 'https:' : 'http:') + script_url;
                var node = document.getElementsByTagName('script')[0];
                node.parentNode.appendChild(prox);
                logger.log('Added Proximic script to head of page.', script_url);
                scriptAdded = true;
            }
            window.AdFuel.addPageLevelTarget('prx_to', '1');
        }else{
            logger.log("Script Already Added.", document.getElementById('proximic-script').src);
        }
    }

    function call_dfp(dataForDFP, callback) {
        if (dataSent){
            logger.log("Proximic Data Already Sent.");
        } else if (dataForDFP !== '' && typeof dataForDFP !== 'undefined') {
            dataSent = true;
            logger.log('Setting data for DFP', dataForDFP);
            window.AdFuel.addPageLevelTarget('pconid', dataForDFP);
            window.AdFuel.removePageLevelTarget('prx_to', '1');
            window.AdFuel.addPageLevelTarget('prx_to', '0');
            if(callback) callback();
        }
    }

    function checkEligibility(queue, callback) {
        logger.log("Checking Eligibility...", queue);
        if (queue && queue.length > 0){
            var rktrAdId;
            var x;
            var money = true;
            var epu = false;
            try {
                if (
                    document.location.hostname.indexOf('money') !== -1 &&
                    (!window.CNNMONEY ||
                        !window.CNNMONEY.adTargets ||
                        !window.CNNMONEY.adTargets.c_type || (['article', 'video', 'gallery'].indexOf(window.CNNMONEY.adTargets.c_type) === -1)
                    )
                ) {
                    money = false;
                }
                logger.log("Is Money & Eligible?", money);
                for (x = 0; x < queue.length; x++) {
                    if (queue[x].rktr_slot_id !== 'page'){
                        rktrAdId = queue[x].rktr_ad_id.toLowerCase();
                        epu = (document.location.hostname.indexOf('explorepartsunknown.com') !== -1 && rktrAdId.search(/(leaf)/) > 0);
                        logger.log('Is this page for ExplorePartsUnknown: ', epu);
                        logger.log('Should Proximic Be Included: ', (rktrAdId.search(/^(arabic|cnn|cnnbusiness|cnnbusinessedition)\/(homepage|(.+\/landing))/) < 0 && rktrAdId.search(/^(arabic|cnni|cnnbusiness|cnnbusinessedition)\/(homepage|(.+\/(landing|main)))/) < 0 && money) || epu);
                        if ((rktrAdId.search(/^(arabic|cnn|cnnbusiness|cnnbusinessedition)\/(homepage|(.+\/landing))/) < 0 && rktrAdId.search(/^(arabic|cnni|cnnbusiness|cnnbusinessedition)\/(homepage|(.+\/(landing|main)))/) < 0 && money) || epu) {
                            logger.log('Adding Proximic based on ad unit specifications: ', rktrAdId)
                            addProximicScriptToHead();
                            logger.log('Waiting for Proximic Data...');
                            wait_for_data(callback);
                            break;
                        }else{
                            logger.log('Filtering Proximic based on ad unit specifications: ', rktrAdId)
                            callback();
                            break;
                        }
                    }
                }
            } catch (err) {
                logger.log('Error parsing Proximic data: ', err.message || 'Unknown');
            }
        }else{
            callback();
        }
    }

    function wait_for_data(callback) {
        var timeLogEnded = false;
        setTimeout(function waitForDataTimeoutFunc() {
            loop_count++;
            if (window.proximicData !== '' && typeof window.proximicData !== 'undefined' && (Array.isArray(window.proximicData) && window.proximicData.length > 0)) {
                /* Call DFP with data */
                logger.log('Proximic Data found!');
                if (!timeLogEnded){
                    timeLogEnded = true;
                }
                call_dfp(window.proximicData, callback);
            } else if (loop_count * iteration_time < timeout) {
                logger.log('Still waiting...');
                wait_for_data(callback);
            } else {
                logger.log('Proximic Timeout Occurred!');
                if (!timeLogEnded){
                    timeLogEnded = true;
                }
                /* Timeout occurred, call DFP without data */
                window.AdFuel.addPageLevelTarget('prx_to', '1');
                if (callback) callback();
            }
        }, iteration_time);
    }

    function registerModuleWithAdFuel() {
        window.AdFuel.registerModule(MODULE_NAME, {
            preQueueCallback: checkEligibility
        }, MODULE_VERSION, window.AdFuelOptions.PROXIMIC);
        if (document.location.hostname.indexOf('explorepartsunknown.com') !== -1 && document.location.pathname === '/watch') {
            logger.log('On https://explorepartsunknown.com/watch...');
            addProximicScriptToHead();
        }

    }

    function init() {
        if (window.AdFuel) {
            //AdFuel loaded first
            registerModuleWithAdFuel();
        } else {
            window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
        }
    }

    init();
})();

////////////////////////////////////////////
//Transaction ID 3.2
////////////////////////////////////////////

(function createTransactionIDModule() {

    var MODULE_NAME = 'Transaction ID Module';
    var MODULE_VERSION = 'v3.2.0';

    // Stub out AdFuelUtils in case it's not on the page.
    window.AdFuelUtils = window.AdFuelUtils || {
        addEvent: function() {},
        getLogger: function() {},
    };

    // Stub out AdFuelOptions in case it's not on the page.
    window.AdFuelOptions = window.AdFuelOptions || {};
    window.AdFuelOptions.TRANSACTIONID = window.AdFuelOptions.TRANSACTIONID || { };

    var logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'transid', 'color: #d2b000; padding: 2px');

    window.cnnad_transactionID = null;

    //referenced by registries
    window.cnnad_getTransactionID = function cnnad_getTransactionID() {
        if (!window.cnnad_transactionID) {
            window.cnnad_transactionID = Math.round((new Date()).getTime() / 1000) + '' + Math.floor(Math.random() * 9007199254740992);
        }
        return window.cnnad_transactionID;
    };
    window.turner_getTransactionId = window.cnnad_getTransactionID;
    window.turner_getTransactionId();

    function registerModuleWithAdfuel() {
        var transId = window.turner_getTransactionId();

        logger.log('setting transid targeting', {transId: transId});
        window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, {});
        window.AdFuel.addPageLevelTarget('transId', transId);
    }

    var init = function init() {
        if (window.AdFuelOptions.GDPR && window.AdFuelOptions.GDPR.ENABLED) {
            window.AdFuelOptions.GDPR.APPLIES.then(function(applies){
                if (applies && !window.AdFuelUtils.getConsent()) {
                    logger.log('Disabling Transaction ID due to GDPR restrictions.');
                }else{
                    logger.log('Initializing Module...');
                    if (window.AdFuel) {
                        //AdFuel loaded first
                        registerModuleWithAdfuel();
                    } else {
                        //wait for AdFuel to load
                        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdfuel);
                    }
                }
            });
        }else{
            logger.log('Initializing Module...');
            if (window.AdFuel) {
                //AdFuel loaded first
                registerModuleWithAdfuel();
            } else {
                //wait for AdFuel to load
                window.AdFuelUtils.addEvent(document, 'AdFuelCreated', registerModuleWithAdfuel);
            }
        }
    }

    init();
})();

